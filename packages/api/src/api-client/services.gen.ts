// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise'
import { OpenAPI } from './core/OpenAPI'
import { request as __request } from './core/request'
import type {
  ActivateLinkedAccountData,
  ActivateLinkedAccountResponse,
  AddressIsWalletData,
  AddressIsWalletResponse,
  AddWebhookData,
  AddWebhookResponse,
  AlchemyWebhookData,
  AlchemyWebhookResponse,
  AuthData,
  AuthResponse,
  CheckQuestStatusData,
  CheckQuestStatusResponse,
  ClaimSummaryData,
  ClaimSummaryResponse,
  CompleteQuestData,
  CompleteQuestResponse,
  CreateClaimData,
  CreateClaimResponse,
  CreateIdentityData,
  CreateIdentityResponse,
  CreateInviteCodesByUserData,
  CreateInviteCodesByUserResponse,
  CreateLinkedAccountData,
  CreateLinkedAccountResponse,
  CreatePositionData,
  CreatePositionResponse,
  CreateQuestData,
  CreateQuestResponse,
  CreateUserData,
  CreateUserResponse,
  DeactivateLinkedAccountData,
  DeactivateLinkedAccountResponse,
  DeleteQuestData,
  DeleteQuestResponse,
  DeleteUserData,
  DeleteUserResponse,
  GetActivitiesData,
  GetActivitiesResponse,
  GetActivityByIdData,
  GetActivityByIdResponse,
  GetAllUsersTotalsData,
  GetAllUsersTotalsResponse,
  GetClaimByIdData,
  GetClaimByIdResponse,
  GetClaimPositionsData,
  GetClaimPositionsResponse,
  GetClaimsData,
  GetClaimsResponse,
  GetClaimsV2Data,
  GetClaimsV2Response,
  GetIdentitiesData,
  GetIdentitiesResponse,
  GetIdentitiesV2Data,
  GetIdentitiesV2Response,
  GetIdentityByIdData,
  GetIdentityByIdResponse,
  GetIdentityFollowedData,
  GetIdentityFollowedResponse,
  GetIdentityFollowersData,
  GetIdentityFollowersResponse,
  GetIdentityPositionsData,
  GetIdentityPositionsResponse,
  GetIdentityTagsData,
  GetIdentityTagsResponse,
  GetInviteCodesByUserData,
  GetInviteCodesByUserResponse,
  GetLinkedAccountByIdData,
  GetLinkedAccountByIdResponse,
  GetLinkedAccountsByUserData,
  GetLinkedAccountsByUserResponse,
  GetLinkedAccountsData,
  GetLinkedAccountsResponse,
  GetPendingIdentitiesData,
  GetPendingIdentitiesResponse,
  GetPendingIdentitiesV2Data,
  GetPendingIdentitiesV2Response,
  GetPendingIdentityData,
  GetPendingIdentityResponse,
  GetPositionByIdData,
  GetPositionByIdResponse,
  GetQueryStructureResponse,
  GetQuestData,
  GetQuestResponse,
  GetUserByIdData,
  GetUserByIdPublicData,
  GetUserByIdPublicResponse,
  GetUserByIdResponse,
  GetUserByWalletData,
  GetUserByWalletPublicData,
  GetUserByWalletPublicResponse,
  GetUserByWalletResponse,
  GetUserClaimsData,
  GetUserClaimsResponse,
  GetUserClaimsV2Data,
  GetUserClaimsV2Response,
  GetUserIdentitiesData,
  GetUserIdentitiesResponse,
  GetUserIdentitiesV2Data,
  GetUserIdentitiesV2Response,
  GetUserQuestByIdData,
  GetUserQuestByIdResponse,
  GetUserQuestByQuestIdData,
  GetUserQuestByQuestIdResponse,
  GetUsersData,
  GetUsersPositionsData,
  GetUsersPositionsResponse,
  GetUsersResponse,
  GetUserTagsData,
  GetUserTagsResponse,
  GetUserTotalsData,
  GetUserTotalsResponse,
  IdentitySummaryData,
  IdentitySummaryResponse,
  IntegrationHealthcheckResponse,
  MissedTransactionsData,
  MissedTransactionsResponse,
  PendingClaimByIdData,
  PendingClaimByIdResponse,
  PendingClaimsData,
  PendingClaimsResponse,
  PositionSummaryData,
  PositionSummaryResponse,
  ReconcilePositionData,
  ReconcilePositionResponse,
  RedeemInviteCodeData,
  RedeemInviteCodeResponse,
  RefreshData,
  RefreshResponse,
  ReissueApiKeyResponse,
  ResetQuestData,
  ResetQuestResponse,
  RetryActivityData,
  RetryActivityResponse,
  RetryBlockData,
  RetryBlockResponse,
  RetryLogData,
  RetryLogResponse,
  RevokeResponse,
  RunDynamicQueryData,
  RunDynamicQueryResponse,
  SearchClaimsData,
  SearchClaimsResponse,
  SearchClaimsV2Data,
  SearchClaimsV2Response,
  SearchData,
  SearchIdentityData,
  SearchIdentityResponse,
  SearchIdentityV2Data,
  SearchIdentityV2Response,
  SearchPositionsData,
  SearchPositionsResponse,
  SearchQuestsData,
  SearchQuestsResponse,
  SearchResponse,
  SetFollowPredicateData,
  SetFollowPredicateResponse,
  SetTagPredicateData,
  SetTagPredicateResponse,
  StartQuestData,
  StartQuestResponse,
  UpdateIdentityData,
  UpdateIdentityResponse,
  UpdatePositionData,
  UpdatePositionResponse,
  UpdateQuestData,
  UpdateQuestResponse,
  UpdateUserData,
  UpdateUserEnsData,
  UpdateUserEnsResponse,
  UpdateUserPointsData,
  UpdateUserPointsResponse,
  UpdateUserResponse,
  UpdateUsersPointsBatchData,
  UpdateUsersPointsBatchResponse,
} from './types.gen'

export class AlchemyControllerService {
  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Receive message from Alchemy
   * @throws ApiError
   */
  public static alchemyWebhook(
    data: AlchemyWebhookData,
  ): CancelablePromise<AlchemyWebhookResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/Alchemy',
      body: data.requestBody,
      mediaType: 'application/octet-stream',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.address Address to check
   * @returns boolean Check if address is a wallet or contract
   * @throws ApiError
   */
  public static addressIsWallet(
    data: AddressIsWalletData,
  ): CancelablePromise<AddressIsWalletResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/is_wallet/{address}',
      path: {
        address: data.address,
      },
    })
  }
}

export class ActivitiesService {
  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.eventType
   * @param data.contract
   * @param data.creator
   * @param data.blockHash
   * @param data.transactionHash
   * @param data.fromAddress
   * @param data.blockNumber
   * @param data.vaultId
   * @returns unknown Search activities in paginated list
   * @throws ApiError
   */
  public static getActivities(
    data: GetActivitiesData = {},
  ): CancelablePromise<GetActivitiesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/activities',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        eventType: data.eventType,
        contract: data.contract,
        creator: data.creator,
        blockHash: data.blockHash,
        transactionHash: data.transactionHash,
        fromAddress: data.fromAddress,
        blockNumber: data.blockNumber,
        vaultId: data.vaultId,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown
   * @throws ApiError
   */
  public static retryBlock(
    data: RetryBlockData,
  ): CancelablePromise<RetryBlockResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/activities/retry_block',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id Activity sql id
   * @returns unknown Get single activity by id
   * @throws ApiError
   */
  public static getActivityById(
    data: GetActivityByIdData,
  ): CancelablePromise<GetActivityByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/activities/{id}',
      path: {
        id: data.id,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id sql id
   * @returns unknown
   * @throws ApiError
   */
  public static retryActivity(
    data: RetryActivityData,
  ): CancelablePromise<RetryActivityResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/activities/{id}/retry',
      path: {
        id: data.id,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id sql id
   * @returns unknown
   * @throws ApiError
   */
  public static retryLog(
    data: RetryLogData,
  ): CancelablePromise<RetryLogResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/activities/{id}/retry_log',
      path: {
        id: data.id,
      },
    })
  }
}

export class AuthService {
  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Return JWT token using api key and did session
   * @throws ApiError
   */
  public static auth(data: AuthData): CancelablePromise<AuthResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/auth',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Refresh JWT and refresh token
   * @throws ApiError
   */
  public static refresh(data: RefreshData): CancelablePromise<RefreshResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/refresh',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @returns unknown Revoke JWT token
   * @throws ApiError
   */
  public static revoke(): CancelablePromise<RevokeResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/revoke',
    })
  }
}

export class ClaimPositionsService {
  /**
   * @param data The data for the request.
   * @param data.id sql id or vault number
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.userWallet
   * @param data.timeframe
   * @param data.creator
   * @param data.positionDirection
   * @returns unknown Get all claim positions
   * @throws ApiError
   */
  public static getClaimPositions(
    data: GetClaimPositionsData,
  ): CancelablePromise<GetClaimPositionsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/claim/{id}/positions',
      path: {
        id: data.id,
      },
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        userWallet: data.userWallet,
        timeframe: data.timeframe,
        creator: data.creator,
        positionDirection: data.positionDirection,
      },
    })
  }
}

export class ClaimsService {
  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @returns unknown Get all claims in paginated list
   * @throws ApiError
   */
  public static getClaims(
    data: GetClaimsData = {},
  ): CancelablePromise<GetClaimsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/claims',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Create a new claim
   * @throws ApiError
   */
  public static createClaim(
    data: CreateClaimData,
  ): CancelablePromise<CreateClaimResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/claims',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @returns unknown Summary of pending claims
   * @throws ApiError
   */
  public static pendingClaims(
    data: PendingClaimsData = {},
  ): CancelablePromise<PendingClaimsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/claims/pending',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id
   * @returns unknown The pending claim for the provided ID
   * @throws ApiError
   */
  public static pendingClaimById(
    data: PendingClaimByIdData,
  ): CancelablePromise<PendingClaimByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/claims/pending/{id}',
      path: {
        id: data.id,
      },
      errors: {
        404: 'Record not found in the DB',
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.creator
   * @param data.subject
   * @param data.identity
   * @param data.object
   * @param data.predicate
   * @param data.vault
   * @param data.displayName
   * @param data.counterVault
   * @param data.status
   * @param data.userWithPosition
   * @param data.userAssetsFor
   * @param data.userAssetsForPresent
   * @param data.userAssetsAgainst
   * @param data.userAssetsAgainstPresent
   * @param data.userAssets
   * @param data.userAssetsPresent
   * @returns unknown Search claims in paginated list
   * @throws ApiError
   */
  public static searchClaims(
    data: SearchClaimsData = {},
  ): CancelablePromise<SearchClaimsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/claims/search',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        creator: data.creator,
        subject: data.subject,
        identity: data.identity,
        object: data.object,
        predicate: data.predicate,
        vault: data.vault,
        displayName: data.displayName,
        counterVault: data.counterVault,
        status: data.status,
        userWithPosition: data.userWithPosition,
        userAssetsFor: data.userAssetsFor,
        userAssetsForPresent: data.userAssetsForPresent,
        userAssetsAgainst: data.userAssetsAgainst,
        userAssetsAgainstPresent: data.userAssetsAgainstPresent,
        userAssets: data.userAssets,
        userAssetsPresent: data.userAssetsPresent,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.creator
   * @param data.subject
   * @param data.identity
   * @param data.object
   * @param data.predicate
   * @param data.vault
   * @param data.displayName
   * @param data.counterVault
   * @param data.status
   * @param data.userWithPosition
   * @param data.userAssetsFor
   * @param data.userAssetsForPresent
   * @param data.userAssetsAgainst
   * @param data.userAssetsAgainstPresent
   * @param data.userAssets
   * @param data.userAssetsPresent
   * @returns unknown Search claims in paginated list
   * @throws ApiError
   */
  public static searchClaimsV2(
    data: SearchClaimsV2Data = {},
  ): CancelablePromise<SearchClaimsV2Response> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/claims/search/v2',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        creator: data.creator,
        subject: data.subject,
        identity: data.identity,
        object: data.object,
        predicate: data.predicate,
        vault: data.vault,
        displayName: data.displayName,
        counterVault: data.counterVault,
        status: data.status,
        userWithPosition: data.userWithPosition,
        userAssetsFor: data.userAssetsFor,
        userAssetsForPresent: data.userAssetsForPresent,
        userAssetsAgainst: data.userAssetsAgainst,
        userAssetsAgainstPresent: data.userAssetsAgainstPresent,
        userAssets: data.userAssets,
        userAssetsPresent: data.userAssetsPresent,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.creator
   * @param data.subject
   * @param data.identity
   * @param data.object
   * @param data.predicate
   * @param data.vault
   * @param data.displayName
   * @param data.counterVault
   * @param data.status
   * @param data.userWithPosition
   * @param data.userAssetsFor
   * @param data.userAssetsForPresent
   * @param data.userAssetsAgainst
   * @param data.userAssetsAgainstPresent
   * @param data.userAssets
   * @param data.userAssetsPresent
   * @returns unknown Summary of claim values based on query
   * @throws ApiError
   */
  public static claimSummary(
    data: ClaimSummaryData = {},
  ): CancelablePromise<ClaimSummaryResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/claims/summary',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        creator: data.creator,
        subject: data.subject,
        identity: data.identity,
        object: data.object,
        predicate: data.predicate,
        vault: data.vault,
        displayName: data.displayName,
        counterVault: data.counterVault,
        status: data.status,
        userWithPosition: data.userWithPosition,
        userAssetsFor: data.userAssetsFor,
        userAssetsForPresent: data.userAssetsForPresent,
        userAssetsAgainst: data.userAssetsAgainst,
        userAssetsAgainstPresent: data.userAssetsAgainstPresent,
        userAssets: data.userAssets,
        userAssetsPresent: data.userAssetsPresent,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @returns unknown Get all claims in paginated list
   * @throws ApiError
   */
  public static getClaimsV2(
    data: GetClaimsV2Data = {},
  ): CancelablePromise<GetClaimsV2Response> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/claims/v2',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id Claim sql id or vault number
   * @returns unknown Get single claim by id
   * @throws ApiError
   */
  public static getClaimById(
    data: GetClaimByIdData,
  ): CancelablePromise<GetClaimByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/claims/{id}',
      path: {
        id: data.id,
      },
      errors: {
        404: 'Record not found in the DB',
      },
    })
  }
}

export class IdentitiesService {
  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.userWallet
   * @param data.timeframe
   * @returns unknown Get all identities in paginated list
   * @throws ApiError
   */
  public static getIdentities(
    data: GetIdentitiesData = {},
  ): CancelablePromise<GetIdentitiesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identities',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        userWallet: data.userWallet,
        timeframe: data.timeframe,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.userWallet
   * @param data.timeframe
   * @returns unknown Get all pending identities in paginated list
   * @throws ApiError
   */
  public static getPendingIdentities(
    data: GetPendingIdentitiesData = {},
  ): CancelablePromise<GetPendingIdentitiesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identities/pending',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        userWallet: data.userWallet,
        timeframe: data.timeframe,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.userWallet
   * @param data.timeframe
   * @returns unknown Get all pending identities in paginated list
   * @throws ApiError
   */
  public static getPendingIdentitiesV2(
    data: GetPendingIdentitiesV2Data = {},
  ): CancelablePromise<GetPendingIdentitiesV2Response> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identities/pending/v2',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        userWallet: data.userWallet,
        timeframe: data.timeframe,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.identifier User identifier
   * @returns unknown Get a pending identity by the identifier
   * @throws ApiError
   */
  public static getPendingIdentity(
    data: GetPendingIdentityData,
  ): CancelablePromise<GetPendingIdentityResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identities/pending/{identifier}',
      path: {
        identifier: data.identifier,
      },
      errors: {
        404: 'Record not found in the DB',
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.userWallet
   * @param data.timeframe
   * @returns unknown Get all identities in paginated list
   * @throws ApiError
   */
  public static getIdentitiesV2(
    data: GetIdentitiesV2Data = {},
  ): CancelablePromise<GetIdentitiesV2Response> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identities/v2',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        userWallet: data.userWallet,
        timeframe: data.timeframe,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id Identity sql id
   * @param data.requestBody
   * @returns unknown Update an identity
   * @throws ApiError
   */
  public static updateIdentity(
    data: UpdateIdentityData,
  ): CancelablePromise<UpdateIdentityResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/identities/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Create a new identity
   * @throws ApiError
   */
  public static createIdentity(
    data: CreateIdentityData,
  ): CancelablePromise<CreateIdentityResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/identity',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.displayName
   * @param data.creator
   * @param data.userWallet
   * @param data.status
   * @param data.predicate
   * @param data.isUser
   * @param data.isContract
   * @param data.hasTag
   * @param data.follows
   * @param data.followedBy
   * @param data.timeframe
   * @param data.identityId
   * @param data.description
   * @returns unknown Search identities in paginated list
   * @throws ApiError
   */
  public static searchIdentity(
    data: SearchIdentityData = {},
  ): CancelablePromise<SearchIdentityResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identity/search',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        displayName: data.displayName,
        creator: data.creator,
        userWallet: data.userWallet,
        status: data.status,
        predicate: data.predicate,
        isUser: data.isUser,
        isContract: data.isContract,
        hasTag: data.hasTag,
        follows: data.follows,
        followedBy: data.followedBy,
        timeframe: data.timeframe,
        identityId: data.identityId,
        description: data.description,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.displayName
   * @param data.creator
   * @param data.userWallet
   * @param data.status
   * @param data.predicate
   * @param data.isUser
   * @param data.isContract
   * @param data.hasTag
   * @param data.follows
   * @param data.followedBy
   * @param data.timeframe
   * @param data.identityId
   * @param data.description
   * @returns unknown Search identities using QB returning paginated list
   * @throws ApiError
   */
  public static searchIdentityV2(
    data: SearchIdentityV2Data = {},
  ): CancelablePromise<SearchIdentityV2Response> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identity/search/v2',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        displayName: data.displayName,
        creator: data.creator,
        userWallet: data.userWallet,
        status: data.status,
        predicate: data.predicate,
        isUser: data.isUser,
        isContract: data.isContract,
        hasTag: data.hasTag,
        follows: data.follows,
        followedBy: data.followedBy,
        timeframe: data.timeframe,
        identityId: data.identityId,
        description: data.description,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.displayName
   * @param data.creator
   * @param data.userWallet
   * @param data.status
   * @param data.predicate
   * @param data.isUser
   * @param data.isContract
   * @param data.hasTag
   * @param data.follows
   * @param data.followedBy
   * @param data.timeframe
   * @param data.identityId
   * @param data.description
   * @returns unknown Summary of identity values based on query
   * @throws ApiError
   */
  public static identitySummary(
    data: IdentitySummaryData = {},
  ): CancelablePromise<IdentitySummaryResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identity/summary',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        displayName: data.displayName,
        creator: data.creator,
        userWallet: data.userWallet,
        status: data.status,
        predicate: data.predicate,
        isUser: data.isUser,
        isContract: data.isContract,
        hasTag: data.hasTag,
        follows: data.follows,
        followedBy: data.followedBy,
        timeframe: data.timeframe,
        identityId: data.identityId,
        description: data.description,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id sql id,identity_id string, or vault number
   * @returns unknown Get single identity by id
   * @throws ApiError
   */
  public static getIdentityById(
    data: GetIdentityByIdData,
  ): CancelablePromise<GetIdentityByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identity/{id}',
      path: {
        id: data.id,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id sql id
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.userWallet
   * @param data.displayName
   * @param data.timeframe
   * @returns unknown Get paginated list of identities following this one
   * @throws ApiError
   */
  public static getIdentityFollowed(
    data: GetIdentityFollowedData,
  ): CancelablePromise<GetIdentityFollowedResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identity/{id}/followed',
      path: {
        id: data.id,
      },
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        userWallet: data.userWallet,
        displayName: data.displayName,
        timeframe: data.timeframe,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id sql id
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.userWallet
   * @param data.displayName
   * @param data.timeframe
   * @returns unknown Get paginated list of identity's followers
   * @throws ApiError
   */
  public static getIdentityFollowers(
    data: GetIdentityFollowersData,
  ): CancelablePromise<GetIdentityFollowersResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identity/{id}/followers',
      path: {
        id: data.id,
      },
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        userWallet: data.userWallet,
        displayName: data.displayName,
        timeframe: data.timeframe,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id sql id
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.userWallet
   * @param data.timeframe
   * @returns unknown Get paginated list of identity's tags
   * @throws ApiError
   */
  public static getIdentityTags(
    data: GetIdentityTagsData,
  ): CancelablePromise<GetIdentityTagsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identity/{id}/tags',
      path: {
        id: data.id,
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        userWallet: data.userWallet,
        timeframe: data.timeframe,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id sql id
   * @param data.contract address of deployed contract
   * @returns unknown
   * @throws ApiError
   */
  public static setFollowPredicate(
    data: SetFollowPredicateData,
  ): CancelablePromise<SetFollowPredicateResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/identity/{id}/{contract}/follow_predicate',
      path: {
        id: data.id,
        contract: data.contract,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id sql id
   * @param data.contract address of deployed contract
   * @returns unknown
   * @throws ApiError
   */
  public static setTagPredicate(
    data: SetTagPredicateData,
  ): CancelablePromise<SetTagPredicateResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/identity/{id}/{contract}/tag_predicate',
      path: {
        id: data.id,
        contract: data.contract,
      },
    })
  }
}

export class IdentityPositionsService {
  /**
   * @param data The data for the request.
   * @param data.id sql id,identity_id string, or vault number
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.userWallet
   * @param data.timeframe
   * @param data.creator
   * @param data.positionDirection
   * @returns unknown Get all identity positions
   * @throws ApiError
   */
  public static getIdentityPositions(
    data: GetIdentityPositionsData,
  ): CancelablePromise<GetIdentityPositionsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/identity/{id}/positions',
      path: {
        id: data.id,
      },
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        userWallet: data.userWallet,
        timeframe: data.timeframe,
        creator: data.creator,
        positionDirection: data.positionDirection,
      },
    })
  }
}

export class StatusService {
  /**
   * @returns unknown return details on api integration health
   * @throws ApiError
   */
  public static integrationHealthcheck(): CancelablePromise<IntegrationHealthcheckResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/integration/healthcheck',
    })
  }
}

export class InviteCodesService {
  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Associate valid invite code with current user
   * @throws ApiError
   */
  public static redeemInviteCode(
    data: RedeemInviteCodeData,
  ): CancelablePromise<RedeemInviteCodeResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/invite_codes/redeem',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }
}

export class LinkedAccountsService {
  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.accountType
   * @param data.address
   * @param data.chainType
   * @param data.walletClient
   * @param data.walletClientType
   * @param data.connectorType
   * @param data.userId
   * @param data.privyId
   * @returns unknown Get all linked accounts in paginated list
   * @throws ApiError
   */
  public static getLinkedAccounts(
    data: GetLinkedAccountsData = {},
  ): CancelablePromise<GetLinkedAccountsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/linked_accounts',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        accountType: data.accountType,
        address: data.address,
        chainType: data.chainType,
        walletClient: data.walletClient,
        walletClientType: data.walletClientType,
        connectorType: data.connectorType,
        userId: data.userId,
        privyId: data.privyId,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Create a new LinkedAccount for a user
   * @throws ApiError
   */
  public static createLinkedAccount(
    data: CreateLinkedAccountData,
  ): CancelablePromise<CreateLinkedAccountResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/linked_accounts',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.identifier LinkedAccount sql id or link id str
   * @returns unknown Get single linked account by id
   * @throws ApiError
   */
  public static getLinkedAccountById(
    data: GetLinkedAccountByIdData,
  ): CancelablePromise<GetLinkedAccountByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/linked_accounts/{identifier}',
      path: {
        identifier: data.identifier,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.identifier sql id or link id str
   * @returns unknown Activate linked account
   * @throws ApiError
   */
  public static activateLinkedAccount(
    data: ActivateLinkedAccountData,
  ): CancelablePromise<ActivateLinkedAccountResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/linked_accounts/{identifier}/activate',
      path: {
        identifier: data.identifier,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.identifier LinkedAccount sql id or link id str
   * @returns unknown Deactivate linked account
   * @throws ApiError
   */
  public static deactivateLinkedAccount(
    data: DeactivateLinkedAccountData,
  ): CancelablePromise<DeactivateLinkedAccountResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/linked_accounts/{identifier}/deactivate',
      path: {
        identifier: data.identifier,
      },
    })
  }
}

export class MissedTransactionsService {
  /**
   * Endpoint to verify missed transactions. It acquires a set of block hashes
   * from our indexing solution and compare them with the ones we have in the
   * `activity` table. If there are missed transactions in the `activity` table
   * it set a new Alchemy webhook to backfill the transactions
   * @param data The data for the request.
   * @param data.limit The amount of results we are returning
   * @param data.after The starting cursor
   * @param data.startingBlockTimestamp The block timestamp to use as the starting point to look for missing transactions
   * @returns unknown Process missed transactions
   * @throws ApiError
   */
  public static missedTransactions(
    data: MissedTransactionsData,
  ): CancelablePromise<MissedTransactionsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/missed_transactions',
      path: {
        limit: data.limit,
        after: data.after,
        starting_block_timestamp: data.startingBlockTimestamp,
      },
    })
  }
}

export class PositionsService {
  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Create a new position
   * @throws ApiError
   */
  public static createPosition(
    data: CreatePositionData,
  ): CancelablePromise<CreatePositionResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/positions',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.paging
   * @param data.sort
   * @param data.creator
   * @param data.creatorId
   * @param data.vaultType
   * @param data.vaultUuid
   * @param data.status
   * @param data.conviction
   * @param data.claim
   * @param data.identity
   * @param data.vault
   * @param data.parentTable
   * @returns unknown Search positions in paginated list
   * @throws ApiError
   */
  public static searchPositions(
    data: SearchPositionsData,
  ): CancelablePromise<SearchPositionsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/positions/search',
      query: {
        creator: data.creator,
        creator_id: data.creatorId,
        vault_type: data.vaultType,
        vault_uuid: data.vaultUuid,
        status: data.status,
        conviction: data.conviction,
        claim: data.claim,
        identity: data.identity,
        vault: data.vault,
        paging: data.paging,
        sort: data.sort,
        parent_table: data.parentTable,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.paging
   * @param data.sort
   * @param data.creator
   * @param data.creatorId
   * @param data.vaultType
   * @param data.vaultUuid
   * @param data.status
   * @param data.conviction
   * @param data.claim
   * @param data.identity
   * @param data.vault
   * @param data.parentTable
   * @returns unknown Summary of summary values based on query
   * @throws ApiError
   */
  public static positionSummary(
    data: PositionSummaryData,
  ): CancelablePromise<PositionSummaryResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/positions/summary',
      query: {
        creator: data.creator,
        creator_id: data.creatorId,
        vault_type: data.vaultType,
        vault_uuid: data.vaultUuid,
        status: data.status,
        conviction: data.conviction,
        claim: data.claim,
        identity: data.identity,
        vault: data.vault,
        paging: data.paging,
        sort: data.sort,
        parent_table: data.parentTable,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id Position sql id or vault number
   * @returns unknown Get single position by id
   * @throws ApiError
   */
  public static getPositionById(
    data: GetPositionByIdData,
  ): CancelablePromise<GetPositionByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/positions/{id}',
      path: {
        id: data.id,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id Position sql id
   * @param data.requestBody
   * @returns unknown Update an position
   * @throws ApiError
   */
  public static updatePosition(
    data: UpdatePositionData,
  ): CancelablePromise<UpdatePositionResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/positions/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id position's id in sql
   * @returns unknown Update out of sync position data
   * @throws ApiError
   */
  public static reconcilePosition(
    data: ReconcilePositionData,
  ): CancelablePromise<ReconcilePositionResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/positions/{id}/reconcile',
      path: {
        id: data.id,
      },
    })
  }
}

export class QueryBuilderService {
  /**
   * @returns unknown Return the query builder data structure for use with FE typeahead
   * @throws ApiError
   */
  public static getQueryStructure(): CancelablePromise<GetQueryStructureResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/query_builder',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Return query results if the query in body is valid
   * @throws ApiError
   */
  public static runDynamicQuery(
    data: RunDynamicQueryData,
  ): CancelablePromise<RunDynamicQueryResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/query_builder',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }
}

export class QuestsService {
  /**
   * Endpoint to create a new quest. It receives a [`NewQuest`] and
   * returns a [`Quest`] when suceeded
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Create a new quest
   * @throws ApiError
   */
  public static createQuest(
    data: CreateQuestData,
  ): CancelablePromise<CreateQuestResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/quest',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * This endpoint returns the quests that match the informed values and
   * return them when suceeded
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Return information about quests
   * @throws ApiError
   */
  public static searchQuests(
    data: SearchQuestsData,
  ): CancelablePromise<SearchQuestsResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/quest/search',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * This endpoint get a quest by the id and returns a [`Quest`] object
   * when suceeded
   * @param data The data for the request.
   * @param data.questId Quest SQL id
   * @returns unknown Return information about a quest
   * @throws ApiError
   */
  public static getQuest(
    data: GetQuestData,
  ): CancelablePromise<GetQuestResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/quest/{quest_id}',
      path: {
        quest_id: data.questId,
      },
    })
  }

  /**
   * This endpoint updates a quest. It receives a [`UpdateQuest`] and
   * returns a [`Quest`] when suceeded
   * @param data The data for the request.
   * @param data.questId Quest SQL id
   * @param data.requestBody
   * @returns unknown Update an already existing quest
   * @throws ApiError
   */
  public static updateQuest(
    data: UpdateQuestData,
  ): CancelablePromise<UpdateQuestResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/quest/{quest_id}',
      path: {
        quest_id: data.questId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * This is an admin endpoint to delete `quests`
   * @param data The data for the request.
   * @param data.questId Quest SQL id
   * @returns unknown Delete the informed quest
   * @throws ApiError
   */
  public static deleteQuest(
    data: DeleteQuestData,
  ): CancelablePromise<DeleteQuestResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/quest/{quest_id}',
      path: {
        quest_id: data.questId,
      },
    })
  }
}

export class UserQuestsService {
  /**
   * @param data The data for the request.
   * @param data.questId
   * @returns unknown Get the user quest associated with the quest id and the user
   * @throws ApiError
   */
  public static getUserQuestByQuestId(
    data: GetUserQuestByQuestIdData,
  ): CancelablePromise<GetUserQuestByQuestIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/user_quest/quest/{quest_id}',
      path: {
        quest_id: data.questId,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Filter quests
   * @throws ApiError
   */
  public static search(data: SearchData): CancelablePromise<SearchResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/user_quest/search',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.questId Quest SQL id
   * @returns string Check if user is eligible to complete the quest, returning the quest status
   * @throws ApiError
   */
  public static checkQuestStatus(
    data: CheckQuestStatusData,
  ): CancelablePromise<CheckQuestStatusResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/user_quest/{quest_id}/check',
      path: {
        quest_id: data.questId,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.questId Quest SQL id
   * @returns unknown Complete a quest for the authenticated user
   * @throws ApiError
   */
  public static completeQuest(
    data: CompleteQuestData,
  ): CancelablePromise<CompleteQuestResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/user_quest/{quest_id}/complete',
      path: {
        quest_id: data.questId,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.questId Quest SQL id
   * @returns unknown Reset a quest for the authenticated user
   * @throws ApiError
   */
  public static resetQuest(
    data: ResetQuestData,
  ): CancelablePromise<ResetQuestResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/user_quest/{quest_id}/reset',
      path: {
        quest_id: data.questId,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.questId Quest SQL id
   * @returns unknown Start a quest for the authenticated user
   * @throws ApiError
   */
  public static startQuest(
    data: StartQuestData,
  ): CancelablePromise<StartQuestResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/user_quest/{quest_id}/start',
      path: {
        quest_id: data.questId,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.userQuestId User quest SQL id
   * @returns unknown Search user quest for user
   * @throws ApiError
   */
  public static getUserQuestById(
    data: GetUserQuestByIdData,
  ): CancelablePromise<GetUserQuestByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/user_quest/{user_quest_id}',
      path: {
        user_quest_id: data.userQuestId,
      },
    })
  }
}

export class UsersService {
  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @returns unknown Get all users in paginated list
   * @throws ApiError
   */
  public static getUsers(
    data: GetUsersData = {},
  ): CancelablePromise<GetUsersResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Create a new user
   * @throws ApiError
   */
  public static createUser(
    data: CreateUserData,
  ): CancelablePromise<CreateUserResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/users',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @returns unknown Re-issue API key
   * @throws ApiError
   */
  public static reissueApiKey(): CancelablePromise<ReissueApiKeyResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/users/apikey',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.user
   * @param data.displayName
   * @param data.showEmptyPosition
   * @param data.subject
   * @param data.predicate
   * @param data.object
   * @param data.timeframe
   * @returns unknown Get claims user has position on
   * @throws ApiError
   */
  public static getUserClaims(
    data: GetUserClaimsData = {},
  ): CancelablePromise<GetUserClaimsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/claims',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        user: data.user,
        displayName: data.displayName,
        showEmptyPosition: data.showEmptyPosition,
        subject: data.subject,
        predicate: data.predicate,
        object: data.object,
        timeframe: data.timeframe,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.user
   * @param data.displayName
   * @param data.showEmptyPosition
   * @param data.subject
   * @param data.predicate
   * @param data.object
   * @param data.timeframe
   * @returns unknown Get claims user has position on
   * @throws ApiError
   */
  public static getUserClaimsV2(
    data: GetUserClaimsV2Data = {},
  ): CancelablePromise<GetUserClaimsV2Response> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/claims/v2',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        user: data.user,
        displayName: data.displayName,
        showEmptyPosition: data.showEmptyPosition,
        subject: data.subject,
        predicate: data.predicate,
        object: data.object,
        timeframe: data.timeframe,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.user
   * @param data.displayName
   * @param data.timeframe
   * @returns unknown Get identities user has position on
   * @throws ApiError
   */
  public static getUserIdentities(
    data: GetUserIdentitiesData = {},
  ): CancelablePromise<GetUserIdentitiesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/identities',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        user: data.user,
        displayName: data.displayName,
        timeframe: data.timeframe,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.user
   * @param data.displayName
   * @param data.timeframe
   * @returns unknown Get identities user has position on
   * @throws ApiError
   */
  public static getUserIdentitiesV2(
    data: GetUserIdentitiesV2Data = {},
  ): CancelablePromise<GetUserIdentitiesV2Response> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/identities/v2',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        user: data.user,
        displayName: data.displayName,
        timeframe: data.timeframe,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Allocate Points to multiple users
   * @throws ApiError
   */
  public static updateUsersPointsBatch(
    data: UpdateUsersPointsBatchData,
  ): CancelablePromise<UpdateUsersPointsBatchResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/users/points',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.user
   * @param data.showEmptyPosition
   * @returns unknown Get positions for user
   * @throws ApiError
   */
  public static getUsersPositions(
    data: GetUsersPositionsData = {},
  ): CancelablePromise<GetUsersPositionsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/positions',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        user: data.user,
        showEmptyPosition: data.showEmptyPosition,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.timeframe
   * @returns unknown Get total position values for paginated set of users
   * @throws ApiError
   */
  public static getAllUsersTotals(
    data: GetAllUsersTotalsData = {},
  ): CancelablePromise<GetAllUsersTotalsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/totals',
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        timeframe: data.timeframe,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.wallet User wallet
   * @returns unknown Get single user by id
   * @throws ApiError
   */
  public static getUserByWalletPublic(
    data: GetUserByWalletPublicData,
  ): CancelablePromise<GetUserByWalletPublicResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/wallet/{wallet}',
      path: {
        wallet: data.wallet,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.wallet User wallet
   * @returns unknown Get single user by id
   * @throws ApiError
   */
  public static getUserByWallet(
    data: GetUserByWalletData,
  ): CancelablePromise<GetUserByWalletResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/wallet/{wallet}/private',
      path: {
        wallet: data.wallet,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.identifier User sql id or wallet
   * @param data.requestBody
   * @returns unknown Add points for user
   * @throws ApiError
   */
  public static updateUserPoints(
    data: UpdateUserPointsData,
  ): CancelablePromise<UpdateUserPointsResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/users/{identifier}/points',
      path: {
        identifier: data.identifier,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id User sql id
   * @returns unknown Get single user by id
   * @throws ApiError
   */
  public static getUserByIdPublic(
    data: GetUserByIdPublicData,
  ): CancelablePromise<GetUserByIdPublicResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/{id}',
      path: {
        id: data.id,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id User sql id
   * @param data.requestBody
   * @returns unknown Update a user
   * @throws ApiError
   */
  public static updateUser(
    data: UpdateUserData,
  ): CancelablePromise<UpdateUserResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/users/{id}',
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id Id of user to delete
   * @returns unknown Delete a user by id
   * @throws ApiError
   */
  public static deleteUser(
    data: DeleteUserData,
  ): CancelablePromise<DeleteUserResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/users/{id}',
      path: {
        id: data.id,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id User sql id or wallet
   * @returns unknown Update a users ens if present
   * @throws ApiError
   */
  public static updateUserEns(
    data: UpdateUserEnsData,
  ): CancelablePromise<UpdateUserEnsResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/users/{id}/ens',
      path: {
        id: data.id,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id User sql id
   * @returns unknown Invite codes created for user
   * @throws ApiError
   */
  public static getInviteCodesByUser(
    data: GetInviteCodesByUserData,
  ): CancelablePromise<GetInviteCodesByUserResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/{id}/invite_codes',
      path: {
        id: data.id,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id User sql id
   * @returns unknown Invite codes created for user
   * @throws ApiError
   */
  public static createInviteCodesByUser(
    data: CreateInviteCodesByUserData,
  ): CancelablePromise<CreateInviteCodesByUserResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/users/{id}/invite_codes',
      path: {
        id: data.id,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id User sql id
   * @returns unknown Get linked accounts for user
   * @throws ApiError
   */
  public static getLinkedAccountsByUser(
    data: GetLinkedAccountsByUserData,
  ): CancelablePromise<GetLinkedAccountsByUserResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/{id}/linked_accounts',
      path: {
        id: data.id,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id User sql id
   * @returns unknown Get single user by id
   * @throws ApiError
   */
  public static getUserById(
    data: GetUserByIdData,
  ): CancelablePromise<GetUserByIdResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/{id}/private',
      path: {
        id: data.id,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id User sql id or wallet
   * @returns unknown get identities tagged by user
   * @throws ApiError
   */
  public static getUserTags(
    data: GetUserTagsData,
  ): CancelablePromise<GetUserTagsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/{id}/tags',
      path: {
        id: data.id,
      },
    })
  }

  /**
   * @param data The data for the request.
   * @param data.id User sql id
   * @param data.direction
   * @param data.sortBy
   * @param data.page
   * @param data.offset
   * @param data.limit
   * @param data.timeframe
   * @returns unknown Get total position values for user
   * @throws ApiError
   */
  public static getUserTotals(
    data: GetUserTotalsData,
  ): CancelablePromise<GetUserTotalsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users/{id}/totals',
      path: {
        id: data.id,
      },
      query: {
        direction: data.direction,
        sortBy: data.sortBy,
        page: data.page,
        offset: data.offset,
        limit: data.limit,
        timeframe: data.timeframe,
      },
    })
  }
}

export class WebhooksService {
  /**
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Add new alchemy webhook
   * @throws ApiError
   */
  public static addWebhook(
    data: AddWebhookData,
  ): CancelablePromise<AddWebhookResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/webhooks',
      body: data.requestBody,
      mediaType: 'application/json',
    })
  }
}
