// This file is auto-generated by @hey-api/openapi-ts

export type ActivityBlock = {
  end_block: string
  start_block: string
}

export type ActivityPaginatedResponse = {
  data: Array<ActivityPresenter>
  limit: number
  page: number
  total: number
}

export type ActivityPresenter = {
  admin?: string | null
  atom_cost: string
  atom_creation_fee: string
  atom_deposit_fraction_for_triple: string
  atom_deposit_fraction_on_triple_creation: string
  block_hash: string
  block_number: string
  claim?: ClaimPresenter | null
  contract: string
  created_at: string
  creator?: UserPresenter | null
  cumulative_gas_used: string
  effective_gas_price: string
  entry_fee: string
  event_type: Event
  exit_fee: string
  fee_denominator: string
  from_address: string
  gas: string
  gas_price: string
  gas_used: string
  id: string
  identity?: IdentityPresenter | null
  input_data?: InputData | null
  logs?: Array<LogType> | null
  max_fee_per_gas: string
  min_deposit: string
  min_share: string
  net_user_assets: string
  object_share_price: string
  object_shares: string
  object_vault_assets: string
  object_vault_id: string
  predicate_share_price: string
  predicate_shares: string
  predicate_vault_assets: string
  predicate_vault_id: string
  protocol_fee: string
  protocol_fee_paid: string
  protocol_vault?: string | null
  raw_input_data: string
  share_price: string
  shares_redeemed_by_sender: string
  subject_share_price: string
  subject_shares: string
  subject_vault_assets: string
  subject_vault_id: string
  timestamp: string
  total_assets: string
  total_shares: string
  transaction_hash?: string | null
  triple_creation_protocol_fee: string
  value: string
  vault_assets: string
  vault_balance: string
  vault_id: string
  vault_shares: string
}

export type ActivityQuery = {
  blockHash?: string | null
  blockNumber?: string | null
  contract?: string | null
  creator?: Identifier | null
  direction?: SortDirection | null
  eventType?: Event | null
  fromAddress?: string | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
  transactionHash?: string | null
  vaultId?: string | null
}

export type AgainstAssetsPresentQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: boolean | null
}

export type AgainstAssetsQuery = {
  combinator?: Combinator | null
  comparator?: NumericComparators | null
  options?: number | null
  userValue?: number | null
}

export type AssetsPresentQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: boolean | null
}

export type AssetsQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: number | null
}

export type AtomCreated = {
  atom_data: Blob | File
  vault_id: string
}

export type BatchCreateAtom = {
  atoms_data: Array<Blob | File>
}

export type BatchCreateTriple = {
  object_ids: string
  predicate_ids: string
  subject_ids: string
}

export type Claim = {
  against_num_positions: number
  contract: string
  counter_vault_id: string
  counter_vault_uuid?: string | null
  created_at: string
  creator: string
  creator_id?: string | null
  for_num_positions: number
  id: string
  num_positions: number
  object_display_name?: string | null
  object_id?: string | null
  object_identity_id?: string | null
  object_vault_id: string
  predicate_display_name?: string | null
  predicate_id?: string | null
  predicate_identity_id?: string | null
  predicate_vault_id: string
  status: Status
  subject_display_name?: string | null
  subject_id?: string | null
  subject_identity_id?: string | null
  subject_vault_id: string
  updated_at: string
  vault_id: string
  vault_uuid?: string | null
}

export type ClaimAttribute =
  | {
      combinedVault: CombinedVaultQuery
    }
  | {
      combinedId: CombinedIdQuery
    }
  | {
      combinedIdentityId: CombinedIdentityIdQuery
    }
  | {
      combinedDisplayName: CombinedDisplayNameQuery
    }
  | {
      vault: VaultQuery
    }
  | {
      counterVault: CounterVaultQuery
    }
  | {
      vaultId: VaultIdQuery
    }
  | {
      counterVaultId: CounterVaultIdQuery
    }
  | {
      subjectVault: SubjectVaultQuery
    }
  | {
      objectVault: ObjectVaultQuery
    }
  | {
      predicateVault: PredicateVaultQuery
    }
  | {
      subjectVaultId: SubjectVaultIdQuery
    }
  | {
      objectVaultId: ObjectVaultIdQuery
    }
  | {
      predicateVaultId: PredicateVaultIdQuery
    }
  | {
      creator: CreatorQuery
    }
  | {
      creatorId: CreatorIdQuery
    }
  | {
      positionCreator: PositionCreatorQuery
    }
  | {
      positionCreatorId: PositionCreatorIdQuery
    }
  | {
      position: PositionQuery
    }
  | {
      positionId: PositionIdQuery
    }
  | {
      status: StatusQuery
    }
  | {
      subjectDisplayName: SubjectDisplayNameQuery
    }
  | {
      objectDisplayName: ObjectDisplayNameQuery
    }
  | {
      predicateDisplayName: PredicateDisplayNameQuery
    }
  | {
      displayName: DisplayNameQuery
    }
  | {
      subjectId: SubjectIdQuery
    }
  | {
      objectId: ObjectIdQuery
    }
  | {
      predicateId: PredicateIdQuery
    }
  | {
      subjectIdentityId: SubjectIdentityIdQuery
    }
  | {
      objectIdentityId: ObjectIdentityIdQuery
    }
  | {
      predicateIdentityId: PredicateIdentityIdQuery
    }
  | {
      forAssets: ForAssetsQuery
    }
  | {
      forAssetsPresent: ForAssetsPresentQuery
    }
  | {
      againstAssets: AgainstAssetsQuery
    }
  | {
      againstAssetsPresent: AgainstAssetsPresentQuery
    }
  | {
      assets: AssetsQuery
    }
  | {
      assetsPresent: AssetsPresentQuery
    }
  | {
      positionValuePresent: PositionValuePresentQuery
    }

export type ClaimNestedAttribute = ClaimAttribute | Array<ClaimAttribute>

export type ClaimPaginatedResponse = {
  data: Array<ClaimPresenter>
  limit: number
  page: number
  total: number
}

export type ClaimPresenter = {
  against_assets_sum: string
  against_conviction_price: string
  against_conviction_sum: string
  against_num_positions: number
  assets_sum: string
  claim_id: string
  contract: string
  counter_vault_id: string
  created_at: string
  creator?: UserPresenter | null
  for_assets_sum: string
  for_conviction_price: string
  for_conviction_sum: string
  for_num_positions: number
  num_positions: number
  object?: IdentityPresenter | null
  predicate?: IdentityPresenter | null
  status: Status
  subject?: IdentityPresenter | null
  updated_at: string
  user_assets: string
  user_assets_against: string
  user_assets_for: string
  user_conviction: string
  user_conviction_against: string
  user_conviction_for: string
  vault_id: string
}

export type ClaimRawPaginatedResponse = {
  data: Array<Claim>
  limit: number
  page: number
  total: number
}

export type ClaimSort = {
  direction?: SortDirection | null
  sortBy?: ClaimSortColumn | null
}

export type ClaimSortColumn =
  | 'VaultId'
  | 'CounterVaultId'
  | 'Creator'
  | 'SubjectVaultId'
  | 'ObjectVaultId'
  | 'PredicateVaultId'
  | 'CreatedAt'
  | 'UpdatedAt'
  | 'Status'
  | 'NumPositions'
  | 'ForNumPositions'
  | 'AgainstNumPositions'
  | 'ConvictionSum'
  | 'ForConvictionSum'
  | 'AgainstConvictionSum'
  | 'AssetsSum'
  | 'ForAssetsSum'
  | 'AgainstAssetsSum'
  | 'UserConvictionFor'
  | 'UseAssetsFor'
  | 'UserConvictionAgainst'
  | 'UseAssetsAgainst'
  | 'UserConviction'
  | 'UseAssets'

export const ClaimSortColumn = {
  VAULT_ID: 'VaultId',
  COUNTER_VAULT_ID: 'CounterVaultId',
  CREATOR: 'Creator',
  SUBJECT_VAULT_ID: 'SubjectVaultId',
  OBJECT_VAULT_ID: 'ObjectVaultId',
  PREDICATE_VAULT_ID: 'PredicateVaultId',
  CREATED_AT: 'CreatedAt',
  UPDATED_AT: 'UpdatedAt',
  STATUS: 'Status',
  NUM_POSITIONS: 'NumPositions',
  FOR_NUM_POSITIONS: 'ForNumPositions',
  AGAINST_NUM_POSITIONS: 'AgainstNumPositions',
  CONVICTION_SUM: 'ConvictionSum',
  FOR_CONVICTION_SUM: 'ForConvictionSum',
  AGAINST_CONVICTION_SUM: 'AgainstConvictionSum',
  ASSETS_SUM: 'AssetsSum',
  FOR_ASSETS_SUM: 'ForAssetsSum',
  AGAINST_ASSETS_SUM: 'AgainstAssetsSum',
  USER_CONVICTION_FOR: 'UserConvictionFor',
  USE_ASSETS_FOR: 'UseAssetsFor',
  USER_CONVICTION_AGAINST: 'UserConvictionAgainst',
  USE_ASSETS_AGAINST: 'UseAssetsAgainst',
  USER_CONVICTION: 'UserConviction',
  USE_ASSETS: 'UseAssets',
} as const

export type ClaimSummaryPresenter = {
  against_assets_sum: string
  against_conviction_sum: string
  against_num_positions: number
  assets_sum: string
  for_assets_sum: string
  for_conviction_sum: string
  for_num_positions: number
  num_positions: number
  total: number
}

export type Combinator = 'and' | 'or'

export const Combinator = {
  AND: 'and',
  OR: 'or',
} as const

export type CombinedDisplayNameQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: string | null
}

export type CombinedIdQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: string | null
}

export type CombinedIdentityIdQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: string | null
}

export type CombinedSort =
  | IdentitySort
  | ClaimSort
  | PositionSort
  | UserTotalsSort

export type CombinedVaultQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: string | null
}

export type CounterVaultIdQuery = {
  combinator?: Combinator | null
  comparator?: NumericComparators | null
  options?: number | null
  userValue?: number | null
}

export type CounterVaultQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: string | null
}

export type CreateAtom = {
  atom_data: Blob | File
}

export type CreateTriple = {
  object_id: string
  predicate_id: string
  subject_id: string
}

export type CreateWebhook = {
  address: string
  block_hash?: string | null
  deactivate_old?: boolean
  url: string
}

export type CreatorIdQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: string | null
  userValue?: string | null
}

export type CreatorQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type DataSetQueries =
  | {
      identity: Array<IdentityNestedAttribute>
    }
  | {
      claim: Array<ClaimNestedAttribute>
    }

export type DataSetQuery = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  query: DataSetQueries
  sortBy?: CombinedSort | null
}

export type DataSetQuerySort = {
  direction?: SortDirection | null
  sortBy?: CombinedSort | null
}

export type DepositAtom = {
  id: string
  receiver: string
}

export type DepositTriple = {
  id: string
  receiver: string
}

export type Deposited = {
  entry_fee: string
  id: string
  is_atom_wallet?: boolean | null
  is_triple?: boolean | null
  receiver_total_shares_in_vault: string
  sender_assets_after_total_fees: string
  shares_for_receiver: string
}

export type DescriptionQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type DidQuery = {
  didSession: string
}

export type DisplayNameQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type EnumComparators = 'eq' | 'notEq'

export const EnumComparators = {
  EQ: 'eq',
  NOT_EQ: 'notEq',
} as const

export type Event =
  | 'createAtom'
  | 'batchCreateAtom'
  | 'createAtomCompressed'
  | 'batchCreateTriple'
  | 'createTriple'
  | 'currentSharePrice'
  | 'deployAtomWallet'
  | 'depositAtom'
  | 'depositTriple'
  | 'entryFeeAmount'
  | 'exitFeeAmount'
  | 'getTripleAtoms'
  | 'getVaultBalance'
  | 'getVaultStateForUser'
  | 'getVaultStates'
  | 'maxRedeem'
  | 'redeemAtom'
  | 'redeemTriple'
  | 'setAdmin'
  | 'setAtomCost'

export const Event = {
  CREATE_ATOM: 'createAtom',
  BATCH_CREATE_ATOM: 'batchCreateAtom',
  CREATE_ATOM_COMPRESSED: 'createAtomCompressed',
  BATCH_CREATE_TRIPLE: 'batchCreateTriple',
  CREATE_TRIPLE: 'createTriple',
  CURRENT_SHARE_PRICE: 'currentSharePrice',
  DEPLOY_ATOM_WALLET: 'deployAtomWallet',
  DEPOSIT_ATOM: 'depositAtom',
  DEPOSIT_TRIPLE: 'depositTriple',
  ENTRY_FEE_AMOUNT: 'entryFeeAmount',
  EXIT_FEE_AMOUNT: 'exitFeeAmount',
  GET_TRIPLE_ATOMS: 'getTripleAtoms',
  GET_VAULT_BALANCE: 'getVaultBalance',
  GET_VAULT_STATE_FOR_USER: 'getVaultStateForUser',
  GET_VAULT_STATES: 'getVaultStates',
  MAX_REDEEM: 'maxRedeem',
  REDEEM_ATOM: 'redeemAtom',
  REDEEM_TRIPLE: 'redeemTriple',
  SET_ADMIN: 'setAdmin',
  SET_ATOM_COST: 'setAtomCost',
} as const

export type ExternalReferenceQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type FollowQuery = {
  direction?: SortDirection | null
  displayName?: string | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
  timeframe?: TimeFrame | null
  userWallet?: string | null
}

export type FollowedByQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: string | null
}

export type FollowsQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: string | null
}

export type ForAssetsPresentQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: boolean | null
}

export type ForAssetsQuery = {
  combinator?: Combinator | null
  comparator?: NumericComparators | null
  options?: number | null
  userValue?: number | null
}

export type HasTagQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: Array<string> | null
}

export type Identifier = number | string

export type IdentityAttribute =
  | {
      displayName: DisplayNameQuery
    }
  | {
      userDisplayName: UserDisplayNameQuery
    }
  | {
      ids: IdsQuery
    }
  | {
      creator: CreatorQuery
    }
  | {
      creatorId: CreatorIdQuery
    }
  | {
      description: DescriptionQuery
    }
  | {
      identityId: IdentityIdQuery
    }
  | {
      semantic: SemanticQuery
    }
  | {
      externalReference: ExternalReferenceQuery
    }
  | {
      vaultId: VaultIdQuery
    }
  | {
      status: StatusQuery
    }
  | {
      userWallet: UserWalletQuery
    }
  | {
      follows: FollowsQuery
    }
  | {
      followedBy: FollowedByQuery
    }
  | {
      hasTag: HasTagQuery
    }
  | {
      predicate: PredicateQuery
    }
  | {
      isContract: IsContractQuery
    }
  | {
      isUser: IsUserQuery
    }
  | {
      positionCreatorId: PositionCreatorIdQuery
    }
  | {
      positionCreator: PositionCreatorQuery
    }
  | {
      positionValue: PositionValueQuery
    }

export type IdentityId = string

export type IdentityIdQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type IdentityNestedAttribute =
  | IdentityAttribute
  | Array<IdentityAttribute>

export type IdentityPaginatedResponse = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type IdentityPresenter = {
  asset_delta: string
  assets_sum: string
  contract: string
  conviction_price: string
  conviction_price_delta: string
  conviction_sum: string
  corpora_id?: string | null
  created_at: string
  creator?: UserPresenter | null
  creator_address: string
  creator_id?: string | null
  description?: string | null
  display_name: string
  entity_type?: string | null
  external_reference?: string | null
  follow_claim_id?: string | null
  follow_vault_id: string
  followed_count?: number | null
  follower_count?: number | null
  id: string
  identity_hash: string
  identity_id: string
  image?: string | null
  is_contract: boolean
  is_user: boolean
  num_positions: number
  predicate: boolean
  semantic?: string | null
  status: Status
  tag_count?: number | null
  tags?: Array<TagEmbeddedPresenter> | null
  updated_at: string
  url?: string | null
  user?: UserPresenter | null
  user_asset_delta: string
  user_assets: string
  user_conviction: string
  user_display_name?: string | null
  user_ens_name?: string | null
  vault_id: string
  vault_uuid?: string | null
}

export type IdentitySort = {
  direction?: SortDirection | null
  sortBy?: SortColumn | null
}

export type IdentitySummaryPresenter = {
  assets: string
  followed_count: number
  follower_count: number
  num_positions: number
  tag_count: number
  total: number
  user_assets: string
}

export type IdsQuery = {
  combinator?: Combinator | null
  comparator?: VecComparators | null
  options?: Array<string> | null
  userValue?: Array<string> | null
}

export type ImageQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type InputData =
  | {
      CreateAtom: CreateAtom
    }
  | {
      BatchCreateAtom: BatchCreateAtom
    }
  | {
      CreateTriple: CreateTriple
    }
  | {
      BatchCreateTriple: BatchCreateTriple
    }
  | {
      DepositAtom: DepositAtom
    }
  | {
      DepositTriple: DepositTriple
    }
  | {
      RedeemAtom: RedeemAtom
    }
  | {
      RedeemTriple: RedeemTriple
    }
  | 'NoOp'

export type InputFile = string

export type IntegrationStatus = {
  alchemy_tx_parsed?: string | null
  cloudinary_cache?: string | null
  last_block_processed?: string | null
}

export type InviteCodePresenter = {
  created_at: string
  id: string
  invite_code: string
  invited_by?: string | null
  redeemed: boolean
  redeemed_by?: string | null
  redeemer?: UserPresenter | null
  updated_at: string
}

export type InviteCodesResponse = {
  invite_codes: Array<InviteCodePresenter>
}

export type IsContractQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: boolean | null
}

export type IsUserQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: boolean | null
}

export type JsonNum = string | number

export type LinkedAccountPresenter = {
  account_type?: string | null
  active?: boolean
  address?: string | null
  chain_type?: string | null
  connector_type?: string | null
  created_at: string
  description?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  link_id: string
  privy_id?: string | null
  total?: number | null
  updated_at: string
  user_id: string
  verified_at: string
  wallet: string
  wallet_client?: string | null
  wallet_client_type?: string | null
}

export type LinkedAccountQuery = {
  accountType?: string | null
  address?: string | null
  chainType?: string | null
  connectorType?: string | null
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  privyId?: string | null
  sortBy?: SortColumn | null
  userId?: string | null
  walletClient?: string | null
  walletClientType?: string | null
}

export type LinkedAccountSort = {
  direction?: SortDirection | null
  sortBy?: SortColumn | null
}

export type LogType =
  | {
      AtomCreated: AtomCreated
    }
  | {
      Deposited: Deposited
    }
  | {
      TripleCreated: TripleCreated
    }
  | {
      Redeemed: Redeemed
    }
  | 'NoOp'

/**
 * This struct contains the parameters we can use to query information the
 * indexer using GraphQL
 */
export type MissedTransactionsQuery = {
  after?: string | null
  limit?: number | null
  starting_block_timestamp?: string | null
}

export type NewClaim = {
  contract: string
  counter_vault_id?: Identifier | null
  counter_vault_uuid?: string | null
  creator: string
  creator_id?: string | null
  object: Identifier
  object_display_name?: string | null
  object_id?: string | null
  object_identity_id?: string | null
  predicate: Identifier
  predicate_display_name?: string | null
  predicate_id?: string | null
  predicate_identity_id?: string | null
  subject: Identifier
  subject_display_name?: string | null
  subject_id?: string | null
  subject_identity_id?: string | null
  vault_id?: Identifier | null
  vault_uuid?: string | null
}

export type NewInviteCodes = {
  generate_codes_count?: number | null
  invited_by?: string | null
}

export type NewLinkedAccount = {
  account_type: string
  active?: boolean
  add_points?: boolean
  address?: string | null
  chain_type?: string | null
  connector_type?: string | null
  link_id: string
  privy_id?: string | null
  user_id: string
  verified_at?: string | null
  wallet_client?: string | null
  wallet_client_type?: string | null
}

export type NewPosition = {
  assets: string
  claim_id?: string | null
  contract: string
  creator: string
  creator_id?: string | null
  fee: string
  identity_id?: string | null
  parent_table: ParentTable
  share_price: string
  shares: string
  value: string
  vault_id: Identifier
  vault_type?: VaultType | null
  vault_uuid?: string | null
}

export type NewQuest = {
  active: boolean
  closing_content?: string | null
  condition: QuestCondition
  content?: string | null
  depends_on_narrative?: QuestNarrative | null
  depends_on_quest?: string | null
  description?: string | null
  image: InputFile
  narrative: QuestNarrative
  points?: number
  position?: number | null
  summary?: string | null
  title?: string | null
}

export type NewUserQuest = {
  point_multiplier?: number | null
  quest_id: string
  user_id: string
}

export type NumericComparators = 'eq' | 'lte' | 'lt' | 'gt' | 'gte' | 'notEq'

export const NumericComparators = {
  EQ: 'eq',
  LTE: 'lte',
  LT: 'lt',
  GT: 'gt',
  GTE: 'gte',
  NOT_EQ: 'notEq',
} as const

export type ObjectDisplayNameQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type ObjectIdQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: string | null
  userValue?: string | null
}

export type ObjectIdentityIdQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type ObjectVaultIdQuery = {
  combinator?: Combinator | null
  comparator?: NumericComparators | null
  options?: number | null
  userValue?: number | null
}

export type ObjectVaultQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: string | null
}

export type PaginatedRequest = {
  limit: number
  offset: number
  page: number
}

export type ParentTable = 'Identity' | 'Claim'

export const ParentTable = {
  IDENTITY: 'Identity',
  CLAIM: 'Claim',
} as const

export type PointType = 'social' | 'quest' | 'referral' | 'protocol' | 'nft'

export const PointType = {
  SOCIAL: 'social',
  QUEST: 'quest',
  REFERRAL: 'referral',
  PROTOCOL: 'protocol',
  NFT: 'nft',
} as const

export type PointsRequest = {
  point_type: PointType
  points: number
}

export type PositionCreatorIdQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: string | null
}

export type PositionCreatorQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: string | null
}

export type PositionIdQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: string | null
  userValue?: string | null
}

export type PositionPaginatedResponse = {
  data: Array<PositionPresenter>
  limit: number
  page: number
  total: number
}

export type PositionPresenter = {
  assets: string
  claim_id?: string | null
  contract: string
  conviction: string
  created_at: string
  creator_id?: string | null
  direction: VaultType
  fee: string
  id: string
  identity_id?: string | null
  parent_table: ParentTable
  share_price: string
  total?: number | null
  updated_at: string
  user?: UserPresenter | null
  user_asset_delta: string
  value: string
  vault_id: string
}

export type PositionQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type PositionSort = {
  direction?: SortDirection | null
  sortBy?: PositionSortColumn | null
}

export type PositionSortColumn =
  | 'CreatedAt'
  | 'UpdatedAt'
  | 'Conviction'
  | 'Assets'

export const PositionSortColumn = {
  CREATED_AT: 'CreatedAt',
  UPDATED_AT: 'UpdatedAt',
  CONVICTION: 'Conviction',
  ASSETS: 'Assets',
} as const

export type PositionSummaryPresenter = {
  assets: string
  conviction: string
  fee: string
  total: number
  value: string
}

export type PositionValuePresentQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: number | null
}

export type PositionValueQuery = {
  combinator?: Combinator | null
  comparator?: NumericComparators | null
  options?: number | null
  userValue?: number | null
}

export type PredicateDisplayNameQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type PredicateIdQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: string | null
  userValue?: string | null
}

export type PredicateIdentityIdQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type PredicateQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: boolean | null
}

export type PredicateVaultIdQuery = {
  combinator?: Combinator | null
  comparator?: NumericComparators | null
  options?: number | null
  userValue?: number | null
}

export type PredicateVaultQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: string | null
}

export type Quest = {
  active: boolean
  closing_content?: string | null
  condition: QuestCondition
  content?: string | null
  created_at: string
  depends_on_narrative?: QuestNarrative | null
  depends_on_quest?: string | null
  description?: string | null
  id: string
  image: string
  narrative: QuestNarrative
  points: number
  position?: number | null
  summary?: string | null
  title?: string | null
  updated_at: string
}

/**
 * This enum represents the conditions that we can handle for quests
 */
export type QuestCondition =
  | 'always_true'
  | 'counter_stake_claim'
  | 'create_atom'
  | 'create_claim'
  | 'create_follow_claim'
  | 'create_tag_claim'
  | 'stake_claim'
  | 'stake_identity'
  | 'unimplemented'

/**
 * This enum represents the conditions that we can handle for quests
 */
export const QuestCondition = {
  ALWAYS_TRUE: 'always_true',
  COUNTER_STAKE_CLAIM: 'counter_stake_claim',
  CREATE_ATOM: 'create_atom',
  CREATE_CLAIM: 'create_claim',
  CREATE_FOLLOW_CLAIM: 'create_follow_claim',
  CREATE_TAG_CLAIM: 'create_tag_claim',
  STAKE_CLAIM: 'stake_claim',
  STAKE_IDENTITY: 'stake_identity',
  UNIMPLEMENTED: 'unimplemented',
} as const

/**
 * This enum is a direct map to the `quest_narrative` SQL enum. It describes the
 * existing narratives, so every time the SQL enum is updated we need to manually
 * update this enum to keep matching the values
 */
export type QuestNarrative = 'Standard' | 'Onboarding' | 'Test'

/**
 * This enum is a direct map to the `quest_narrative` SQL enum. It describes the
 * existing narratives, so every time the SQL enum is updated we need to manually
 * update this enum to keep matching the values
 */
export const QuestNarrative = {
  STANDARD: 'Standard',
  ONBOARDING: 'Onboarding',
  TEST: 'Test',
} as const

export type QuestPaginatedResponse = {
  data: Array<QuestPresenter>
  limit: number
  page: number
  total: number
}

export type QuestPresenter = {
  active: boolean
  closing_content?: string | null
  condition: QuestCondition
  content?: string | null
  created_at: string
  date_completed?: string | null
  date_started?: string | null
  depends_on_narrative?: QuestNarrative | null
  depends_on_quest?: string | null
  description?: string | null
  id: string
  image: string
  narrative: QuestNarrative
  points: number
  position?: number | null
  progress: number
  status: QuestStatus
  summary?: string | null
  title?: string | null
  updated_at: string
}

export type QuestQuery = {
  active?: boolean | null
  closingContent?: string | null
  content?: string | null
  dependsOnNarrative?: QuestNarrative | null
  dependsOnQuest?: string | null
  description?: string | null
  direction?: SortDirection | null
  limit?: number | null
  narrative?: QuestNarrative | null
  offset?: number | null
  page?: number | null
  position?: number | null
  sortBy?: QuestSortColumn | null
  status?: QuestStatus | null
  summary?: string | null
  title?: string | null
  userId?: string | null
}

export type QuestSort = {
  direction?: SortDirection | null
  sortBy?: QuestSortColumn | null
}

export type QuestSortColumn = 'CreatedAt' | 'Points' | 'Position'

export const QuestSortColumn = {
  CREATED_AT: 'CreatedAt',
  POINTS: 'Points',
  POSITION: 'Position',
} as const

export type QuestStatus =
  | 'NotStarted'
  | 'Started'
  | 'Completed'
  | 'WithDrawn'
  | 'Claimable'

export const QuestStatus = {
  NOT_STARTED: 'NotStarted',
  STARTED: 'Started',
  COMPLETED: 'Completed',
  WITH_DRAWN: 'WithDrawn',
  CLAIMABLE: 'Claimable',
} as const

export type RedeemAtom = {
  id: string
  receiver: string
  shares: string
}

export type RedeemBody = {
  invite_code: string
  wallet: string
}

export type RedeemTriple = {
  id: string
  receiver: string
  shares: string
}

export type Redeemed = {
  assets_for_receiver: string
  exit_fee: string
  id: string
  sender_total_shares_in_vault: string
  shares_redeemed_by_sender: string
}

export type RefreshRequest = {
  refreshToken: string
}

export type Role = 'User' | 'Admin' | 'Atom'

export const Role = {
  USER: 'User',
  ADMIN: 'Admin',
  ATOM: 'Atom',
} as const

export type SemanticQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type SortColumn =
  | 'IdentityId'
  | 'DisplayName'
  | 'Creator'
  | 'NumPositions'
  | 'AssetsSum'
  | 'AssetsPrice'
  | 'Description'
  | 'CreatedAt'
  | 'UpdatedAt'
  | 'Status'
  | 'SharesSum'
  | 'ConvictionSum'
  | 'ConvictionPrice'
  | 'AssetDelta'
  | 'ConvictionPriceDelta'
  | 'UserConviction'
  | 'UserAssets'
  | 'UserAssetDelta'

export const SortColumn = {
  IDENTITY_ID: 'IdentityId',
  DISPLAY_NAME: 'DisplayName',
  CREATOR: 'Creator',
  NUM_POSITIONS: 'NumPositions',
  ASSETS_SUM: 'AssetsSum',
  ASSETS_PRICE: 'AssetsPrice',
  DESCRIPTION: 'Description',
  CREATED_AT: 'CreatedAt',
  UPDATED_AT: 'UpdatedAt',
  STATUS: 'Status',
  SHARES_SUM: 'SharesSum',
  CONVICTION_SUM: 'ConvictionSum',
  CONVICTION_PRICE: 'ConvictionPrice',
  ASSET_DELTA: 'AssetDelta',
  CONVICTION_PRICE_DELTA: 'ConvictionPriceDelta',
  USER_CONVICTION: 'UserConviction',
  USER_ASSETS: 'UserAssets',
  USER_ASSET_DELTA: 'UserAssetDelta',
} as const

export type SortDirection = 'asc' | 'desc'

export const SortDirection = {
  ASC: 'asc',
  DESC: 'desc',
} as const

export type Status = 'pending' | 'complete' | 'removed' | 'error'

export const Status = {
  PENDING: 'pending',
  COMPLETE: 'complete',
  REMOVED: 'removed',
  ERROR: 'error',
} as const

export type StatusExplainer = 'Pending' | 'Complete' | 'Removed'

export const StatusExplainer = {
  PENDING: 'Pending',
  COMPLETE: 'Complete',
  REMOVED: 'Removed',
} as const

export type StatusQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: StatusExplainer | null
  userValue?: Status | null
}

export type StringComparators = 'eq' | 'contains' | 'notEq'

export const StringComparators = {
  EQ: 'eq',
  CONTAINS: 'contains',
  NOT_EQ: 'notEq',
} as const

export type SubjectDisplayNameQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type SubjectIdQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: string | null
  userValue?: string | null
}

export type SubjectIdentityIdQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type SubjectVaultIdQuery = {
  combinator?: Combinator | null
  comparator?: NumericComparators | null
  options?: number | null
  userValue?: number | null
}

export type SubjectVaultQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: string | null
}

export type TagEmbeddedPresenter = {
  description?: string | null
  display_name: string
  identity_id: string
  image?: string | null
  num_positions: number
  num_tagged_identities: number
  subject_id: string
  total_assets: string
  url?: string | null
  vault_id: string
  weight: string
}

export type TimeFrame =
  | 'lastMinute'
  | 'last5Minutes'
  | 'last10Minutes'
  | 'lastHour'
  | 'last4Hours'
  | 'lastDay'
  | 'lastWeek'
  | 'lastMonth'
  | 'any'

export const TimeFrame = {
  LAST_MINUTE: 'lastMinute',
  LAST5MINUTES: 'last5Minutes',
  LAST10MINUTES: 'last10Minutes',
  LAST_HOUR: 'lastHour',
  LAST4HOURS: 'last4Hours',
  LAST_DAY: 'lastDay',
  LAST_WEEK: 'lastWeek',
  LAST_MONTH: 'lastMonth',
  ANY: 'any',
} as const

export type TimeFrameQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type TripleCreated = {
  object_id: string
  predicate_id: string
  subject_id: string
  vault_id: string
}

export type UpdateClaim = {
  against_num_positions?: number | null
  counter_vault_id?: Identifier | null
  counter_vault_uuid?: string | null
  creator: string
  creator_id?: string | null
  for_num_positions?: number | null
  num_positions?: number | null
  object?: Identifier | null
  object_display_name?: string | null
  object_id?: string | null
  object_identity_id?: string | null
  predicate?: Identifier | null
  predicate_display_name?: string | null
  predicate_id?: string | null
  predicate_identity_id?: string | null
  status?: Status | null
  subject?: Identifier | null
  subject_display_name?: string | null
  subject_id?: string | null
  subject_identity_id?: string | null
  vault_id?: Identifier | null
  vault_uuid?: string | null
}

export type UpdatePosition = {
  assets: string
  creator?: string | null
  creator_id?: string | null
  fee: string
  share_price: string
  shares: string
  status?: Status | null
  value: string
  vault_id?: Identifier | null
  vault_type?: VaultType | null
  vault_uuid?: string | null
}

export type UpdateQuest = {
  active?: boolean | null
  closing_content?: string | null
  condition?: QuestCondition | null
  content?: string | null
  depends_on_narrative?: QuestNarrative | null
  depends_on_quest?: string | null
  description?: string | null
  image?: string | null
  narrative?: QuestNarrative | null
  points?: number | null
  position?: number | null
  summary?: string | null
  title?: string | null
}

export type UpsertUser = {
  description?: string | null
  display_name?: string | null
  ens_name?: string | null
  image?: string | null
  privy_id: string
}

export type UpsertUserPoints = {
  point_type: PointType
  points: number
  user_id?: string | null
  wallet: string
}

export type User = {
  api_key?: string | null
  created_at: string
  description?: string | null
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  invite_code?: string | null
  last_login?: string | null
  nft_points: number
  privy_id?: string | null
  protocol_points: number
  quest_points: number
  referral_points: number
  role: Role
  social_points: number
  total_points: number
  updated_at: string
  wallet: string
}

export type UserClaimQuery = {
  direction?: SortDirection | null
  displayName?: string | null
  limit?: number | null
  object?: Identifier | null
  offset?: number | null
  page?: number | null
  predicate?: Identifier | null
  showEmptyPosition?: boolean | null
  sortBy?: ClaimSortColumn | null
  subject?: Identifier | null
  timeframe?: TimeFrame | null
  user?: Identifier | null
}

export type UserDisplayNameQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: string | null
}

export type UserIdentityQuery = {
  direction?: SortDirection | null
  displayName?: string | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
  timeframe?: TimeFrame | null
  user?: Identifier | null
}

export type UserListQuery = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
}

export type UserPoints = {
  created_at: string
  id: string
  point_type: PointType
  points: number
  updated_at: string
  user_id?: string | null
  wallet: string
}

export type UserPositionQuery = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  showEmptyPosition?: boolean | null
  sortBy?: PositionSortColumn | null
  user?: Identifier | null
}

export type UserPresenter = {
  description?: string | null
  display_name?: string | null
  ens_name?: string | null
  id?: string | null
  image?: string | null
  invite_code?: string | null
  last_login?: string | null
  nft_points: number
  privy_id?: string | null
  protocol_points: number
  quest_points: number
  referral_points: number
  social_points: number
  total?: number | null
  total_points: number
  wallet: string
}

export type UserQuest = {
  date_completed?: string | null
  date_started: string
  id: string
  point_multiplier: number
  progress: number
  quest_completion_object_id?: string | null
  quest_condition: QuestCondition
  quest_id: string
  status: QuestStatus
  user_id: string
}

export type UserQuestPaginatedResponse = {
  data: Array<UserQuest>
  limit: number
  page: number
  total: number
}

export type UserQuestQuery = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  questCondition?: QuestCondition | null
  questId?: string | null
  sortBy?: UserQuestSortColumn | null
  status?: QuestStatus | null
  userId?: string | null
}

export type UserQuestSort = {
  direction?: SortDirection | null
  sortBy?: UserQuestSortColumn | null
}

export type UserQuestSortColumn =
  | 'DateStarted'
  | 'DateCompleted'
  | 'Status'
  | 'Progress'
  | 'UserId'
  | 'QuestId'

export const UserQuestSortColumn = {
  DATE_STARTED: 'DateStarted',
  DATE_COMPLETED: 'DateCompleted',
  STATUS: 'Status',
  PROGRESS: 'Progress',
  USER_ID: 'UserId',
  QUEST_ID: 'QuestId',
} as const

export type UserTotalPaginatedResponse = {
  data: Array<UserTotalsPresenter>
  limit: number
  page: number
  total: number
}

export type UserTotalsPresenter = {
  created_at?: string | null
  description?: string | null
  display_name?: string | null
  ens_name?: string | null
  followed_assets: string
  followed_count: number
  follower_count: number
  id?: string | null
  image?: string | null
  last_login?: string | null
  nft_points: number
  privy_id?: string | null
  protocol_points: number
  quest_points: number
  referral_points: number
  total?: number | null
  total_claims: number
  total_delta: string
  total_entry_fees: string
  total_exit_fees: string
  total_identities: number
  total_points: number
  total_position_value: string
  total_position_value_against_claims: string
  total_position_value_for_claims: string
  total_position_value_on_claims: string
  total_position_value_on_identities: string
  total_positions: number
  total_positions_against_claims: number
  total_positions_for_claims: number
  total_positions_on_claims: number
  total_positions_on_identities: number
  total_protocol_fee_paid: string
  updated_at?: string | null
  wallet: string
}

export type UserTotalsQuery = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
  timeframe?: TimeFrame | null
}

export type UserTotalsSort = {
  direction?: SortDirection | null
  sortBy?: SortColumn | null
}

export type UserWallet = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type UserWalletQuery = {
  combinator?: Combinator | null
  comparator?: StringComparators | null
  options?: string | null
  userValue?: string | null
}

export type UsersPointsRequest = {
  point_type: PointType
  points: number
  users: Array<Identifier>
}

export type VaultIdQuery = {
  combinator?: Combinator | null
  comparator?: NumericComparators | null
  options?: number | null
  userValue?: number | null
}

export type VaultQuery = {
  combinator?: Combinator | null
  comparator?: EnumComparators | null
  options?: Array<boolean> | null
  userValue?: string | null
}

export type VaultType = 'for' | 'against'

export const VaultType = {
  FOR: 'for',
  AGAINST: 'against',
} as const

export type VecComparators = 'in' | 'notIn'

export const VecComparators = {
  IN: 'in',
  NOT_IN: 'notIn',
} as const

export type AlchemyWebhookData = {
  requestBody: Blob | File
}

export type AlchemyWebhookResponse = unknown

export type AddressIsWalletData = {
  /**
   * Address to check
   */
  address: string
}

export type AddressIsWalletResponse = boolean

export type GetActivitiesData = {
  blockHash?: string | null
  blockNumber?: string | null
  contract?: string | null
  creator?: Identifier | null
  direction?: SortDirection | null
  eventType?: Event | null
  fromAddress?: string | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
  transactionHash?: string | null
  vaultId?: string | null
}

export type GetActivitiesResponse = {
  data: Array<ActivityPresenter>
  limit: number
  page: number
  total: number
}

export type RetryBlockData = {
  requestBody: {
    end_block: string
    start_block: string
  }
}

export type RetryBlockResponse = unknown

export type GetActivityByIdData = {
  /**
   * Activity sql id
   */
  id: Identifier
}

export type GetActivityByIdResponse = {
  admin?: string | null
  atom_cost: string
  atom_creation_fee: string
  atom_deposit_fraction_for_triple: string
  atom_deposit_fraction_on_triple_creation: string
  block_hash: string
  block_number: string
  claim?: ClaimPresenter | null
  contract: string
  created_at: string
  creator?: UserPresenter | null
  cumulative_gas_used: string
  effective_gas_price: string
  entry_fee: string
  event_type: Event
  exit_fee: string
  fee_denominator: string
  from_address: string
  gas: string
  gas_price: string
  gas_used: string
  id: string
  identity?: IdentityPresenter | null
  input_data?: InputData | null
  logs?: Array<LogType> | null
  max_fee_per_gas: string
  min_deposit: string
  min_share: string
  net_user_assets: string
  object_share_price: string
  object_shares: string
  object_vault_assets: string
  object_vault_id: string
  predicate_share_price: string
  predicate_shares: string
  predicate_vault_assets: string
  predicate_vault_id: string
  protocol_fee: string
  protocol_fee_paid: string
  protocol_vault?: string | null
  raw_input_data: string
  share_price: string
  shares_redeemed_by_sender: string
  subject_share_price: string
  subject_shares: string
  subject_vault_assets: string
  subject_vault_id: string
  timestamp: string
  total_assets: string
  total_shares: string
  transaction_hash?: string | null
  triple_creation_protocol_fee: string
  value: string
  vault_assets: string
  vault_balance: string
  vault_id: string
  vault_shares: string
}

export type RetryActivityData = {
  /**
   * sql id
   */
  id: string
}

export type RetryActivityResponse = unknown

export type RetryLogData = {
  /**
   * sql id
   */
  id: string
}

export type RetryLogResponse = unknown

export type AuthData = {
  requestBody: DidQuery
}

export type AuthResponse = {
  newUser: boolean
  refreshToken: string
  token: string
  userId: string
}

export type RefreshData = {
  requestBody: RefreshRequest
}

export type RefreshResponse = {
  refreshToken: string
}

export type RevokeResponse = unknown

export type GetClaimPositionsData = {
  creator?: Identifier | null
  direction?: SortDirection | null
  /**
   * sql id or vault number
   */
  id: Identifier
  limit?: number | null
  offset?: number | null
  page?: number | null
  positionDirection?: VaultType | null
  sortBy?: PositionSortColumn | null
  timeframe?: TimeFrame | null
  userWallet?: string | null
}

export type GetClaimPositionsResponse = {
  data: Array<PositionPresenter>
  limit: number
  page: number
  total: number
}

export type GetClaimsData = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: ClaimSortColumn | null
}

export type GetClaimsResponse = {
  data: Array<ClaimPresenter>
  limit: number
  page: number
  total: number
}

export type CreateClaimData = {
  requestBody: NewClaim
}

export type CreateClaimResponse = {
  against_assets_sum: string
  against_conviction_price: string
  against_conviction_sum: string
  against_num_positions: number
  assets_sum: string
  claim_id: string
  contract: string
  counter_vault_id: string
  created_at: string
  creator?: UserPresenter | null
  for_assets_sum: string
  for_conviction_price: string
  for_conviction_sum: string
  for_num_positions: number
  num_positions: number
  object?: IdentityPresenter | null
  predicate?: IdentityPresenter | null
  status: Status
  subject?: IdentityPresenter | null
  updated_at: string
  user_assets: string
  user_assets_against: string
  user_assets_for: string
  user_conviction: string
  user_conviction_against: string
  user_conviction_for: string
  vault_id: string
}

export type PendingClaimsData = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: ClaimSortColumn | null
}

export type PendingClaimsResponse = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: ClaimSortColumn | null
}

export type PendingClaimByIdData = {
  id: string
}

export type PendingClaimByIdResponse = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: ClaimSortColumn | null
}

export type SearchClaimsData = {
  counterVault?: Identifier | null
  creator?: Identifier | null
  direction?: SortDirection | null
  displayName?: string | null
  identity?: Identifier | null
  limit?: number | null
  object?: Identifier | null
  offset?: number | null
  page?: number | null
  predicate?: Identifier | null
  sortBy?: ClaimSortColumn | null
  status?: Status | null
  subject?: Identifier | null
  userAssets?: number | null
  userAssetsAgainst?: number | null
  userAssetsAgainstPresent?: boolean | null
  userAssetsFor?: number | null
  userAssetsForPresent?: boolean | null
  userAssetsPresent?: boolean | null
  userWithPosition?: string | null
  vault?: Identifier | null
}

export type SearchClaimsResponse = {
  data: Array<ClaimPresenter>
  limit: number
  page: number
  total: number
}

export type SearchClaimsV2Data = {
  counterVault?: Identifier | null
  creator?: Identifier | null
  direction?: SortDirection | null
  displayName?: string | null
  identity?: Identifier | null
  limit?: number | null
  object?: Identifier | null
  offset?: number | null
  page?: number | null
  predicate?: Identifier | null
  sortBy?: ClaimSortColumn | null
  status?: Status | null
  subject?: Identifier | null
  userAssets?: number | null
  userAssetsAgainst?: number | null
  userAssetsAgainstPresent?: boolean | null
  userAssetsFor?: number | null
  userAssetsForPresent?: boolean | null
  userAssetsPresent?: boolean | null
  userWithPosition?: string | null
  vault?: Identifier | null
}

export type SearchClaimsV2Response = {
  data: Array<ClaimPresenter>
  limit: number
  page: number
  total: number
}

export type ClaimSummaryData = {
  counterVault?: Identifier | null
  creator?: Identifier | null
  direction?: SortDirection | null
  displayName?: string | null
  identity?: Identifier | null
  limit?: number | null
  object?: Identifier | null
  offset?: number | null
  page?: number | null
  predicate?: Identifier | null
  sortBy?: ClaimSortColumn | null
  status?: Status | null
  subject?: Identifier | null
  userAssets?: number | null
  userAssetsAgainst?: number | null
  userAssetsAgainstPresent?: boolean | null
  userAssetsFor?: number | null
  userAssetsForPresent?: boolean | null
  userAssetsPresent?: boolean | null
  userWithPosition?: string | null
  vault?: Identifier | null
}

export type ClaimSummaryResponse = {
  against_assets_sum: string
  against_conviction_sum: string
  against_num_positions: number
  assets_sum: string
  for_assets_sum: string
  for_conviction_sum: string
  for_num_positions: number
  num_positions: number
  total: number
}

export type GetClaimsV2Data = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: ClaimSortColumn | null
}

export type GetClaimsV2Response = {
  data: Array<ClaimPresenter>
  limit: number
  page: number
  total: number
}

export type GetClaimByIdData = {
  /**
   * Claim sql id or vault number
   */
  id: Identifier
}

export type GetClaimByIdResponse = {
  against_assets_sum: string
  against_conviction_price: string
  against_conviction_sum: string
  against_num_positions: number
  assets_sum: string
  claim_id: string
  contract: string
  counter_vault_id: string
  created_at: string
  creator?: UserPresenter | null
  for_assets_sum: string
  for_conviction_price: string
  for_conviction_sum: string
  for_num_positions: number
  num_positions: number
  object?: IdentityPresenter | null
  predicate?: IdentityPresenter | null
  status: Status
  subject?: IdentityPresenter | null
  updated_at: string
  user_assets: string
  user_assets_against: string
  user_assets_for: string
  user_conviction: string
  user_conviction_against: string
  user_conviction_for: string
  vault_id: string
}

export type GetIdentitiesData = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
  timeframe?: TimeFrame | null
  userWallet?: string | null
}

export type GetIdentitiesResponse = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type GetPendingIdentitiesData = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
  timeframe?: TimeFrame | null
  userWallet?: string | null
}

export type GetPendingIdentitiesResponse = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type GetPendingIdentitiesV2Data = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
  timeframe?: TimeFrame | null
  userWallet?: string | null
}

export type GetPendingIdentitiesV2Response = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type GetPendingIdentityData = {
  /**
   * User identifier
   */
  identifier: Identifier
}

export type GetPendingIdentityResponse = {
  contract: string
  corpora_id?: string | null
  created_at: string
  creator: string
  creator_id?: string | null
  description?: string | null
  display_name: string
  entity_type?: string | null
  external_reference?: string | null
  follow_claim_id?: string | null
  follow_vault_id: string
  followed_count: number
  follower_count: number
  id: string
  identity_hash: string
  identity_id: string
  image?: string | null
  is_contract: boolean
  is_user: boolean
  num_positions: number
  predicate: boolean
  semantic?: string | null
  status: Status
  tag_count: number
  updated_at: string
  url?: string | null
  user_display_name?: string | null
  user_ens_name?: string | null
  vault_id: string
  vault_uuid?: string | null
}

export type GetIdentitiesV2Data = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
  timeframe?: TimeFrame | null
  userWallet?: string | null
}

export type GetIdentitiesV2Response = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type UpdateIdentityData = {
  /**
   * Identity sql id
   */
  id: string
  requestBody: {
    creator?: string | null
    creator_uuid?: string | null
    description?: string | null
    display_name?: string | null
    external_reference?: string | null
    follow_claim_id?: string | null
    follow_vault_id: string
    followed_count?: number | null
    follower_count?: number | null
    identity_id?: Identifier | null
    image?: string | null
    num_positions?: number | null
    status?: Status | null
    tag_count?: number | null
    user_display_name?: string | null
    user_ens_name?: string | null
    vault_id?: Identifier | null
    vault_uuid?: string | null
  }
}

export type UpdateIdentityResponse = {
  contract: string
  corpora_id?: string | null
  created_at: string
  creator: string
  creator_id?: string | null
  description?: string | null
  display_name: string
  entity_type?: string | null
  external_reference?: string | null
  follow_claim_id?: string | null
  follow_vault_id: string
  followed_count: number
  follower_count: number
  id: string
  identity_hash: string
  identity_id: string
  image?: string | null
  is_contract: boolean
  is_user: boolean
  num_positions: number
  predicate: boolean
  semantic?: string | null
  status: Status
  tag_count: number
  updated_at: string
  url?: string | null
  user_display_name?: string | null
  user_ens_name?: string | null
  vault_id: string
  vault_uuid?: string | null
}

export type CreateIdentityData = {
  requestBody: {
    contract: string
    creator: string
    creator_uuid?: string | null
    description?: string | null
    display_name: string
    entity_type?: string | null
    external_reference?: string | null
    identity_hash?: string | null
    identity_id?: IdentityId | null
    image?: InputFile | null
    is_contract?: boolean
    is_user?: boolean
    predicate?: boolean
    url?: string | null
    vault_id?: Identifier | null
    vault_uuid?: string | null
  }
}

export type CreateIdentityResponse = {
  asset_delta: string
  assets_sum: string
  contract: string
  conviction_price: string
  conviction_price_delta: string
  conviction_sum: string
  corpora_id?: string | null
  created_at: string
  creator?: UserPresenter | null
  creator_address: string
  creator_id?: string | null
  description?: string | null
  display_name: string
  entity_type?: string | null
  external_reference?: string | null
  follow_claim_id?: string | null
  follow_vault_id: string
  followed_count?: number | null
  follower_count?: number | null
  id: string
  identity_hash: string
  identity_id: string
  image?: string | null
  is_contract: boolean
  is_user: boolean
  num_positions: number
  predicate: boolean
  semantic?: string | null
  status: Status
  tag_count?: number | null
  tags?: Array<TagEmbeddedPresenter> | null
  updated_at: string
  url?: string | null
  user?: UserPresenter | null
  user_asset_delta: string
  user_assets: string
  user_conviction: string
  user_display_name?: string | null
  user_ens_name?: string | null
  vault_id: string
  vault_uuid?: string | null
}

export type SearchIdentityData = {
  creator?: Identifier | null
  description?: string | null
  direction?: SortDirection | null
  displayName?: string | null
  followedBy?: string | null
  follows?: string | null
  hasTag?: string | null
  identityId?: IdentityId | null
  isContract?: boolean | null
  isUser?: boolean | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  predicate?: boolean | null
  sortBy?: SortColumn | null
  status?: Status | null
  timeframe?: TimeFrame | null
  userWallet?: string | null
}

export type SearchIdentityResponse = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type SearchIdentityV2Data = {
  creator?: Identifier | null
  description?: string | null
  direction?: SortDirection | null
  displayName?: string | null
  followedBy?: string | null
  follows?: string | null
  hasTag?: string | null
  identityId?: IdentityId | null
  isContract?: boolean | null
  isUser?: boolean | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  predicate?: boolean | null
  sortBy?: SortColumn | null
  status?: Status | null
  timeframe?: TimeFrame | null
  userWallet?: string | null
}

export type SearchIdentityV2Response = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type IdentitySummaryData = {
  creator?: Identifier | null
  description?: string | null
  direction?: SortDirection | null
  displayName?: string | null
  followedBy?: string | null
  follows?: string | null
  hasTag?: string | null
  identityId?: IdentityId | null
  isContract?: boolean | null
  isUser?: boolean | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  predicate?: boolean | null
  sortBy?: SortColumn | null
  status?: Status | null
  timeframe?: TimeFrame | null
  userWallet?: string | null
}

export type IdentitySummaryResponse = {
  assets: string
  followed_count: number
  follower_count: number
  num_positions: number
  tag_count: number
  total: number
  user_assets: string
}

export type GetIdentityByIdData = {
  /**
   * sql id,identity_id string, or vault number
   */
  id: Identifier
}

export type GetIdentityByIdResponse = {
  asset_delta: string
  assets_sum: string
  contract: string
  conviction_price: string
  conviction_price_delta: string
  conviction_sum: string
  corpora_id?: string | null
  created_at: string
  creator?: UserPresenter | null
  creator_address: string
  creator_id?: string | null
  description?: string | null
  display_name: string
  entity_type?: string | null
  external_reference?: string | null
  follow_claim_id?: string | null
  follow_vault_id: string
  followed_count?: number | null
  follower_count?: number | null
  id: string
  identity_hash: string
  identity_id: string
  image?: string | null
  is_contract: boolean
  is_user: boolean
  num_positions: number
  predicate: boolean
  semantic?: string | null
  status: Status
  tag_count?: number | null
  tags?: Array<TagEmbeddedPresenter> | null
  updated_at: string
  url?: string | null
  user?: UserPresenter | null
  user_asset_delta: string
  user_assets: string
  user_conviction: string
  user_display_name?: string | null
  user_ens_name?: string | null
  vault_id: string
  vault_uuid?: string | null
}

export type GetIdentityFollowedData = {
  direction?: SortDirection | null
  displayName?: string | null
  /**
   * sql id
   */
  id: string
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
  timeframe?: TimeFrame | null
  userWallet?: string | null
}

export type GetIdentityFollowedResponse = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type GetIdentityFollowersData = {
  direction?: SortDirection | null
  displayName?: string | null
  /**
   * sql id
   */
  id: string
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
  timeframe?: TimeFrame | null
  userWallet?: string | null
}

export type GetIdentityFollowersResponse = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type GetIdentityTagsData = {
  direction: SortDirection | null
  /**
   * sql id
   */
  id: string
  limit: number | null
  offset: number | null
  page: number | null
  sortBy: SortColumn | null
  timeframe: TimeFrame | null
  userWallet: string | null
}

export type GetIdentityTagsResponse = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type SetFollowPredicateData = {
  /**
   * address of deployed contract
   */
  contract: string
  /**
   * sql id
   */
  id: string
}

export type SetFollowPredicateResponse = unknown

export type SetTagPredicateData = {
  /**
   * address of deployed contract
   */
  contract: string
  /**
   * sql id
   */
  id: string
}

export type SetTagPredicateResponse = unknown

export type GetIdentityPositionsData = {
  creator?: Identifier | null
  direction?: SortDirection | null
  /**
   * sql id,identity_id string, or vault number
   */
  id: Identifier
  limit?: number | null
  offset?: number | null
  page?: number | null
  positionDirection?: VaultType | null
  sortBy?: PositionSortColumn | null
  timeframe?: TimeFrame | null
  userWallet?: string | null
}

export type GetIdentityPositionsResponse = {
  data: Array<PositionPresenter>
  limit: number
  page: number
  total: number
}

export type IntegrationHealthcheckResponse = {
  alchemy_tx_parsed?: string | null
  cloudinary_cache?: string | null
  last_block_processed?: string | null
}

export type RedeemInviteCodeData = {
  requestBody: RedeemBody
}

export type RedeemInviteCodeResponse = unknown

export type GetLinkedAccountsData = {
  accountType?: string | null
  address?: string | null
  chainType?: string | null
  connectorType?: string | null
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  privyId?: string | null
  sortBy?: SortColumn | null
  userId?: string | null
  walletClient?: string | null
  walletClientType?: string | null
}

export type GetLinkedAccountsResponse = {
  data: Array<LinkedAccountPresenter>
  limit: number
  page: number
  total: number
}

export type CreateLinkedAccountData = {
  requestBody: NewLinkedAccount
}

export type CreateLinkedAccountResponse = {
  account_type: string
  active?: boolean
  add_points?: boolean
  address?: string | null
  chain_type?: string | null
  connector_type?: string | null
  link_id: string
  privy_id?: string | null
  user_id: string
  verified_at?: string | null
  wallet_client?: string | null
  wallet_client_type?: string | null
}

export type GetLinkedAccountByIdData = {
  /**
   * LinkedAccount sql id or link id str
   */
  identifier: Identifier
}

export type GetLinkedAccountByIdResponse = {
  account_type?: string | null
  active?: boolean
  address?: string | null
  chain_type?: string | null
  connector_type?: string | null
  created_at: string
  description?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  link_id: string
  privy_id?: string | null
  total?: number | null
  updated_at: string
  user_id: string
  verified_at: string
  wallet: string
  wallet_client?: string | null
  wallet_client_type?: string | null
}

export type ActivateLinkedAccountData = {
  /**
   * sql id or link id str
   */
  identifier: Identifier
}

export type ActivateLinkedAccountResponse = {
  active?: boolean
  address?: string | null
  chain_type?: string | null
  connector_type?: string | null
  created_at: string
  id: string
  link_id: string
  privy_id?: string | null
  type: string
  updated_at: string
  user_id: string
  verified_at?: string | null
  wallet_client?: string | null
  wallet_client_type?: string | null
}

export type DeactivateLinkedAccountData = {
  /**
   * LinkedAccount sql id or link id str
   */
  identifier: Identifier
}

export type DeactivateLinkedAccountResponse = {
  active?: boolean
  address?: string | null
  chain_type?: string | null
  connector_type?: string | null
  created_at: string
  id: string
  link_id: string
  privy_id?: string | null
  type: string
  updated_at: string
  user_id: string
  verified_at?: string | null
  wallet_client?: string | null
  wallet_client_type?: string | null
}

export type MissedTransactionsData = {
  /**
   * The starting cursor
   */
  after: string | null
  /**
   * The amount of results we are returning
   */
  limit: string | null
  /**
   * The block timestamp to use as the starting point to look for missing transactions
   */
  startingBlockTimestamp: string | null
}

export type MissedTransactionsResponse = unknown

export type CreatePositionData = {
  requestBody: NewPosition
}

export type CreatePositionResponse = {
  assets: string
  claim_id?: string | null
  contract: string
  conviction: string
  created_at: string
  creator: string
  creator_id?: string | null
  fee: string
  id: string
  identity_id?: string | null
  parent_table: ParentTable
  share_price: string
  status: Status
  updated_at: string
  value: string
  vault_id: string
  vault_type: VaultType
  vault_uuid?: string | null
}

export type SearchPositionsData = {
  claim?: Identifier | null
  conviction?: number | null
  creator?: Identifier | null
  creatorId?: string | null
  identity?: Identifier | null
  paging: PaginatedRequest
  parentTable?: ParentTable | null
  sort: PositionSort
  status?: Status | null
  vault?: Identifier | null
  vaultType?: VaultType | null
  vaultUuid?: string | null
}

export type SearchPositionsResponse = {
  data: Array<PositionPresenter>
  limit: number
  page: number
  total: number
}

export type PositionSummaryData = {
  claim?: Identifier | null
  conviction?: number | null
  creator?: Identifier | null
  creatorId?: string | null
  identity?: Identifier | null
  paging: PaginatedRequest
  parentTable?: ParentTable | null
  sort: PositionSort
  status?: Status | null
  vault?: Identifier | null
  vaultType?: VaultType | null
  vaultUuid?: string | null
}

export type PositionSummaryResponse = {
  assets: string
  conviction: string
  fee: string
  total: number
  value: string
}

export type GetPositionByIdData = {
  /**
   * Position sql id or vault number
   */
  id: Identifier
}

export type GetPositionByIdResponse = {
  assets: string
  claim_id?: string | null
  contract: string
  conviction: string
  created_at: string
  creator: string
  creator_id?: string | null
  fee: string
  id: string
  identity_id?: string | null
  parent_table: ParentTable
  share_price: string
  status: Status
  updated_at: string
  value: string
  vault_id: string
  vault_type: VaultType
  vault_uuid?: string | null
}

export type UpdatePositionData = {
  /**
   * Position sql id
   */
  id: string
  requestBody: UpdatePosition
}

export type UpdatePositionResponse = {
  assets: string
  claim_id?: string | null
  contract: string
  conviction: string
  created_at: string
  creator: string
  creator_id?: string | null
  fee: string
  id: string
  identity_id?: string | null
  parent_table: ParentTable
  share_price: string
  status: Status
  updated_at: string
  value: string
  vault_id: string
  vault_type: VaultType
  vault_uuid?: string | null
}

export type ReconcilePositionData = {
  /**
   * position's id in sql
   */
  id: string
}

export type ReconcilePositionResponse = {
  assets: string
  claim_id?: string | null
  contract: string
  conviction: string
  created_at: string
  creator: string
  creator_id?: string | null
  fee: string
  id: string
  identity_id?: string | null
  parent_table: ParentTable
  share_price: string
  status: Status
  updated_at: string
  value: string
  vault_id: string
  vault_type: VaultType
  vault_uuid?: string | null
}

export type GetQueryStructureResponse = unknown

export type RunDynamicQueryData = {
  requestBody: DataSetQuery
}

export type RunDynamicQueryResponse =
  | IdentityPaginatedResponse
  | ClaimPaginatedResponse
  | PositionPaginatedResponse

export type CreateQuestData = {
  requestBody: NewQuest
}

export type CreateQuestResponse = {
  active: boolean
  closing_content?: string | null
  condition: QuestCondition
  content?: string | null
  created_at: string
  depends_on_narrative?: QuestNarrative | null
  depends_on_quest?: string | null
  description?: string | null
  id: string
  image: string
  narrative: QuestNarrative
  points: number
  position?: number | null
  summary?: string | null
  title?: string | null
  updated_at: string
}

export type SearchQuestsData = {
  requestBody: QuestQuery
}

export type SearchQuestsResponse = {
  data: Array<QuestPresenter>
  limit: number
  page: number
  total: number
}

export type GetQuestData = {
  /**
   * Quest SQL id
   */
  questId: string
}

export type GetQuestResponse = {
  active: boolean
  closing_content?: string | null
  condition: QuestCondition
  content?: string | null
  created_at: string
  depends_on_narrative?: QuestNarrative | null
  depends_on_quest?: string | null
  description?: string | null
  id: string
  image: string
  narrative: QuestNarrative
  points: number
  position?: number | null
  summary?: string | null
  title?: string | null
  updated_at: string
}

export type UpdateQuestData = {
  /**
   * Quest SQL id
   */
  questId: string
  requestBody: UpdateQuest
}

export type UpdateQuestResponse = {
  active: boolean
  closing_content?: string | null
  condition: QuestCondition
  content?: string | null
  created_at: string
  depends_on_narrative?: QuestNarrative | null
  depends_on_quest?: string | null
  description?: string | null
  id: string
  image: string
  narrative: QuestNarrative
  points: number
  position?: number | null
  summary?: string | null
  title?: string | null
  updated_at: string
}

export type DeleteQuestData = {
  /**
   * Quest SQL id
   */
  questId: string
}

export type DeleteQuestResponse = {
  active: boolean
  closing_content?: string | null
  condition: QuestCondition
  content?: string | null
  created_at: string
  depends_on_narrative?: QuestNarrative | null
  depends_on_quest?: string | null
  description?: string | null
  id: string
  image: string
  narrative: QuestNarrative
  points: number
  position?: number | null
  summary?: string | null
  title?: string | null
  updated_at: string
}

export type GetUserQuestByQuestIdData = {
  questId: string
}

export type GetUserQuestByQuestIdResponse = {
  date_completed?: string | null
  date_started: string
  id: string
  point_multiplier: number
  progress: number
  quest_completion_object_id?: string | null
  quest_condition: QuestCondition
  quest_id: string
  status: QuestStatus
  user_id: string
}

export type SearchData = {
  requestBody: UserQuestQuery
}

export type SearchResponse = {
  data: Array<UserQuest>
  limit: number
  page: number
  total: number
}

export type CheckQuestStatusData = {
  /**
   * Quest SQL id
   */
  questId: string
}

export type CheckQuestStatusResponse =
  | 'NotStarted'
  | 'Started'
  | 'Completed'
  | 'WithDrawn'
  | 'Claimable'

export type CompleteQuestData = {
  /**
   * Quest SQL id
   */
  questId: string
}

export type CompleteQuestResponse = {
  date_completed?: string | null
  date_started: string
  id: string
  point_multiplier: number
  progress: number
  quest_completion_object_id?: string | null
  quest_condition: QuestCondition
  quest_id: string
  status: QuestStatus
  user_id: string
}

export type ResetQuestData = {
  /**
   * Quest SQL id
   */
  questId: string
}

export type ResetQuestResponse = {
  date_completed?: string | null
  date_started: string
  id: string
  point_multiplier: number
  progress: number
  quest_completion_object_id?: string | null
  quest_condition: QuestCondition
  quest_id: string
  status: QuestStatus
  user_id: string
}

export type StartQuestData = {
  /**
   * Quest SQL id
   */
  questId: string
}

export type StartQuestResponse = {
  date_completed?: string | null
  date_started: string
  id: string
  point_multiplier: number
  progress: number
  quest_completion_object_id?: string | null
  quest_condition: QuestCondition
  quest_id: string
  status: QuestStatus
  user_id: string
}

export type GetUserQuestByIdData = {
  /**
   * User quest SQL id
   */
  userQuestId: string
}

export type GetUserQuestByIdResponse = {
  date_completed?: string | null
  date_started: string
  id: string
  point_multiplier: number
  progress: number
  quest_completion_object_id?: string | null
  quest_condition: QuestCondition
  quest_id: string
  status: QuestStatus
  user_id: string
}

export type GetUsersData = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
}

export type GetUsersResponse = {
  data: Array<UserPresenter>
  limit: number
  page: number
  total: number
}

export type CreateUserData = {
  requestBody: UpsertUser
}

export type CreateUserResponse = {
  api_key?: string | null
  created_at: string
  description?: string | null
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  invite_code?: string | null
  last_login?: string | null
  nft_points: number
  privy_id?: string | null
  protocol_points: number
  quest_points: number
  referral_points: number
  role: Role
  social_points: number
  total_points: number
  updated_at: string
  wallet: string
}

export type ReissueApiKeyResponse = {
  api_key?: string | null
  created_at: string
  description?: string | null
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  invite_code?: string | null
  last_login?: string | null
  nft_points: number
  privy_id?: string | null
  protocol_points: number
  quest_points: number
  referral_points: number
  role: Role
  social_points: number
  total_points: number
  updated_at: string
  wallet: string
}

export type GetUserClaimsData = {
  direction?: SortDirection | null
  displayName?: string | null
  limit?: number | null
  object?: Identifier | null
  offset?: number | null
  page?: number | null
  predicate?: Identifier | null
  showEmptyPosition?: boolean | null
  sortBy?: ClaimSortColumn | null
  subject?: Identifier | null
  timeframe?: TimeFrame | null
  user?: Identifier | null
}

export type GetUserClaimsResponse = {
  data: Array<ClaimPresenter>
  limit: number
  page: number
  total: number
}

export type GetUserClaimsV2Data = {
  direction?: SortDirection | null
  displayName?: string | null
  limit?: number | null
  object?: Identifier | null
  offset?: number | null
  page?: number | null
  predicate?: Identifier | null
  showEmptyPosition?: boolean | null
  sortBy?: ClaimSortColumn | null
  subject?: Identifier | null
  timeframe?: TimeFrame | null
  user?: Identifier | null
}

export type GetUserClaimsV2Response = {
  data: Array<ClaimPresenter>
  limit: number
  page: number
  total: number
}

export type GetUserIdentitiesData = {
  direction?: SortDirection | null
  displayName?: string | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
  timeframe?: TimeFrame | null
  user?: Identifier | null
}

export type GetUserIdentitiesResponse = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type GetUserIdentitiesV2Data = {
  direction?: SortDirection | null
  displayName?: string | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
  timeframe?: TimeFrame | null
  user?: Identifier | null
}

export type GetUserIdentitiesV2Response = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type UpdateUsersPointsBatchData = {
  requestBody: UsersPointsRequest
}

export type UpdateUsersPointsBatchResponse = Array<{
  created_at: string
  id: string
  point_type: PointType
  points: number
  updated_at: string
  user_id?: string | null
  wallet: string
}>

export type GetUsersPositionsData = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  showEmptyPosition?: boolean | null
  sortBy?: PositionSortColumn | null
  user?: Identifier | null
}

export type GetUsersPositionsResponse = {
  data: Array<PositionPresenter>
  limit: number
  page: number
  total: number
}

export type GetAllUsersTotalsData = {
  direction?: SortDirection | null
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
  timeframe?: TimeFrame | null
}

export type GetAllUsersTotalsResponse = {
  data: Array<UserTotalsPresenter>
  limit: number
  page: number
  total: number
}

export type GetUserByWalletPublicData = {
  /**
   * User wallet
   */
  wallet: string
}

export type GetUserByWalletPublicResponse = {
  api_key?: string | null
  created_at: string
  description?: string | null
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  invite_code?: string | null
  last_login?: string | null
  nft_points: number
  privy_id?: string | null
  protocol_points: number
  quest_points: number
  referral_points: number
  role: Role
  social_points: number
  total_points: number
  updated_at: string
  wallet: string
}

export type GetUserByWalletData = {
  /**
   * User wallet
   */
  wallet: string
}

export type GetUserByWalletResponse = {
  api_key?: string | null
  created_at: string
  description?: string | null
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  invite_code?: string | null
  last_login?: string | null
  nft_points: number
  privy_id?: string | null
  protocol_points: number
  quest_points: number
  referral_points: number
  role: Role
  social_points: number
  total_points: number
  updated_at: string
  wallet: string
}

export type UpdateUserPointsData = {
  /**
   * User sql id or wallet
   */
  identifier: Identifier
  requestBody: PointsRequest
}

export type UpdateUserPointsResponse = {
  created_at: string
  id: string
  point_type: PointType
  points: number
  updated_at: string
  user_id?: string | null
  wallet: string
}

export type GetUserByIdPublicData = {
  /**
   * User sql id
   */
  id: string
}

export type GetUserByIdPublicResponse = {
  api_key?: string | null
  created_at: string
  description?: string | null
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  invite_code?: string | null
  last_login?: string | null
  nft_points: number
  privy_id?: string | null
  protocol_points: number
  quest_points: number
  referral_points: number
  role: Role
  social_points: number
  total_points: number
  updated_at: string
  wallet: string
}

export type UpdateUserData = {
  /**
   * User sql id
   */
  id: string
  requestBody: UpsertUser
}

export type UpdateUserResponse = {
  api_key?: string | null
  created_at: string
  description?: string | null
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  invite_code?: string | null
  last_login?: string | null
  nft_points: number
  privy_id?: string | null
  protocol_points: number
  quest_points: number
  referral_points: number
  role: Role
  social_points: number
  total_points: number
  updated_at: string
  wallet: string
}

export type DeleteUserData = {
  /**
   * Id of user to delete
   */
  id: string
}

export type DeleteUserResponse = {
  api_key?: string | null
  created_at: string
  description?: string | null
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  invite_code?: string | null
  last_login?: string | null
  nft_points: number
  privy_id?: string | null
  protocol_points: number
  quest_points: number
  referral_points: number
  role: Role
  social_points: number
  total_points: number
  updated_at: string
  wallet: string
}

export type UpdateUserEnsData = {
  /**
   * User sql id or wallet
   */
  id: Identifier
}

export type UpdateUserEnsResponse = {
  api_key?: string | null
  created_at: string
  description?: string | null
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  invite_code?: string | null
  last_login?: string | null
  nft_points: number
  privy_id?: string | null
  protocol_points: number
  quest_points: number
  referral_points: number
  role: Role
  social_points: number
  total_points: number
  updated_at: string
  wallet: string
}

export type GetInviteCodesByUserData = {
  /**
   * User sql id
   */
  id: string
}

export type GetInviteCodesByUserResponse = {
  invite_codes: Array<InviteCodePresenter>
}

export type CreateInviteCodesByUserData = {
  /**
   * User sql id
   */
  id: string
}

export type CreateInviteCodesByUserResponse = {
  invite_codes: Array<InviteCodePresenter>
}

export type GetLinkedAccountsByUserData = {
  /**
   * User sql id
   */
  id: string
}

export type GetLinkedAccountsByUserResponse = {
  data: Array<LinkedAccountPresenter>
  limit: number
  page: number
  total: number
}

export type GetUserByIdData = {
  /**
   * User sql id
   */
  id: string
}

export type GetUserByIdResponse = {
  api_key?: string | null
  created_at: string
  description?: string | null
  did?: string | null
  display_name?: string | null
  ens_name?: string | null
  id: string
  image?: string | null
  invite_code?: string | null
  last_login?: string | null
  nft_points: number
  privy_id?: string | null
  protocol_points: number
  quest_points: number
  referral_points: number
  role: Role
  social_points: number
  total_points: number
  updated_at: string
  wallet: string
}

export type GetUserTagsData = {
  /**
   * User sql id or wallet
   */
  id: Identifier
}

export type GetUserTagsResponse = {
  data: Array<IdentityPresenter>
  limit: number
  page: number
  total: number
}

export type GetUserTotalsData = {
  direction?: SortDirection | null
  /**
   * User sql id
   */
  id: string
  limit?: number | null
  offset?: number | null
  page?: number | null
  sortBy?: SortColumn | null
  timeframe?: TimeFrame | null
}

export type GetUserTotalsResponse = {
  created_at?: string | null
  description?: string | null
  display_name?: string | null
  ens_name?: string | null
  followed_assets: string
  followed_count: number
  follower_count: number
  id?: string | null
  image?: string | null
  last_login?: string | null
  nft_points: number
  privy_id?: string | null
  protocol_points: number
  quest_points: number
  referral_points: number
  total?: number | null
  total_claims: number
  total_delta: string
  total_entry_fees: string
  total_exit_fees: string
  total_identities: number
  total_points: number
  total_position_value: string
  total_position_value_against_claims: string
  total_position_value_for_claims: string
  total_position_value_on_claims: string
  total_position_value_on_identities: string
  total_positions: number
  total_positions_against_claims: number
  total_positions_for_claims: number
  total_positions_on_claims: number
  total_positions_on_identities: number
  total_protocol_fee_paid: string
  updated_at?: string | null
  wallet: string
}

export type AddWebhookData = {
  requestBody: CreateWebhook
}

export type AddWebhookResponse = unknown

export type $OpenApiTs = {
  '/Alchemy': {
    post: {
      req: {
        requestBody: Blob | File
      }
      res: {
        /**
         * Receive message from Alchemy
         */
        200: unknown
      }
    }
  }
  '/is_wallet/{address}': {
    get: {
      req: {
        /**
         * Address to check
         */
        address: string
      }
      res: {
        /**
         * Check if address is a wallet or contract
         */
        200: boolean
      }
    }
  }
  '/activities': {
    get: {
      req: {
        blockHash?: string | null
        blockNumber?: string | null
        contract?: string | null
        creator?: Identifier | null
        direction?: SortDirection | null
        eventType?: Event | null
        fromAddress?: string | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        sortBy?: SortColumn | null
        transactionHash?: string | null
        vaultId?: string | null
      }
      res: {
        /**
         * Search activities in paginated list
         */
        200: {
          data: Array<ActivityPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/activities/retry_block': {
    post: {
      req: {
        requestBody: {
          end_block: string
          start_block: string
        }
      }
      res: {
        200: unknown
      }
    }
  }
  '/activities/{id}': {
    get: {
      req: {
        /**
         * Activity sql id
         */
        id: Identifier
      }
      res: {
        /**
         * Get single activity by id
         */
        200: {
          admin?: string | null
          atom_cost: string
          atom_creation_fee: string
          atom_deposit_fraction_for_triple: string
          atom_deposit_fraction_on_triple_creation: string
          block_hash: string
          block_number: string
          claim?: ClaimPresenter | null
          contract: string
          created_at: string
          creator?: UserPresenter | null
          cumulative_gas_used: string
          effective_gas_price: string
          entry_fee: string
          event_type: Event
          exit_fee: string
          fee_denominator: string
          from_address: string
          gas: string
          gas_price: string
          gas_used: string
          id: string
          identity?: IdentityPresenter | null
          input_data?: InputData | null
          logs?: Array<LogType> | null
          max_fee_per_gas: string
          min_deposit: string
          min_share: string
          net_user_assets: string
          object_share_price: string
          object_shares: string
          object_vault_assets: string
          object_vault_id: string
          predicate_share_price: string
          predicate_shares: string
          predicate_vault_assets: string
          predicate_vault_id: string
          protocol_fee: string
          protocol_fee_paid: string
          protocol_vault?: string | null
          raw_input_data: string
          share_price: string
          shares_redeemed_by_sender: string
          subject_share_price: string
          subject_shares: string
          subject_vault_assets: string
          subject_vault_id: string
          timestamp: string
          total_assets: string
          total_shares: string
          transaction_hash?: string | null
          triple_creation_protocol_fee: string
          value: string
          vault_assets: string
          vault_balance: string
          vault_id: string
          vault_shares: string
        }
      }
    }
  }
  '/activities/{id}/retry': {
    post: {
      req: {
        /**
         * sql id
         */
        id: string
      }
      res: {
        200: unknown
      }
    }
  }
  '/activities/{id}/retry_log': {
    post: {
      req: {
        /**
         * sql id
         */
        id: string
      }
      res: {
        200: unknown
      }
    }
  }
  '/auth': {
    post: {
      req: {
        requestBody: DidQuery
      }
      res: {
        /**
         * Return JWT token using api key and did session
         */
        200: {
          newUser: boolean
          refreshToken: string
          token: string
          userId: string
        }
      }
    }
  }
  '/refresh': {
    post: {
      req: {
        requestBody: RefreshRequest
      }
      res: {
        /**
         * Refresh JWT and refresh token
         */
        200: {
          refreshToken: string
        }
      }
    }
  }
  '/revoke': {
    post: {
      res: {
        /**
         * Revoke JWT token
         */
        200: unknown
      }
    }
  }
  '/claim/{id}/positions': {
    get: {
      req: {
        creator?: Identifier | null
        direction?: SortDirection | null
        /**
         * sql id or vault number
         */
        id: Identifier
        limit?: number | null
        offset?: number | null
        page?: number | null
        positionDirection?: VaultType | null
        sortBy?: PositionSortColumn | null
        timeframe?: TimeFrame | null
        userWallet?: string | null
      }
      res: {
        /**
         * Get all claim positions
         */
        200: {
          data: Array<PositionPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/claims': {
    get: {
      req: {
        direction?: SortDirection | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        sortBy?: ClaimSortColumn | null
      }
      res: {
        /**
         * Get all claims in paginated list
         */
        200: {
          data: Array<ClaimPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
    post: {
      req: {
        requestBody: NewClaim
      }
      res: {
        /**
         * Create a new claim
         */
        200: {
          against_assets_sum: string
          against_conviction_price: string
          against_conviction_sum: string
          against_num_positions: number
          assets_sum: string
          claim_id: string
          contract: string
          counter_vault_id: string
          created_at: string
          creator?: UserPresenter | null
          for_assets_sum: string
          for_conviction_price: string
          for_conviction_sum: string
          for_num_positions: number
          num_positions: number
          object?: IdentityPresenter | null
          predicate?: IdentityPresenter | null
          status: Status
          subject?: IdentityPresenter | null
          updated_at: string
          user_assets: string
          user_assets_against: string
          user_assets_for: string
          user_conviction: string
          user_conviction_against: string
          user_conviction_for: string
          vault_id: string
        }
      }
    }
  }
  '/claims/pending': {
    get: {
      req: {
        direction?: SortDirection | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        sortBy?: ClaimSortColumn | null
      }
      res: {
        /**
         * Summary of pending claims
         */
        200: {
          direction?: SortDirection | null
          limit?: number | null
          offset?: number | null
          page?: number | null
          sortBy?: ClaimSortColumn | null
        }
      }
    }
  }
  '/claims/pending/{id}': {
    get: {
      req: {
        id: string
      }
      res: {
        /**
         * The pending claim for the provided ID
         */
        200: {
          direction?: SortDirection | null
          limit?: number | null
          offset?: number | null
          page?: number | null
          sortBy?: ClaimSortColumn | null
        }
        /**
         * Record not found in the DB
         */
        404: unknown
      }
    }
  }
  '/claims/search': {
    get: {
      req: {
        counterVault?: Identifier | null
        creator?: Identifier | null
        direction?: SortDirection | null
        displayName?: string | null
        identity?: Identifier | null
        limit?: number | null
        object?: Identifier | null
        offset?: number | null
        page?: number | null
        predicate?: Identifier | null
        sortBy?: ClaimSortColumn | null
        status?: Status | null
        subject?: Identifier | null
        userAssets?: number | null
        userAssetsAgainst?: number | null
        userAssetsAgainstPresent?: boolean | null
        userAssetsFor?: number | null
        userAssetsForPresent?: boolean | null
        userAssetsPresent?: boolean | null
        userWithPosition?: string | null
        vault?: Identifier | null
      }
      res: {
        /**
         * Search claims in paginated list
         */
        200: {
          data: Array<ClaimPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/claims/search/v2': {
    get: {
      req: {
        counterVault?: Identifier | null
        creator?: Identifier | null
        direction?: SortDirection | null
        displayName?: string | null
        identity?: Identifier | null
        limit?: number | null
        object?: Identifier | null
        offset?: number | null
        page?: number | null
        predicate?: Identifier | null
        sortBy?: ClaimSortColumn | null
        status?: Status | null
        subject?: Identifier | null
        userAssets?: number | null
        userAssetsAgainst?: number | null
        userAssetsAgainstPresent?: boolean | null
        userAssetsFor?: number | null
        userAssetsForPresent?: boolean | null
        userAssetsPresent?: boolean | null
        userWithPosition?: string | null
        vault?: Identifier | null
      }
      res: {
        /**
         * Search claims in paginated list
         */
        200: {
          data: Array<ClaimPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/claims/summary': {
    get: {
      req: {
        counterVault?: Identifier | null
        creator?: Identifier | null
        direction?: SortDirection | null
        displayName?: string | null
        identity?: Identifier | null
        limit?: number | null
        object?: Identifier | null
        offset?: number | null
        page?: number | null
        predicate?: Identifier | null
        sortBy?: ClaimSortColumn | null
        status?: Status | null
        subject?: Identifier | null
        userAssets?: number | null
        userAssetsAgainst?: number | null
        userAssetsAgainstPresent?: boolean | null
        userAssetsFor?: number | null
        userAssetsForPresent?: boolean | null
        userAssetsPresent?: boolean | null
        userWithPosition?: string | null
        vault?: Identifier | null
      }
      res: {
        /**
         * Summary of claim values based on query
         */
        200: {
          against_assets_sum: string
          against_conviction_sum: string
          against_num_positions: number
          assets_sum: string
          for_assets_sum: string
          for_conviction_sum: string
          for_num_positions: number
          num_positions: number
          total: number
        }
      }
    }
  }
  '/claims/v2': {
    get: {
      req: {
        direction?: SortDirection | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        sortBy?: ClaimSortColumn | null
      }
      res: {
        /**
         * Get all claims in paginated list
         */
        200: {
          data: Array<ClaimPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/claims/{id}': {
    get: {
      req: {
        /**
         * Claim sql id or vault number
         */
        id: Identifier
      }
      res: {
        /**
         * Get single claim by id
         */
        200: {
          against_assets_sum: string
          against_conviction_price: string
          against_conviction_sum: string
          against_num_positions: number
          assets_sum: string
          claim_id: string
          contract: string
          counter_vault_id: string
          created_at: string
          creator?: UserPresenter | null
          for_assets_sum: string
          for_conviction_price: string
          for_conviction_sum: string
          for_num_positions: number
          num_positions: number
          object?: IdentityPresenter | null
          predicate?: IdentityPresenter | null
          status: Status
          subject?: IdentityPresenter | null
          updated_at: string
          user_assets: string
          user_assets_against: string
          user_assets_for: string
          user_conviction: string
          user_conviction_against: string
          user_conviction_for: string
          vault_id: string
        }
        /**
         * Record not found in the DB
         */
        404: unknown
      }
    }
  }
  '/identities': {
    get: {
      req: {
        direction?: SortDirection | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        sortBy?: SortColumn | null
        timeframe?: TimeFrame | null
        userWallet?: string | null
      }
      res: {
        /**
         * Get all identities in paginated list
         */
        200: {
          data: Array<IdentityPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/identities/pending': {
    get: {
      req: {
        direction?: SortDirection | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        sortBy?: SortColumn | null
        timeframe?: TimeFrame | null
        userWallet?: string | null
      }
      res: {
        /**
         * Get all pending identities in paginated list
         */
        200: {
          data: Array<IdentityPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/identities/pending/v2': {
    get: {
      req: {
        direction?: SortDirection | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        sortBy?: SortColumn | null
        timeframe?: TimeFrame | null
        userWallet?: string | null
      }
      res: {
        /**
         * Get all pending identities in paginated list
         */
        200: {
          data: Array<IdentityPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/identities/pending/{identifier}': {
    get: {
      req: {
        /**
         * User identifier
         */
        identifier: Identifier
      }
      res: {
        /**
         * Get a pending identity by the identifier
         */
        200: {
          contract: string
          corpora_id?: string | null
          created_at: string
          creator: string
          creator_id?: string | null
          description?: string | null
          display_name: string
          entity_type?: string | null
          external_reference?: string | null
          follow_claim_id?: string | null
          follow_vault_id: string
          followed_count: number
          follower_count: number
          id: string
          identity_hash: string
          identity_id: string
          image?: string | null
          is_contract: boolean
          is_user: boolean
          num_positions: number
          predicate: boolean
          semantic?: string | null
          status: Status
          tag_count: number
          updated_at: string
          url?: string | null
          user_display_name?: string | null
          user_ens_name?: string | null
          vault_id: string
          vault_uuid?: string | null
        }
        /**
         * Record not found in the DB
         */
        404: unknown
      }
    }
  }
  '/identities/v2': {
    get: {
      req: {
        direction?: SortDirection | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        sortBy?: SortColumn | null
        timeframe?: TimeFrame | null
        userWallet?: string | null
      }
      res: {
        /**
         * Get all identities in paginated list
         */
        200: {
          data: Array<IdentityPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/identities/{id}': {
    put: {
      req: {
        /**
         * Identity sql id
         */
        id: string
        requestBody: {
          creator?: string | null
          creator_uuid?: string | null
          description?: string | null
          display_name?: string | null
          external_reference?: string | null
          follow_claim_id?: string | null
          follow_vault_id: string
          followed_count?: number | null
          follower_count?: number | null
          identity_id?: Identifier | null
          image?: string | null
          num_positions?: number | null
          status?: Status | null
          tag_count?: number | null
          user_display_name?: string | null
          user_ens_name?: string | null
          vault_id?: Identifier | null
          vault_uuid?: string | null
        }
      }
      res: {
        /**
         * Update an identity
         */
        200: {
          contract: string
          corpora_id?: string | null
          created_at: string
          creator: string
          creator_id?: string | null
          description?: string | null
          display_name: string
          entity_type?: string | null
          external_reference?: string | null
          follow_claim_id?: string | null
          follow_vault_id: string
          followed_count: number
          follower_count: number
          id: string
          identity_hash: string
          identity_id: string
          image?: string | null
          is_contract: boolean
          is_user: boolean
          num_positions: number
          predicate: boolean
          semantic?: string | null
          status: Status
          tag_count: number
          updated_at: string
          url?: string | null
          user_display_name?: string | null
          user_ens_name?: string | null
          vault_id: string
          vault_uuid?: string | null
        }
      }
    }
  }
  '/identity': {
    post: {
      req: {
        requestBody: {
          contract: string
          creator: string
          creator_uuid?: string | null
          description?: string | null
          display_name: string
          entity_type?: string | null
          external_reference?: string | null
          identity_hash?: string | null
          identity_id?: IdentityId | null
          image?: InputFile | null
          is_contract?: boolean
          is_user?: boolean
          predicate?: boolean
          url?: string | null
          vault_id?: Identifier | null
          vault_uuid?: string | null
        }
      }
      res: {
        /**
         * Create a new identity
         */
        200: {
          asset_delta: string
          assets_sum: string
          contract: string
          conviction_price: string
          conviction_price_delta: string
          conviction_sum: string
          corpora_id?: string | null
          created_at: string
          creator?: UserPresenter | null
          creator_address: string
          creator_id?: string | null
          description?: string | null
          display_name: string
          entity_type?: string | null
          external_reference?: string | null
          follow_claim_id?: string | null
          follow_vault_id: string
          followed_count?: number | null
          follower_count?: number | null
          id: string
          identity_hash: string
          identity_id: string
          image?: string | null
          is_contract: boolean
          is_user: boolean
          num_positions: number
          predicate: boolean
          semantic?: string | null
          status: Status
          tag_count?: number | null
          tags?: Array<TagEmbeddedPresenter> | null
          updated_at: string
          url?: string | null
          user?: UserPresenter | null
          user_asset_delta: string
          user_assets: string
          user_conviction: string
          user_display_name?: string | null
          user_ens_name?: string | null
          vault_id: string
          vault_uuid?: string | null
        }
      }
    }
  }
  '/identity/search': {
    get: {
      req: {
        creator?: Identifier | null
        description?: string | null
        direction?: SortDirection | null
        displayName?: string | null
        followedBy?: string | null
        follows?: string | null
        hasTag?: string | null
        identityId?: IdentityId | null
        isContract?: boolean | null
        isUser?: boolean | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        predicate?: boolean | null
        sortBy?: SortColumn | null
        status?: Status | null
        timeframe?: TimeFrame | null
        userWallet?: string | null
      }
      res: {
        /**
         * Search identities in paginated list
         */
        200: {
          data: Array<IdentityPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/identity/search/v2': {
    get: {
      req: {
        creator?: Identifier | null
        description?: string | null
        direction?: SortDirection | null
        displayName?: string | null
        followedBy?: string | null
        follows?: string | null
        hasTag?: string | null
        identityId?: IdentityId | null
        isContract?: boolean | null
        isUser?: boolean | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        predicate?: boolean | null
        sortBy?: SortColumn | null
        status?: Status | null
        timeframe?: TimeFrame | null
        userWallet?: string | null
      }
      res: {
        /**
         * Search identities using QB returning paginated list
         */
        200: {
          data: Array<IdentityPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/identity/summary': {
    get: {
      req: {
        creator?: Identifier | null
        description?: string | null
        direction?: SortDirection | null
        displayName?: string | null
        followedBy?: string | null
        follows?: string | null
        hasTag?: string | null
        identityId?: IdentityId | null
        isContract?: boolean | null
        isUser?: boolean | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        predicate?: boolean | null
        sortBy?: SortColumn | null
        status?: Status | null
        timeframe?: TimeFrame | null
        userWallet?: string | null
      }
      res: {
        /**
         * Summary of identity values based on query
         */
        200: {
          assets: string
          followed_count: number
          follower_count: number
          num_positions: number
          tag_count: number
          total: number
          user_assets: string
        }
      }
    }
  }
  '/identity/{id}': {
    get: {
      req: {
        /**
         * sql id,identity_id string, or vault number
         */
        id: Identifier
      }
      res: {
        /**
         * Get single identity by id
         */
        200: {
          asset_delta: string
          assets_sum: string
          contract: string
          conviction_price: string
          conviction_price_delta: string
          conviction_sum: string
          corpora_id?: string | null
          created_at: string
          creator?: UserPresenter | null
          creator_address: string
          creator_id?: string | null
          description?: string | null
          display_name: string
          entity_type?: string | null
          external_reference?: string | null
          follow_claim_id?: string | null
          follow_vault_id: string
          followed_count?: number | null
          follower_count?: number | null
          id: string
          identity_hash: string
          identity_id: string
          image?: string | null
          is_contract: boolean
          is_user: boolean
          num_positions: number
          predicate: boolean
          semantic?: string | null
          status: Status
          tag_count?: number | null
          tags?: Array<TagEmbeddedPresenter> | null
          updated_at: string
          url?: string | null
          user?: UserPresenter | null
          user_asset_delta: string
          user_assets: string
          user_conviction: string
          user_display_name?: string | null
          user_ens_name?: string | null
          vault_id: string
          vault_uuid?: string | null
        }
      }
    }
  }
  '/identity/{id}/followed': {
    get: {
      req: {
        direction?: SortDirection | null
        displayName?: string | null
        /**
         * sql id
         */
        id: string
        limit?: number | null
        offset?: number | null
        page?: number | null
        sortBy?: SortColumn | null
        timeframe?: TimeFrame | null
        userWallet?: string | null
      }
      res: {
        /**
         * Get paginated list of identities following this one
         */
        200: {
          data: Array<IdentityPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/identity/{id}/followers': {
    get: {
      req: {
        direction?: SortDirection | null
        displayName?: string | null
        /**
         * sql id
         */
        id: string
        limit?: number | null
        offset?: number | null
        page?: number | null
        sortBy?: SortColumn | null
        timeframe?: TimeFrame | null
        userWallet?: string | null
      }
      res: {
        /**
         * Get paginated list of identity's followers
         */
        200: {
          data: Array<IdentityPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/identity/{id}/tags': {
    get: {
      req: {
        direction: SortDirection | null
        /**
         * sql id
         */
        id: string
        limit: number | null
        offset: number | null
        page: number | null
        sortBy: SortColumn | null
        timeframe: TimeFrame | null
        userWallet: string | null
      }
      res: {
        /**
         * Get paginated list of identity's tags
         */
        200: {
          data: Array<IdentityPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/identity/{id}/{contract}/follow_predicate': {
    post: {
      req: {
        /**
         * address of deployed contract
         */
        contract: string
        /**
         * sql id
         */
        id: string
      }
      res: {
        200: unknown
      }
    }
  }
  '/identity/{id}/{contract}/tag_predicate': {
    post: {
      req: {
        /**
         * address of deployed contract
         */
        contract: string
        /**
         * sql id
         */
        id: string
      }
      res: {
        200: unknown
      }
    }
  }
  '/identity/{id}/positions': {
    get: {
      req: {
        creator?: Identifier | null
        direction?: SortDirection | null
        /**
         * sql id,identity_id string, or vault number
         */
        id: Identifier
        limit?: number | null
        offset?: number | null
        page?: number | null
        positionDirection?: VaultType | null
        sortBy?: PositionSortColumn | null
        timeframe?: TimeFrame | null
        userWallet?: string | null
      }
      res: {
        /**
         * Get all identity positions
         */
        200: {
          data: Array<PositionPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/integration/healthcheck': {
    post: {
      res: {
        /**
         * return details on api integration health
         */
        200: {
          alchemy_tx_parsed?: string | null
          cloudinary_cache?: string | null
          last_block_processed?: string | null
        }
      }
    }
  }
  '/invite_codes/redeem': {
    post: {
      req: {
        requestBody: RedeemBody
      }
      res: {
        /**
         * Associate valid invite code with current user
         */
        200: unknown
      }
    }
  }
  '/linked_accounts': {
    get: {
      req: {
        accountType?: string | null
        address?: string | null
        chainType?: string | null
        connectorType?: string | null
        direction?: SortDirection | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        privyId?: string | null
        sortBy?: SortColumn | null
        userId?: string | null
        walletClient?: string | null
        walletClientType?: string | null
      }
      res: {
        /**
         * Get all linked accounts in paginated list
         */
        200: {
          data: Array<LinkedAccountPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
    post: {
      req: {
        requestBody: NewLinkedAccount
      }
      res: {
        /**
         * Create a new LinkedAccount for a user
         */
        200: {
          account_type: string
          active?: boolean
          add_points?: boolean
          address?: string | null
          chain_type?: string | null
          connector_type?: string | null
          link_id: string
          privy_id?: string | null
          user_id: string
          verified_at?: string | null
          wallet_client?: string | null
          wallet_client_type?: string | null
        }
      }
    }
  }
  '/linked_accounts/{identifier}': {
    get: {
      req: {
        /**
         * LinkedAccount sql id or link id str
         */
        identifier: Identifier
      }
      res: {
        /**
         * Get single linked account by id
         */
        200: {
          account_type?: string | null
          active?: boolean
          address?: string | null
          chain_type?: string | null
          connector_type?: string | null
          created_at: string
          description?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          link_id: string
          privy_id?: string | null
          total?: number | null
          updated_at: string
          user_id: string
          verified_at: string
          wallet: string
          wallet_client?: string | null
          wallet_client_type?: string | null
        }
      }
    }
  }
  '/linked_accounts/{identifier}/activate': {
    put: {
      req: {
        /**
         * sql id or link id str
         */
        identifier: Identifier
      }
      res: {
        /**
         * Activate linked account
         */
        200: {
          active?: boolean
          address?: string | null
          chain_type?: string | null
          connector_type?: string | null
          created_at: string
          id: string
          link_id: string
          privy_id?: string | null
          type: string
          updated_at: string
          user_id: string
          verified_at?: string | null
          wallet_client?: string | null
          wallet_client_type?: string | null
        }
      }
    }
  }
  '/linked_accounts/{identifier}/deactivate': {
    put: {
      req: {
        /**
         * LinkedAccount sql id or link id str
         */
        identifier: Identifier
      }
      res: {
        /**
         * Deactivate linked account
         */
        200: {
          active?: boolean
          address?: string | null
          chain_type?: string | null
          connector_type?: string | null
          created_at: string
          id: string
          link_id: string
          privy_id?: string | null
          type: string
          updated_at: string
          user_id: string
          verified_at?: string | null
          wallet_client?: string | null
          wallet_client_type?: string | null
        }
      }
    }
  }
  '/missed_transactions': {
    get: {
      req: {
        /**
         * The starting cursor
         */
        after: string | null
        /**
         * The amount of results we are returning
         */
        limit: string | null
        /**
         * The block timestamp to use as the starting point to look for missing transactions
         */
        startingBlockTimestamp: string | null
      }
      res: {
        /**
         * Process missed transactions
         */
        200: unknown
      }
    }
  }
  '/positions': {
    post: {
      req: {
        requestBody: NewPosition
      }
      res: {
        /**
         * Create a new position
         */
        200: {
          assets: string
          claim_id?: string | null
          contract: string
          conviction: string
          created_at: string
          creator: string
          creator_id?: string | null
          fee: string
          id: string
          identity_id?: string | null
          parent_table: ParentTable
          share_price: string
          status: Status
          updated_at: string
          value: string
          vault_id: string
          vault_type: VaultType
          vault_uuid?: string | null
        }
      }
    }
  }
  '/positions/search': {
    get: {
      req: {
        claim?: Identifier | null
        conviction?: number | null
        creator?: Identifier | null
        creatorId?: string | null
        identity?: Identifier | null
        paging: PaginatedRequest
        parentTable?: ParentTable | null
        sort: PositionSort
        status?: Status | null
        vault?: Identifier | null
        vaultType?: VaultType | null
        vaultUuid?: string | null
      }
      res: {
        /**
         * Search positions in paginated list
         */
        200: {
          data: Array<PositionPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/positions/summary': {
    get: {
      req: {
        claim?: Identifier | null
        conviction?: number | null
        creator?: Identifier | null
        creatorId?: string | null
        identity?: Identifier | null
        paging: PaginatedRequest
        parentTable?: ParentTable | null
        sort: PositionSort
        status?: Status | null
        vault?: Identifier | null
        vaultType?: VaultType | null
        vaultUuid?: string | null
      }
      res: {
        /**
         * Summary of summary values based on query
         */
        200: {
          assets: string
          conviction: string
          fee: string
          total: number
          value: string
        }
      }
    }
  }
  '/positions/{id}': {
    get: {
      req: {
        /**
         * Position sql id or vault number
         */
        id: Identifier
      }
      res: {
        /**
         * Get single position by id
         */
        200: {
          assets: string
          claim_id?: string | null
          contract: string
          conviction: string
          created_at: string
          creator: string
          creator_id?: string | null
          fee: string
          id: string
          identity_id?: string | null
          parent_table: ParentTable
          share_price: string
          status: Status
          updated_at: string
          value: string
          vault_id: string
          vault_type: VaultType
          vault_uuid?: string | null
        }
      }
    }
    post: {
      req: {
        /**
         * Position sql id
         */
        id: string
        requestBody: UpdatePosition
      }
      res: {
        /**
         * Update an position
         */
        200: {
          assets: string
          claim_id?: string | null
          contract: string
          conviction: string
          created_at: string
          creator: string
          creator_id?: string | null
          fee: string
          id: string
          identity_id?: string | null
          parent_table: ParentTable
          share_price: string
          status: Status
          updated_at: string
          value: string
          vault_id: string
          vault_type: VaultType
          vault_uuid?: string | null
        }
      }
    }
  }
  '/positions/{id}/reconcile': {
    post: {
      req: {
        /**
         * position's id in sql
         */
        id: string
      }
      res: {
        /**
         * Update out of sync position data
         */
        200: {
          assets: string
          claim_id?: string | null
          contract: string
          conviction: string
          created_at: string
          creator: string
          creator_id?: string | null
          fee: string
          id: string
          identity_id?: string | null
          parent_table: ParentTable
          share_price: string
          status: Status
          updated_at: string
          value: string
          vault_id: string
          vault_type: VaultType
          vault_uuid?: string | null
        }
      }
    }
  }
  '/query_builder': {
    get: {
      res: {
        /**
         * Return the query builder data structure for use with FE typeahead
         */
        200: unknown
      }
    }
    post: {
      req: {
        requestBody: DataSetQuery
      }
      res: {
        /**
         * Return query results if the query in body is valid
         */
        200:
          | IdentityPaginatedResponse
          | ClaimPaginatedResponse
          | PositionPaginatedResponse
      }
    }
  }
  '/quest': {
    post: {
      req: {
        requestBody: NewQuest
      }
      res: {
        /**
         * Create a new quest
         */
        200: {
          active: boolean
          closing_content?: string | null
          condition: QuestCondition
          content?: string | null
          created_at: string
          depends_on_narrative?: QuestNarrative | null
          depends_on_quest?: string | null
          description?: string | null
          id: string
          image: string
          narrative: QuestNarrative
          points: number
          position?: number | null
          summary?: string | null
          title?: string | null
          updated_at: string
        }
      }
    }
  }
  '/quest/search': {
    post: {
      req: {
        requestBody: QuestQuery
      }
      res: {
        /**
         * Return information about quests
         */
        200: {
          data: Array<QuestPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/quest/{quest_id}': {
    get: {
      req: {
        /**
         * Quest SQL id
         */
        questId: string
      }
      res: {
        /**
         * Return information about a quest
         */
        200: {
          active: boolean
          closing_content?: string | null
          condition: QuestCondition
          content?: string | null
          created_at: string
          depends_on_narrative?: QuestNarrative | null
          depends_on_quest?: string | null
          description?: string | null
          id: string
          image: string
          narrative: QuestNarrative
          points: number
          position?: number | null
          summary?: string | null
          title?: string | null
          updated_at: string
        }
      }
    }
    put: {
      req: {
        /**
         * Quest SQL id
         */
        questId: string
        requestBody: UpdateQuest
      }
      res: {
        /**
         * Update an already existing quest
         */
        200: {
          active: boolean
          closing_content?: string | null
          condition: QuestCondition
          content?: string | null
          created_at: string
          depends_on_narrative?: QuestNarrative | null
          depends_on_quest?: string | null
          description?: string | null
          id: string
          image: string
          narrative: QuestNarrative
          points: number
          position?: number | null
          summary?: string | null
          title?: string | null
          updated_at: string
        }
      }
    }
    delete: {
      req: {
        /**
         * Quest SQL id
         */
        questId: string
      }
      res: {
        /**
         * Delete the informed quest
         */
        200: {
          active: boolean
          closing_content?: string | null
          condition: QuestCondition
          content?: string | null
          created_at: string
          depends_on_narrative?: QuestNarrative | null
          depends_on_quest?: string | null
          description?: string | null
          id: string
          image: string
          narrative: QuestNarrative
          points: number
          position?: number | null
          summary?: string | null
          title?: string | null
          updated_at: string
        }
      }
    }
  }
  '/user_quest/quest/{quest_id}': {
    get: {
      req: {
        questId: string
      }
      res: {
        /**
         * Get the user quest associated with the quest id and the user
         */
        200: {
          date_completed?: string | null
          date_started: string
          id: string
          point_multiplier: number
          progress: number
          quest_completion_object_id?: string | null
          quest_condition: QuestCondition
          quest_id: string
          status: QuestStatus
          user_id: string
        }
      }
    }
  }
  '/user_quest/search': {
    post: {
      req: {
        requestBody: UserQuestQuery
      }
      res: {
        /**
         * Filter quests
         */
        200: {
          data: Array<UserQuest>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/user_quest/{quest_id}/check': {
    get: {
      req: {
        /**
         * Quest SQL id
         */
        questId: string
      }
      res: {
        /**
         * Check if user is eligible to complete the quest, returning the quest status
         */
        200: 'NotStarted' | 'Started' | 'Completed' | 'WithDrawn' | 'Claimable'
      }
    }
  }
  '/user_quest/{quest_id}/complete': {
    post: {
      req: {
        /**
         * Quest SQL id
         */
        questId: string
      }
      res: {
        /**
         * Complete a quest for the authenticated user
         */
        200: {
          date_completed?: string | null
          date_started: string
          id: string
          point_multiplier: number
          progress: number
          quest_completion_object_id?: string | null
          quest_condition: QuestCondition
          quest_id: string
          status: QuestStatus
          user_id: string
        }
      }
    }
  }
  '/user_quest/{quest_id}/reset': {
    post: {
      req: {
        /**
         * Quest SQL id
         */
        questId: string
      }
      res: {
        /**
         * Reset a quest for the authenticated user
         */
        200: {
          date_completed?: string | null
          date_started: string
          id: string
          point_multiplier: number
          progress: number
          quest_completion_object_id?: string | null
          quest_condition: QuestCondition
          quest_id: string
          status: QuestStatus
          user_id: string
        }
      }
    }
  }
  '/user_quest/{quest_id}/start': {
    post: {
      req: {
        /**
         * Quest SQL id
         */
        questId: string
      }
      res: {
        /**
         * Start a quest for the authenticated user
         */
        200: {
          date_completed?: string | null
          date_started: string
          id: string
          point_multiplier: number
          progress: number
          quest_completion_object_id?: string | null
          quest_condition: QuestCondition
          quest_id: string
          status: QuestStatus
          user_id: string
        }
      }
    }
  }
  '/user_quest/{user_quest_id}': {
    get: {
      req: {
        /**
         * User quest SQL id
         */
        userQuestId: string
      }
      res: {
        /**
         * Search user quest for user
         */
        200: {
          date_completed?: string | null
          date_started: string
          id: string
          point_multiplier: number
          progress: number
          quest_completion_object_id?: string | null
          quest_condition: QuestCondition
          quest_id: string
          status: QuestStatus
          user_id: string
        }
      }
    }
  }
  '/users': {
    get: {
      req: {
        direction?: SortDirection | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        sortBy?: SortColumn | null
      }
      res: {
        /**
         * Get all users in paginated list
         */
        200: {
          data: Array<UserPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
    post: {
      req: {
        requestBody: UpsertUser
      }
      res: {
        /**
         * Create a new user
         */
        200: {
          api_key?: string | null
          created_at: string
          description?: string | null
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          invite_code?: string | null
          last_login?: string | null
          nft_points: number
          privy_id?: string | null
          protocol_points: number
          quest_points: number
          referral_points: number
          role: Role
          social_points: number
          total_points: number
          updated_at: string
          wallet: string
        }
      }
    }
  }
  '/users/apikey': {
    post: {
      res: {
        /**
         * Re-issue API key
         */
        200: {
          api_key?: string | null
          created_at: string
          description?: string | null
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          invite_code?: string | null
          last_login?: string | null
          nft_points: number
          privy_id?: string | null
          protocol_points: number
          quest_points: number
          referral_points: number
          role: Role
          social_points: number
          total_points: number
          updated_at: string
          wallet: string
        }
      }
    }
  }
  '/users/claims': {
    get: {
      req: {
        direction?: SortDirection | null
        displayName?: string | null
        limit?: number | null
        object?: Identifier | null
        offset?: number | null
        page?: number | null
        predicate?: Identifier | null
        showEmptyPosition?: boolean | null
        sortBy?: ClaimSortColumn | null
        subject?: Identifier | null
        timeframe?: TimeFrame | null
        user?: Identifier | null
      }
      res: {
        /**
         * Get claims user has position on
         */
        200: {
          data: Array<ClaimPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/users/claims/v2': {
    get: {
      req: {
        direction?: SortDirection | null
        displayName?: string | null
        limit?: number | null
        object?: Identifier | null
        offset?: number | null
        page?: number | null
        predicate?: Identifier | null
        showEmptyPosition?: boolean | null
        sortBy?: ClaimSortColumn | null
        subject?: Identifier | null
        timeframe?: TimeFrame | null
        user?: Identifier | null
      }
      res: {
        /**
         * Get claims user has position on
         */
        200: {
          data: Array<ClaimPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/users/identities': {
    get: {
      req: {
        direction?: SortDirection | null
        displayName?: string | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        sortBy?: SortColumn | null
        timeframe?: TimeFrame | null
        user?: Identifier | null
      }
      res: {
        /**
         * Get identities user has position on
         */
        200: {
          data: Array<IdentityPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/users/identities/v2': {
    get: {
      req: {
        direction?: SortDirection | null
        displayName?: string | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        sortBy?: SortColumn | null
        timeframe?: TimeFrame | null
        user?: Identifier | null
      }
      res: {
        /**
         * Get identities user has position on
         */
        200: {
          data: Array<IdentityPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/users/points': {
    post: {
      req: {
        requestBody: UsersPointsRequest
      }
      res: {
        /**
         * Allocate Points to multiple users
         */
        200: Array<{
          created_at: string
          id: string
          point_type: PointType
          points: number
          updated_at: string
          user_id?: string | null
          wallet: string
        }>
      }
    }
  }
  '/users/positions': {
    get: {
      req: {
        direction?: SortDirection | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        showEmptyPosition?: boolean | null
        sortBy?: PositionSortColumn | null
        user?: Identifier | null
      }
      res: {
        /**
         * Get positions for user
         */
        200: {
          data: Array<PositionPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/users/totals': {
    get: {
      req: {
        direction?: SortDirection | null
        limit?: number | null
        offset?: number | null
        page?: number | null
        sortBy?: SortColumn | null
        timeframe?: TimeFrame | null
      }
      res: {
        /**
         * Get total position values for paginated set of users
         */
        200: {
          data: Array<UserTotalsPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/users/wallet/{wallet}': {
    get: {
      req: {
        /**
         * User wallet
         */
        wallet: string
      }
      res: {
        /**
         * Get single user by id
         */
        200: {
          api_key?: string | null
          created_at: string
          description?: string | null
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          invite_code?: string | null
          last_login?: string | null
          nft_points: number
          privy_id?: string | null
          protocol_points: number
          quest_points: number
          referral_points: number
          role: Role
          social_points: number
          total_points: number
          updated_at: string
          wallet: string
        }
      }
    }
  }
  '/users/wallet/{wallet}/private': {
    get: {
      req: {
        /**
         * User wallet
         */
        wallet: string
      }
      res: {
        /**
         * Get single user by id
         */
        200: {
          api_key?: string | null
          created_at: string
          description?: string | null
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          invite_code?: string | null
          last_login?: string | null
          nft_points: number
          privy_id?: string | null
          protocol_points: number
          quest_points: number
          referral_points: number
          role: Role
          social_points: number
          total_points: number
          updated_at: string
          wallet: string
        }
      }
    }
  }
  '/users/{identifier}/points': {
    put: {
      req: {
        /**
         * User sql id or wallet
         */
        identifier: Identifier
        requestBody: PointsRequest
      }
      res: {
        /**
         * Add points for user
         */
        200: {
          created_at: string
          id: string
          point_type: PointType
          points: number
          updated_at: string
          user_id?: string | null
          wallet: string
        }
      }
    }
  }
  '/users/{id}': {
    get: {
      req: {
        /**
         * User sql id
         */
        id: string
      }
      res: {
        /**
         * Get single user by id
         */
        200: {
          api_key?: string | null
          created_at: string
          description?: string | null
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          invite_code?: string | null
          last_login?: string | null
          nft_points: number
          privy_id?: string | null
          protocol_points: number
          quest_points: number
          referral_points: number
          role: Role
          social_points: number
          total_points: number
          updated_at: string
          wallet: string
        }
      }
    }
    put: {
      req: {
        /**
         * User sql id
         */
        id: string
        requestBody: UpsertUser
      }
      res: {
        /**
         * Update a user
         */
        200: {
          api_key?: string | null
          created_at: string
          description?: string | null
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          invite_code?: string | null
          last_login?: string | null
          nft_points: number
          privy_id?: string | null
          protocol_points: number
          quest_points: number
          referral_points: number
          role: Role
          social_points: number
          total_points: number
          updated_at: string
          wallet: string
        }
      }
    }
    delete: {
      req: {
        /**
         * Id of user to delete
         */
        id: string
      }
      res: {
        /**
         * Delete a user by id
         */
        200: {
          api_key?: string | null
          created_at: string
          description?: string | null
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          invite_code?: string | null
          last_login?: string | null
          nft_points: number
          privy_id?: string | null
          protocol_points: number
          quest_points: number
          referral_points: number
          role: Role
          social_points: number
          total_points: number
          updated_at: string
          wallet: string
        }
      }
    }
  }
  '/users/{id}/ens': {
    put: {
      req: {
        /**
         * User sql id or wallet
         */
        id: Identifier
      }
      res: {
        /**
         * Update a users ens if present
         */
        200: {
          api_key?: string | null
          created_at: string
          description?: string | null
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          invite_code?: string | null
          last_login?: string | null
          nft_points: number
          privy_id?: string | null
          protocol_points: number
          quest_points: number
          referral_points: number
          role: Role
          social_points: number
          total_points: number
          updated_at: string
          wallet: string
        }
      }
    }
  }
  '/users/{id}/invite_codes': {
    get: {
      req: {
        /**
         * User sql id
         */
        id: string
      }
      res: {
        /**
         * Invite codes created for user
         */
        200: {
          invite_codes: Array<InviteCodePresenter>
        }
      }
    }
    post: {
      req: {
        /**
         * User sql id
         */
        id: string
      }
      res: {
        /**
         * Invite codes created for user
         */
        200: {
          invite_codes: Array<InviteCodePresenter>
        }
      }
    }
  }
  '/users/{id}/linked_accounts': {
    get: {
      req: {
        /**
         * User sql id
         */
        id: string
      }
      res: {
        /**
         * Get linked accounts for user
         */
        200: {
          data: Array<LinkedAccountPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/users/{id}/private': {
    get: {
      req: {
        /**
         * User sql id
         */
        id: string
      }
      res: {
        /**
         * Get single user by id
         */
        200: {
          api_key?: string | null
          created_at: string
          description?: string | null
          did?: string | null
          display_name?: string | null
          ens_name?: string | null
          id: string
          image?: string | null
          invite_code?: string | null
          last_login?: string | null
          nft_points: number
          privy_id?: string | null
          protocol_points: number
          quest_points: number
          referral_points: number
          role: Role
          social_points: number
          total_points: number
          updated_at: string
          wallet: string
        }
      }
    }
  }
  '/users/{id}/tags': {
    get: {
      req: {
        /**
         * User sql id or wallet
         */
        id: Identifier
      }
      res: {
        /**
         * get identities tagged by user
         */
        200: {
          data: Array<IdentityPresenter>
          limit: number
          page: number
          total: number
        }
      }
    }
  }
  '/users/{id}/totals': {
    get: {
      req: {
        direction?: SortDirection | null
        /**
         * User sql id
         */
        id: string
        limit?: number | null
        offset?: number | null
        page?: number | null
        sortBy?: SortColumn | null
        timeframe?: TimeFrame | null
      }
      res: {
        /**
         * Get total position values for user
         */
        200: {
          created_at?: string | null
          description?: string | null
          display_name?: string | null
          ens_name?: string | null
          followed_assets: string
          followed_count: number
          follower_count: number
          id?: string | null
          image?: string | null
          last_login?: string | null
          nft_points: number
          privy_id?: string | null
          protocol_points: number
          quest_points: number
          referral_points: number
          total?: number | null
          total_claims: number
          total_delta: string
          total_entry_fees: string
          total_exit_fees: string
          total_identities: number
          total_points: number
          total_position_value: string
          total_position_value_against_claims: string
          total_position_value_for_claims: string
          total_position_value_on_claims: string
          total_position_value_on_identities: string
          total_positions: number
          total_positions_against_claims: number
          total_positions_for_claims: number
          total_positions_on_claims: number
          total_positions_on_identities: number
          total_protocol_fee_paid: string
          updated_at?: string | null
          wallet: string
        }
      }
    }
  }
  '/webhooks': {
    post: {
      req: {
        requestBody: CreateWebhook
      }
      res: {
        /**
         * Add new alchemy webhook
         */
        200: unknown
      }
    }
  }
}
