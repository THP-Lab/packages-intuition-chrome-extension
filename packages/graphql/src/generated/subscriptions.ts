import * as Apollo from '@apollo/client'
import { DocumentNode } from 'graphql'

export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T,
> = { [_ in K]?: never }
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never
    }
const defaultOptions = {} as const
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string }
  String: { input: string; output: string }
  Boolean: { input: boolean; output: boolean }
  Int: { input: number; output: number }
  Float: { input: number; output: number }
  account_type: { input: any; output: any }
  atom_type: { input: any; output: any }
  bigint: { input: any; output: any }
  bytea: { input: any; output: any }
  event_type: { input: any; output: any }
  float8: { input: any; output: any }
  jsonb: { input: any; output: any }
  numeric: { input: any; output: any }
  term_type: { input: any; output: any }
  timestamptz: { input: any; output: any }
}

/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
export type Boolean_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['Boolean']['input']>
  _gt?: InputMaybe<Scalars['Boolean']['input']>
  _gte?: InputMaybe<Scalars['Boolean']['input']>
  _in?: InputMaybe<Array<Scalars['Boolean']['input']>>
  _is_null?: InputMaybe<Scalars['Boolean']['input']>
  _lt?: InputMaybe<Scalars['Boolean']['input']>
  _lte?: InputMaybe<Scalars['Boolean']['input']>
  _neq?: InputMaybe<Scalars['Boolean']['input']>
  _nin?: InputMaybe<Array<Scalars['Boolean']['input']>>
}

/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
export type Int_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['Int']['input']>
  _gt?: InputMaybe<Scalars['Int']['input']>
  _gte?: InputMaybe<Scalars['Int']['input']>
  _in?: InputMaybe<Array<Scalars['Int']['input']>>
  _is_null?: InputMaybe<Scalars['Boolean']['input']>
  _lt?: InputMaybe<Scalars['Int']['input']>
  _lte?: InputMaybe<Scalars['Int']['input']>
  _neq?: InputMaybe<Scalars['Int']['input']>
  _nin?: InputMaybe<Array<Scalars['Int']['input']>>
}

export type PinOrganizationInput = {
  description?: InputMaybe<Scalars['String']['input']>
  email?: InputMaybe<Scalars['String']['input']>
  image?: InputMaybe<Scalars['String']['input']>
  name?: InputMaybe<Scalars['String']['input']>
  url?: InputMaybe<Scalars['String']['input']>
}

export type PinOutput = {
  __typename?: 'PinOutput'
  uri?: Maybe<Scalars['String']['output']>
}

export type PinPersonInput = {
  description?: InputMaybe<Scalars['String']['input']>
  email?: InputMaybe<Scalars['String']['input']>
  identifier?: InputMaybe<Scalars['String']['input']>
  image?: InputMaybe<Scalars['String']['input']>
  name?: InputMaybe<Scalars['String']['input']>
  url?: InputMaybe<Scalars['String']['input']>
}

export type PinThingInput = {
  description?: InputMaybe<Scalars['String']['input']>
  image?: InputMaybe<Scalars['String']['input']>
  name?: InputMaybe<Scalars['String']['input']>
  url?: InputMaybe<Scalars['String']['input']>
}

/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
export type String_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['String']['input']>
  _gt?: InputMaybe<Scalars['String']['input']>
  _gte?: InputMaybe<Scalars['String']['input']>
  /** does the column match the given case-insensitive pattern */
  _ilike?: InputMaybe<Scalars['String']['input']>
  _in?: InputMaybe<Array<Scalars['String']['input']>>
  /** does the column match the given POSIX regular expression, case insensitive */
  _iregex?: InputMaybe<Scalars['String']['input']>
  _is_null?: InputMaybe<Scalars['Boolean']['input']>
  /** does the column match the given pattern */
  _like?: InputMaybe<Scalars['String']['input']>
  _lt?: InputMaybe<Scalars['String']['input']>
  _lte?: InputMaybe<Scalars['String']['input']>
  _neq?: InputMaybe<Scalars['String']['input']>
  /** does the column NOT match the given case-insensitive pattern */
  _nilike?: InputMaybe<Scalars['String']['input']>
  _nin?: InputMaybe<Array<Scalars['String']['input']>>
  /** does the column NOT match the given POSIX regular expression, case insensitive */
  _niregex?: InputMaybe<Scalars['String']['input']>
  /** does the column NOT match the given pattern */
  _nlike?: InputMaybe<Scalars['String']['input']>
  /** does the column NOT match the given POSIX regular expression, case sensitive */
  _nregex?: InputMaybe<Scalars['String']['input']>
  /** does the column NOT match the given SQL regular expression */
  _nsimilar?: InputMaybe<Scalars['String']['input']>
  /** does the column match the given POSIX regular expression, case sensitive */
  _regex?: InputMaybe<Scalars['String']['input']>
  /** does the column match the given SQL regular expression */
  _similar?: InputMaybe<Scalars['String']['input']>
}

/** Boolean expression to compare columns of type "account_type". All fields are combined with logical 'AND'. */
export type Account_Type_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['account_type']['input']>
  _gt?: InputMaybe<Scalars['account_type']['input']>
  _gte?: InputMaybe<Scalars['account_type']['input']>
  _in?: InputMaybe<Array<Scalars['account_type']['input']>>
  _is_null?: InputMaybe<Scalars['Boolean']['input']>
  _lt?: InputMaybe<Scalars['account_type']['input']>
  _lte?: InputMaybe<Scalars['account_type']['input']>
  _neq?: InputMaybe<Scalars['account_type']['input']>
  _nin?: InputMaybe<Array<Scalars['account_type']['input']>>
}

/** columns and relationships of "account" */
export type Accounts = {
  __typename?: 'accounts'
  /** An object relationship */
  atom?: Maybe<Atoms>
  atom_id?: Maybe<Scalars['numeric']['output']>
  /** An array relationship */
  atoms: Array<Atoms>
  /** An aggregate relationship */
  atoms_aggregate: Atoms_Aggregate
  cached_image?: Maybe<Cached_Images_Cached_Image>
  /** An array relationship */
  claims: Array<Claims>
  /** An aggregate relationship */
  claims_aggregate: Claims_Aggregate
  /** An array relationship */
  deposits_received: Array<Deposits>
  /** An aggregate relationship */
  deposits_received_aggregate: Deposits_Aggregate
  /** An array relationship */
  deposits_sent: Array<Deposits>
  /** An aggregate relationship */
  deposits_sent_aggregate: Deposits_Aggregate
  /** An array relationship */
  fee_transfers: Array<Fee_Transfers>
  /** An aggregate relationship */
  fee_transfers_aggregate: Fee_Transfers_Aggregate
  id: Scalars['String']['output']
  image?: Maybe<Scalars['String']['output']>
  label: Scalars['String']['output']
  /** An array relationship */
  positions: Array<Positions>
  /** An aggregate relationship */
  positions_aggregate: Positions_Aggregate
  /** An array relationship */
  redemptions_received: Array<Redemptions>
  /** An aggregate relationship */
  redemptions_received_aggregate: Redemptions_Aggregate
  /** An array relationship */
  redemptions_sent: Array<Redemptions>
  /** An aggregate relationship */
  redemptions_sent_aggregate: Redemptions_Aggregate
  /** An array relationship */
  signals: Array<Signals>
  /** An aggregate relationship */
  signals_aggregate: Signals_Aggregate
  /** An array relationship */
  triples: Array<Triples>
  /** An aggregate relationship */
  triples_aggregate: Triples_Aggregate
  type: Scalars['account_type']['output']
}

/** columns and relationships of "account" */
export type AccountsAtomsArgs = {
  distinct_on?: InputMaybe<Array<Atoms_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Atoms_Order_By>>
  where?: InputMaybe<Atoms_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsAtoms_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Atoms_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Atoms_Order_By>>
  where?: InputMaybe<Atoms_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsClaimsArgs = {
  distinct_on?: InputMaybe<Array<Claims_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Claims_Order_By>>
  where?: InputMaybe<Claims_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsClaims_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Claims_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Claims_Order_By>>
  where?: InputMaybe<Claims_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsDeposits_ReceivedArgs = {
  distinct_on?: InputMaybe<Array<Deposits_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Deposits_Order_By>>
  where?: InputMaybe<Deposits_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsDeposits_Received_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Deposits_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Deposits_Order_By>>
  where?: InputMaybe<Deposits_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsDeposits_SentArgs = {
  distinct_on?: InputMaybe<Array<Deposits_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Deposits_Order_By>>
  where?: InputMaybe<Deposits_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsDeposits_Sent_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Deposits_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Deposits_Order_By>>
  where?: InputMaybe<Deposits_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsFee_TransfersArgs = {
  distinct_on?: InputMaybe<Array<Fee_Transfers_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Fee_Transfers_Order_By>>
  where?: InputMaybe<Fee_Transfers_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsFee_Transfers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Fee_Transfers_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Fee_Transfers_Order_By>>
  where?: InputMaybe<Fee_Transfers_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsPositionsArgs = {
  distinct_on?: InputMaybe<Array<Positions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Positions_Order_By>>
  where?: InputMaybe<Positions_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsPositions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Positions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Positions_Order_By>>
  where?: InputMaybe<Positions_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsRedemptions_ReceivedArgs = {
  distinct_on?: InputMaybe<Array<Redemptions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Redemptions_Order_By>>
  where?: InputMaybe<Redemptions_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsRedemptions_Received_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Redemptions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Redemptions_Order_By>>
  where?: InputMaybe<Redemptions_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsRedemptions_SentArgs = {
  distinct_on?: InputMaybe<Array<Redemptions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Redemptions_Order_By>>
  where?: InputMaybe<Redemptions_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsRedemptions_Sent_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Redemptions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Redemptions_Order_By>>
  where?: InputMaybe<Redemptions_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsSignalsArgs = {
  distinct_on?: InputMaybe<Array<Signals_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Signals_Order_By>>
  where?: InputMaybe<Signals_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsSignals_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Signals_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Signals_Order_By>>
  where?: InputMaybe<Signals_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsTriplesArgs = {
  distinct_on?: InputMaybe<Array<Triples_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Triples_Order_By>>
  where?: InputMaybe<Triples_Bool_Exp>
}

/** columns and relationships of "account" */
export type AccountsTriples_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Triples_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Triples_Order_By>>
  where?: InputMaybe<Triples_Bool_Exp>
}

/** aggregated selection of "account" */
export type Accounts_Aggregate = {
  __typename?: 'accounts_aggregate'
  aggregate?: Maybe<Accounts_Aggregate_Fields>
  nodes: Array<Accounts>
}

export type Accounts_Aggregate_Bool_Exp = {
  count?: InputMaybe<Accounts_Aggregate_Bool_Exp_Count>
}

export type Accounts_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Accounts_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
  filter?: InputMaybe<Accounts_Bool_Exp>
  predicate: Int_Comparison_Exp
}

/** aggregate fields of "account" */
export type Accounts_Aggregate_Fields = {
  __typename?: 'accounts_aggregate_fields'
  avg?: Maybe<Accounts_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Accounts_Max_Fields>
  min?: Maybe<Accounts_Min_Fields>
  stddev?: Maybe<Accounts_Stddev_Fields>
  stddev_pop?: Maybe<Accounts_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Accounts_Stddev_Samp_Fields>
  sum?: Maybe<Accounts_Sum_Fields>
  var_pop?: Maybe<Accounts_Var_Pop_Fields>
  var_samp?: Maybe<Accounts_Var_Samp_Fields>
  variance?: Maybe<Accounts_Variance_Fields>
}

/** aggregate fields of "account" */
export type Accounts_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Accounts_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** order by aggregate values of table "account" */
export type Accounts_Aggregate_Order_By = {
  avg?: InputMaybe<Accounts_Avg_Order_By>
  count?: InputMaybe<Order_By>
  max?: InputMaybe<Accounts_Max_Order_By>
  min?: InputMaybe<Accounts_Min_Order_By>
  stddev?: InputMaybe<Accounts_Stddev_Order_By>
  stddev_pop?: InputMaybe<Accounts_Stddev_Pop_Order_By>
  stddev_samp?: InputMaybe<Accounts_Stddev_Samp_Order_By>
  sum?: InputMaybe<Accounts_Sum_Order_By>
  var_pop?: InputMaybe<Accounts_Var_Pop_Order_By>
  var_samp?: InputMaybe<Accounts_Var_Samp_Order_By>
  variance?: InputMaybe<Accounts_Variance_Order_By>
}

/** aggregate avg on columns */
export type Accounts_Avg_Fields = {
  __typename?: 'accounts_avg_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
}

/** order by avg() on columns of table "account" */
export type Accounts_Avg_Order_By = {
  atom_id?: InputMaybe<Order_By>
}

/** Boolean expression to filter rows from the table "account". All fields are combined with a logical 'AND'. */
export type Accounts_Bool_Exp = {
  _and?: InputMaybe<Array<Accounts_Bool_Exp>>
  _not?: InputMaybe<Accounts_Bool_Exp>
  _or?: InputMaybe<Array<Accounts_Bool_Exp>>
  atom?: InputMaybe<Atoms_Bool_Exp>
  atom_id?: InputMaybe<Numeric_Comparison_Exp>
  atoms?: InputMaybe<Atoms_Bool_Exp>
  atoms_aggregate?: InputMaybe<Atoms_Aggregate_Bool_Exp>
  claims?: InputMaybe<Claims_Bool_Exp>
  claims_aggregate?: InputMaybe<Claims_Aggregate_Bool_Exp>
  deposits_received?: InputMaybe<Deposits_Bool_Exp>
  deposits_received_aggregate?: InputMaybe<Deposits_Aggregate_Bool_Exp>
  deposits_sent?: InputMaybe<Deposits_Bool_Exp>
  deposits_sent_aggregate?: InputMaybe<Deposits_Aggregate_Bool_Exp>
  fee_transfers?: InputMaybe<Fee_Transfers_Bool_Exp>
  fee_transfers_aggregate?: InputMaybe<Fee_Transfers_Aggregate_Bool_Exp>
  id?: InputMaybe<String_Comparison_Exp>
  image?: InputMaybe<String_Comparison_Exp>
  label?: InputMaybe<String_Comparison_Exp>
  positions?: InputMaybe<Positions_Bool_Exp>
  positions_aggregate?: InputMaybe<Positions_Aggregate_Bool_Exp>
  redemptions_received?: InputMaybe<Redemptions_Bool_Exp>
  redemptions_received_aggregate?: InputMaybe<Redemptions_Aggregate_Bool_Exp>
  redemptions_sent?: InputMaybe<Redemptions_Bool_Exp>
  redemptions_sent_aggregate?: InputMaybe<Redemptions_Aggregate_Bool_Exp>
  signals?: InputMaybe<Signals_Bool_Exp>
  signals_aggregate?: InputMaybe<Signals_Aggregate_Bool_Exp>
  triples?: InputMaybe<Triples_Bool_Exp>
  triples_aggregate?: InputMaybe<Triples_Aggregate_Bool_Exp>
  type?: InputMaybe<Account_Type_Comparison_Exp>
}

/** aggregate max on columns */
export type Accounts_Max_Fields = {
  __typename?: 'accounts_max_fields'
  atom_id?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['String']['output']>
  image?: Maybe<Scalars['String']['output']>
  label?: Maybe<Scalars['String']['output']>
  type?: Maybe<Scalars['account_type']['output']>
}

/** order by max() on columns of table "account" */
export type Accounts_Max_Order_By = {
  atom_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  image?: InputMaybe<Order_By>
  label?: InputMaybe<Order_By>
  type?: InputMaybe<Order_By>
}

/** aggregate min on columns */
export type Accounts_Min_Fields = {
  __typename?: 'accounts_min_fields'
  atom_id?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['String']['output']>
  image?: Maybe<Scalars['String']['output']>
  label?: Maybe<Scalars['String']['output']>
  type?: Maybe<Scalars['account_type']['output']>
}

/** order by min() on columns of table "account" */
export type Accounts_Min_Order_By = {
  atom_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  image?: InputMaybe<Order_By>
  label?: InputMaybe<Order_By>
  type?: InputMaybe<Order_By>
}

/** Ordering options when selecting data from "account". */
export type Accounts_Order_By = {
  atom?: InputMaybe<Atoms_Order_By>
  atom_id?: InputMaybe<Order_By>
  atoms_aggregate?: InputMaybe<Atoms_Aggregate_Order_By>
  claims_aggregate?: InputMaybe<Claims_Aggregate_Order_By>
  deposits_received_aggregate?: InputMaybe<Deposits_Aggregate_Order_By>
  deposits_sent_aggregate?: InputMaybe<Deposits_Aggregate_Order_By>
  fee_transfers_aggregate?: InputMaybe<Fee_Transfers_Aggregate_Order_By>
  id?: InputMaybe<Order_By>
  image?: InputMaybe<Order_By>
  label?: InputMaybe<Order_By>
  positions_aggregate?: InputMaybe<Positions_Aggregate_Order_By>
  redemptions_received_aggregate?: InputMaybe<Redemptions_Aggregate_Order_By>
  redemptions_sent_aggregate?: InputMaybe<Redemptions_Aggregate_Order_By>
  signals_aggregate?: InputMaybe<Signals_Aggregate_Order_By>
  triples_aggregate?: InputMaybe<Triples_Aggregate_Order_By>
  type?: InputMaybe<Order_By>
}

/** select columns of table "account" */
export enum Accounts_Select_Column {
  /** column name */
  AtomId = 'atom_id',
  /** column name */
  Id = 'id',
  /** column name */
  Image = 'image',
  /** column name */
  Label = 'label',
  /** column name */
  Type = 'type',
}

/** aggregate stddev on columns */
export type Accounts_Stddev_Fields = {
  __typename?: 'accounts_stddev_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev() on columns of table "account" */
export type Accounts_Stddev_Order_By = {
  atom_id?: InputMaybe<Order_By>
}

/** aggregate stddev_pop on columns */
export type Accounts_Stddev_Pop_Fields = {
  __typename?: 'accounts_stddev_pop_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_pop() on columns of table "account" */
export type Accounts_Stddev_Pop_Order_By = {
  atom_id?: InputMaybe<Order_By>
}

/** aggregate stddev_samp on columns */
export type Accounts_Stddev_Samp_Fields = {
  __typename?: 'accounts_stddev_samp_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_samp() on columns of table "account" */
export type Accounts_Stddev_Samp_Order_By = {
  atom_id?: InputMaybe<Order_By>
}

/** Streaming cursor of the table "accounts" */
export type Accounts_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Accounts_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Accounts_Stream_Cursor_Value_Input = {
  atom_id?: InputMaybe<Scalars['numeric']['input']>
  id?: InputMaybe<Scalars['String']['input']>
  image?: InputMaybe<Scalars['String']['input']>
  label?: InputMaybe<Scalars['String']['input']>
  type?: InputMaybe<Scalars['account_type']['input']>
}

/** aggregate sum on columns */
export type Accounts_Sum_Fields = {
  __typename?: 'accounts_sum_fields'
  atom_id?: Maybe<Scalars['numeric']['output']>
}

/** order by sum() on columns of table "account" */
export type Accounts_Sum_Order_By = {
  atom_id?: InputMaybe<Order_By>
}

export type Accounts_That_Claim_About_Account_Args = {
  address?: InputMaybe<Scalars['String']['input']>
  predicate?: InputMaybe<Scalars['numeric']['input']>
  subject?: InputMaybe<Scalars['numeric']['input']>
}

/** aggregate var_pop on columns */
export type Accounts_Var_Pop_Fields = {
  __typename?: 'accounts_var_pop_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
}

/** order by var_pop() on columns of table "account" */
export type Accounts_Var_Pop_Order_By = {
  atom_id?: InputMaybe<Order_By>
}

/** aggregate var_samp on columns */
export type Accounts_Var_Samp_Fields = {
  __typename?: 'accounts_var_samp_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
}

/** order by var_samp() on columns of table "account" */
export type Accounts_Var_Samp_Order_By = {
  atom_id?: InputMaybe<Order_By>
}

/** aggregate variance on columns */
export type Accounts_Variance_Fields = {
  __typename?: 'accounts_variance_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
}

/** order by variance() on columns of table "account" */
export type Accounts_Variance_Order_By = {
  atom_id?: InputMaybe<Order_By>
}

/** Boolean expression to compare columns of type "atom_type". All fields are combined with logical 'AND'. */
export type Atom_Type_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['atom_type']['input']>
  _gt?: InputMaybe<Scalars['atom_type']['input']>
  _gte?: InputMaybe<Scalars['atom_type']['input']>
  _in?: InputMaybe<Array<Scalars['atom_type']['input']>>
  _is_null?: InputMaybe<Scalars['Boolean']['input']>
  _lt?: InputMaybe<Scalars['atom_type']['input']>
  _lte?: InputMaybe<Scalars['atom_type']['input']>
  _neq?: InputMaybe<Scalars['atom_type']['input']>
  _nin?: InputMaybe<Array<Scalars['atom_type']['input']>>
}

/** columns and relationships of "atom_value" */
export type Atom_Values = {
  __typename?: 'atom_values'
  /** An object relationship */
  account?: Maybe<Accounts>
  account_id?: Maybe<Scalars['String']['output']>
  /** An object relationship */
  atom: Atoms
  /** An object relationship */
  book?: Maybe<Books>
  book_id?: Maybe<Scalars['numeric']['output']>
  /** An object relationship */
  byte_object?: Maybe<Byte_Object>
  byte_object_id?: Maybe<Scalars['numeric']['output']>
  /** An object relationship */
  caip10?: Maybe<Caip10>
  id: Scalars['numeric']['output']
  /** An object relationship */
  json_object?: Maybe<Json_Objects>
  json_object_id?: Maybe<Scalars['numeric']['output']>
  /** An object relationship */
  organization?: Maybe<Organizations>
  organization_id?: Maybe<Scalars['numeric']['output']>
  /** An object relationship */
  person?: Maybe<Persons>
  person_id?: Maybe<Scalars['numeric']['output']>
  /** An object relationship */
  text_object?: Maybe<Text_Objects>
  text_object_id?: Maybe<Scalars['numeric']['output']>
  /** An object relationship */
  thing?: Maybe<Things>
  thing_id?: Maybe<Scalars['numeric']['output']>
}

/** aggregated selection of "atom_value" */
export type Atom_Values_Aggregate = {
  __typename?: 'atom_values_aggregate'
  aggregate?: Maybe<Atom_Values_Aggregate_Fields>
  nodes: Array<Atom_Values>
}

/** aggregate fields of "atom_value" */
export type Atom_Values_Aggregate_Fields = {
  __typename?: 'atom_values_aggregate_fields'
  avg?: Maybe<Atom_Values_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Atom_Values_Max_Fields>
  min?: Maybe<Atom_Values_Min_Fields>
  stddev?: Maybe<Atom_Values_Stddev_Fields>
  stddev_pop?: Maybe<Atom_Values_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Atom_Values_Stddev_Samp_Fields>
  sum?: Maybe<Atom_Values_Sum_Fields>
  var_pop?: Maybe<Atom_Values_Var_Pop_Fields>
  var_samp?: Maybe<Atom_Values_Var_Samp_Fields>
  variance?: Maybe<Atom_Values_Variance_Fields>
}

/** aggregate fields of "atom_value" */
export type Atom_Values_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Atom_Values_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** aggregate avg on columns */
export type Atom_Values_Avg_Fields = {
  __typename?: 'atom_values_avg_fields'
  book_id?: Maybe<Scalars['Float']['output']>
  byte_object_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  json_object_id?: Maybe<Scalars['Float']['output']>
  organization_id?: Maybe<Scalars['Float']['output']>
  person_id?: Maybe<Scalars['Float']['output']>
  text_object_id?: Maybe<Scalars['Float']['output']>
  thing_id?: Maybe<Scalars['Float']['output']>
}

/** Boolean expression to filter rows from the table "atom_value". All fields are combined with a logical 'AND'. */
export type Atom_Values_Bool_Exp = {
  _and?: InputMaybe<Array<Atom_Values_Bool_Exp>>
  _not?: InputMaybe<Atom_Values_Bool_Exp>
  _or?: InputMaybe<Array<Atom_Values_Bool_Exp>>
  account?: InputMaybe<Accounts_Bool_Exp>
  account_id?: InputMaybe<String_Comparison_Exp>
  atom?: InputMaybe<Atoms_Bool_Exp>
  book?: InputMaybe<Books_Bool_Exp>
  book_id?: InputMaybe<Numeric_Comparison_Exp>
  byte_object?: InputMaybe<Byte_Object_Bool_Exp>
  byte_object_id?: InputMaybe<Numeric_Comparison_Exp>
  caip10?: InputMaybe<Caip10_Bool_Exp>
  id?: InputMaybe<Numeric_Comparison_Exp>
  json_object?: InputMaybe<Json_Objects_Bool_Exp>
  json_object_id?: InputMaybe<Numeric_Comparison_Exp>
  organization?: InputMaybe<Organizations_Bool_Exp>
  organization_id?: InputMaybe<Numeric_Comparison_Exp>
  person?: InputMaybe<Persons_Bool_Exp>
  person_id?: InputMaybe<Numeric_Comparison_Exp>
  text_object?: InputMaybe<Text_Objects_Bool_Exp>
  text_object_id?: InputMaybe<Numeric_Comparison_Exp>
  thing?: InputMaybe<Things_Bool_Exp>
  thing_id?: InputMaybe<Numeric_Comparison_Exp>
}

/** aggregate max on columns */
export type Atom_Values_Max_Fields = {
  __typename?: 'atom_values_max_fields'
  account_id?: Maybe<Scalars['String']['output']>
  book_id?: Maybe<Scalars['numeric']['output']>
  byte_object_id?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['numeric']['output']>
  json_object_id?: Maybe<Scalars['numeric']['output']>
  organization_id?: Maybe<Scalars['numeric']['output']>
  person_id?: Maybe<Scalars['numeric']['output']>
  text_object_id?: Maybe<Scalars['numeric']['output']>
  thing_id?: Maybe<Scalars['numeric']['output']>
}

/** aggregate min on columns */
export type Atom_Values_Min_Fields = {
  __typename?: 'atom_values_min_fields'
  account_id?: Maybe<Scalars['String']['output']>
  book_id?: Maybe<Scalars['numeric']['output']>
  byte_object_id?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['numeric']['output']>
  json_object_id?: Maybe<Scalars['numeric']['output']>
  organization_id?: Maybe<Scalars['numeric']['output']>
  person_id?: Maybe<Scalars['numeric']['output']>
  text_object_id?: Maybe<Scalars['numeric']['output']>
  thing_id?: Maybe<Scalars['numeric']['output']>
}

/** Ordering options when selecting data from "atom_value". */
export type Atom_Values_Order_By = {
  account?: InputMaybe<Accounts_Order_By>
  account_id?: InputMaybe<Order_By>
  atom?: InputMaybe<Atoms_Order_By>
  book?: InputMaybe<Books_Order_By>
  book_id?: InputMaybe<Order_By>
  byte_object?: InputMaybe<Byte_Object_Order_By>
  byte_object_id?: InputMaybe<Order_By>
  caip10?: InputMaybe<Caip10_Order_By>
  id?: InputMaybe<Order_By>
  json_object?: InputMaybe<Json_Objects_Order_By>
  json_object_id?: InputMaybe<Order_By>
  organization?: InputMaybe<Organizations_Order_By>
  organization_id?: InputMaybe<Order_By>
  person?: InputMaybe<Persons_Order_By>
  person_id?: InputMaybe<Order_By>
  text_object?: InputMaybe<Text_Objects_Order_By>
  text_object_id?: InputMaybe<Order_By>
  thing?: InputMaybe<Things_Order_By>
  thing_id?: InputMaybe<Order_By>
}

/** select columns of table "atom_value" */
export enum Atom_Values_Select_Column {
  /** column name */
  AccountId = 'account_id',
  /** column name */
  BookId = 'book_id',
  /** column name */
  ByteObjectId = 'byte_object_id',
  /** column name */
  Id = 'id',
  /** column name */
  JsonObjectId = 'json_object_id',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  PersonId = 'person_id',
  /** column name */
  TextObjectId = 'text_object_id',
  /** column name */
  ThingId = 'thing_id',
}

/** aggregate stddev on columns */
export type Atom_Values_Stddev_Fields = {
  __typename?: 'atom_values_stddev_fields'
  book_id?: Maybe<Scalars['Float']['output']>
  byte_object_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  json_object_id?: Maybe<Scalars['Float']['output']>
  organization_id?: Maybe<Scalars['Float']['output']>
  person_id?: Maybe<Scalars['Float']['output']>
  text_object_id?: Maybe<Scalars['Float']['output']>
  thing_id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_pop on columns */
export type Atom_Values_Stddev_Pop_Fields = {
  __typename?: 'atom_values_stddev_pop_fields'
  book_id?: Maybe<Scalars['Float']['output']>
  byte_object_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  json_object_id?: Maybe<Scalars['Float']['output']>
  organization_id?: Maybe<Scalars['Float']['output']>
  person_id?: Maybe<Scalars['Float']['output']>
  text_object_id?: Maybe<Scalars['Float']['output']>
  thing_id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_samp on columns */
export type Atom_Values_Stddev_Samp_Fields = {
  __typename?: 'atom_values_stddev_samp_fields'
  book_id?: Maybe<Scalars['Float']['output']>
  byte_object_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  json_object_id?: Maybe<Scalars['Float']['output']>
  organization_id?: Maybe<Scalars['Float']['output']>
  person_id?: Maybe<Scalars['Float']['output']>
  text_object_id?: Maybe<Scalars['Float']['output']>
  thing_id?: Maybe<Scalars['Float']['output']>
}

/** Streaming cursor of the table "atom_values" */
export type Atom_Values_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Atom_Values_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Atom_Values_Stream_Cursor_Value_Input = {
  account_id?: InputMaybe<Scalars['String']['input']>
  book_id?: InputMaybe<Scalars['numeric']['input']>
  byte_object_id?: InputMaybe<Scalars['numeric']['input']>
  id?: InputMaybe<Scalars['numeric']['input']>
  json_object_id?: InputMaybe<Scalars['numeric']['input']>
  organization_id?: InputMaybe<Scalars['numeric']['input']>
  person_id?: InputMaybe<Scalars['numeric']['input']>
  text_object_id?: InputMaybe<Scalars['numeric']['input']>
  thing_id?: InputMaybe<Scalars['numeric']['input']>
}

/** aggregate sum on columns */
export type Atom_Values_Sum_Fields = {
  __typename?: 'atom_values_sum_fields'
  book_id?: Maybe<Scalars['numeric']['output']>
  byte_object_id?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['numeric']['output']>
  json_object_id?: Maybe<Scalars['numeric']['output']>
  organization_id?: Maybe<Scalars['numeric']['output']>
  person_id?: Maybe<Scalars['numeric']['output']>
  text_object_id?: Maybe<Scalars['numeric']['output']>
  thing_id?: Maybe<Scalars['numeric']['output']>
}

/** aggregate var_pop on columns */
export type Atom_Values_Var_Pop_Fields = {
  __typename?: 'atom_values_var_pop_fields'
  book_id?: Maybe<Scalars['Float']['output']>
  byte_object_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  json_object_id?: Maybe<Scalars['Float']['output']>
  organization_id?: Maybe<Scalars['Float']['output']>
  person_id?: Maybe<Scalars['Float']['output']>
  text_object_id?: Maybe<Scalars['Float']['output']>
  thing_id?: Maybe<Scalars['Float']['output']>
}

/** aggregate var_samp on columns */
export type Atom_Values_Var_Samp_Fields = {
  __typename?: 'atom_values_var_samp_fields'
  book_id?: Maybe<Scalars['Float']['output']>
  byte_object_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  json_object_id?: Maybe<Scalars['Float']['output']>
  organization_id?: Maybe<Scalars['Float']['output']>
  person_id?: Maybe<Scalars['Float']['output']>
  text_object_id?: Maybe<Scalars['Float']['output']>
  thing_id?: Maybe<Scalars['Float']['output']>
}

/** aggregate variance on columns */
export type Atom_Values_Variance_Fields = {
  __typename?: 'atom_values_variance_fields'
  book_id?: Maybe<Scalars['Float']['output']>
  byte_object_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  json_object_id?: Maybe<Scalars['Float']['output']>
  organization_id?: Maybe<Scalars['Float']['output']>
  person_id?: Maybe<Scalars['Float']['output']>
  text_object_id?: Maybe<Scalars['Float']['output']>
  thing_id?: Maybe<Scalars['Float']['output']>
}

/** columns and relationships of "atom" */
export type Atoms = {
  __typename?: 'atoms'
  /** An array relationship */
  accounts: Array<Accounts>
  /** An aggregate relationship */
  accounts_aggregate: Accounts_Aggregate
  /** An array relationship */
  as_object_predicate_objects: Array<Predicate_Objects>
  /** An aggregate relationship */
  as_object_predicate_objects_aggregate: Predicate_Objects_Aggregate
  /** An array relationship */
  as_object_triples: Array<Triples>
  /** An aggregate relationship */
  as_object_triples_aggregate: Triples_Aggregate
  /** An array relationship */
  as_predicate_predicate_objects: Array<Predicate_Objects>
  /** An aggregate relationship */
  as_predicate_predicate_objects_aggregate: Predicate_Objects_Aggregate
  /** An array relationship */
  as_predicate_triples: Array<Triples>
  /** An aggregate relationship */
  as_predicate_triples_aggregate: Triples_Aggregate
  /** An array relationship */
  as_subject_triples: Array<Triples>
  /** An aggregate relationship */
  as_subject_triples_aggregate: Triples_Aggregate
  block_number: Scalars['numeric']['output']
  block_timestamp: Scalars['bigint']['output']
  cached_image?: Maybe<Cached_Images_Cached_Image>
  /** An object relationship */
  controller?: Maybe<Accounts>
  /** An object relationship */
  creator: Accounts
  creator_id: Scalars['String']['output']
  data?: Maybe<Scalars['String']['output']>
  emoji?: Maybe<Scalars['String']['output']>
  image?: Maybe<Scalars['String']['output']>
  label?: Maybe<Scalars['String']['output']>
  /** An array relationship */
  positions: Array<Positions>
  /** An aggregate relationship */
  positions_aggregate: Positions_Aggregate
  /** An array relationship */
  signals: Array<Signals>
  /** An aggregate relationship */
  signals_aggregate: Signals_Aggregate
  /** An object relationship */
  term: Terms
  term_id: Scalars['numeric']['output']
  transaction_hash: Scalars['String']['output']
  type: Scalars['atom_type']['output']
  /** An object relationship */
  value?: Maybe<Atom_Values>
  value_id?: Maybe<Scalars['numeric']['output']>
  wallet_id: Scalars['String']['output']
}

/** columns and relationships of "atom" */
export type AtomsAccountsArgs = {
  distinct_on?: InputMaybe<Array<Accounts_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Accounts_Order_By>>
  where?: InputMaybe<Accounts_Bool_Exp>
}

/** columns and relationships of "atom" */
export type AtomsAccounts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Accounts_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Accounts_Order_By>>
  where?: InputMaybe<Accounts_Bool_Exp>
}

/** columns and relationships of "atom" */
export type AtomsAs_Object_Predicate_ObjectsArgs = {
  distinct_on?: InputMaybe<Array<Predicate_Objects_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Predicate_Objects_Order_By>>
  where?: InputMaybe<Predicate_Objects_Bool_Exp>
}

/** columns and relationships of "atom" */
export type AtomsAs_Object_Predicate_Objects_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Predicate_Objects_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Predicate_Objects_Order_By>>
  where?: InputMaybe<Predicate_Objects_Bool_Exp>
}

/** columns and relationships of "atom" */
export type AtomsAs_Object_TriplesArgs = {
  distinct_on?: InputMaybe<Array<Triples_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Triples_Order_By>>
  where?: InputMaybe<Triples_Bool_Exp>
}

/** columns and relationships of "atom" */
export type AtomsAs_Object_Triples_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Triples_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Triples_Order_By>>
  where?: InputMaybe<Triples_Bool_Exp>
}

/** columns and relationships of "atom" */
export type AtomsAs_Predicate_Predicate_ObjectsArgs = {
  distinct_on?: InputMaybe<Array<Predicate_Objects_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Predicate_Objects_Order_By>>
  where?: InputMaybe<Predicate_Objects_Bool_Exp>
}

/** columns and relationships of "atom" */
export type AtomsAs_Predicate_Predicate_Objects_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Predicate_Objects_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Predicate_Objects_Order_By>>
  where?: InputMaybe<Predicate_Objects_Bool_Exp>
}

/** columns and relationships of "atom" */
export type AtomsAs_Predicate_TriplesArgs = {
  distinct_on?: InputMaybe<Array<Triples_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Triples_Order_By>>
  where?: InputMaybe<Triples_Bool_Exp>
}

/** columns and relationships of "atom" */
export type AtomsAs_Predicate_Triples_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Triples_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Triples_Order_By>>
  where?: InputMaybe<Triples_Bool_Exp>
}

/** columns and relationships of "atom" */
export type AtomsAs_Subject_TriplesArgs = {
  distinct_on?: InputMaybe<Array<Triples_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Triples_Order_By>>
  where?: InputMaybe<Triples_Bool_Exp>
}

/** columns and relationships of "atom" */
export type AtomsAs_Subject_Triples_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Triples_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Triples_Order_By>>
  where?: InputMaybe<Triples_Bool_Exp>
}

/** columns and relationships of "atom" */
export type AtomsPositionsArgs = {
  distinct_on?: InputMaybe<Array<Positions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Positions_Order_By>>
  where?: InputMaybe<Positions_Bool_Exp>
}

/** columns and relationships of "atom" */
export type AtomsPositions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Positions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Positions_Order_By>>
  where?: InputMaybe<Positions_Bool_Exp>
}

/** columns and relationships of "atom" */
export type AtomsSignalsArgs = {
  distinct_on?: InputMaybe<Array<Signals_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Signals_Order_By>>
  where?: InputMaybe<Signals_Bool_Exp>
}

/** columns and relationships of "atom" */
export type AtomsSignals_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Signals_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Signals_Order_By>>
  where?: InputMaybe<Signals_Bool_Exp>
}

/** aggregated selection of "atom" */
export type Atoms_Aggregate = {
  __typename?: 'atoms_aggregate'
  aggregate?: Maybe<Atoms_Aggregate_Fields>
  nodes: Array<Atoms>
}

export type Atoms_Aggregate_Bool_Exp = {
  count?: InputMaybe<Atoms_Aggregate_Bool_Exp_Count>
}

export type Atoms_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Atoms_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
  filter?: InputMaybe<Atoms_Bool_Exp>
  predicate: Int_Comparison_Exp
}

/** aggregate fields of "atom" */
export type Atoms_Aggregate_Fields = {
  __typename?: 'atoms_aggregate_fields'
  avg?: Maybe<Atoms_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Atoms_Max_Fields>
  min?: Maybe<Atoms_Min_Fields>
  stddev?: Maybe<Atoms_Stddev_Fields>
  stddev_pop?: Maybe<Atoms_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Atoms_Stddev_Samp_Fields>
  sum?: Maybe<Atoms_Sum_Fields>
  var_pop?: Maybe<Atoms_Var_Pop_Fields>
  var_samp?: Maybe<Atoms_Var_Samp_Fields>
  variance?: Maybe<Atoms_Variance_Fields>
}

/** aggregate fields of "atom" */
export type Atoms_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Atoms_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** order by aggregate values of table "atom" */
export type Atoms_Aggregate_Order_By = {
  avg?: InputMaybe<Atoms_Avg_Order_By>
  count?: InputMaybe<Order_By>
  max?: InputMaybe<Atoms_Max_Order_By>
  min?: InputMaybe<Atoms_Min_Order_By>
  stddev?: InputMaybe<Atoms_Stddev_Order_By>
  stddev_pop?: InputMaybe<Atoms_Stddev_Pop_Order_By>
  stddev_samp?: InputMaybe<Atoms_Stddev_Samp_Order_By>
  sum?: InputMaybe<Atoms_Sum_Order_By>
  var_pop?: InputMaybe<Atoms_Var_Pop_Order_By>
  var_samp?: InputMaybe<Atoms_Var_Samp_Order_By>
  variance?: InputMaybe<Atoms_Variance_Order_By>
}

/** aggregate avg on columns */
export type Atoms_Avg_Fields = {
  __typename?: 'atoms_avg_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  value_id?: Maybe<Scalars['Float']['output']>
}

/** order by avg() on columns of table "atom" */
export type Atoms_Avg_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  value_id?: InputMaybe<Order_By>
}

/** Boolean expression to filter rows from the table "atom". All fields are combined with a logical 'AND'. */
export type Atoms_Bool_Exp = {
  _and?: InputMaybe<Array<Atoms_Bool_Exp>>
  _not?: InputMaybe<Atoms_Bool_Exp>
  _or?: InputMaybe<Array<Atoms_Bool_Exp>>
  accounts?: InputMaybe<Accounts_Bool_Exp>
  accounts_aggregate?: InputMaybe<Accounts_Aggregate_Bool_Exp>
  as_object_predicate_objects?: InputMaybe<Predicate_Objects_Bool_Exp>
  as_object_predicate_objects_aggregate?: InputMaybe<Predicate_Objects_Aggregate_Bool_Exp>
  as_object_triples?: InputMaybe<Triples_Bool_Exp>
  as_object_triples_aggregate?: InputMaybe<Triples_Aggregate_Bool_Exp>
  as_predicate_predicate_objects?: InputMaybe<Predicate_Objects_Bool_Exp>
  as_predicate_predicate_objects_aggregate?: InputMaybe<Predicate_Objects_Aggregate_Bool_Exp>
  as_predicate_triples?: InputMaybe<Triples_Bool_Exp>
  as_predicate_triples_aggregate?: InputMaybe<Triples_Aggregate_Bool_Exp>
  as_subject_triples?: InputMaybe<Triples_Bool_Exp>
  as_subject_triples_aggregate?: InputMaybe<Triples_Aggregate_Bool_Exp>
  block_number?: InputMaybe<Numeric_Comparison_Exp>
  block_timestamp?: InputMaybe<Bigint_Comparison_Exp>
  controller?: InputMaybe<Accounts_Bool_Exp>
  creator?: InputMaybe<Accounts_Bool_Exp>
  creator_id?: InputMaybe<String_Comparison_Exp>
  data?: InputMaybe<String_Comparison_Exp>
  emoji?: InputMaybe<String_Comparison_Exp>
  image?: InputMaybe<String_Comparison_Exp>
  label?: InputMaybe<String_Comparison_Exp>
  positions?: InputMaybe<Positions_Bool_Exp>
  positions_aggregate?: InputMaybe<Positions_Aggregate_Bool_Exp>
  signals?: InputMaybe<Signals_Bool_Exp>
  signals_aggregate?: InputMaybe<Signals_Aggregate_Bool_Exp>
  term?: InputMaybe<Terms_Bool_Exp>
  term_id?: InputMaybe<Numeric_Comparison_Exp>
  transaction_hash?: InputMaybe<String_Comparison_Exp>
  type?: InputMaybe<Atom_Type_Comparison_Exp>
  value?: InputMaybe<Atom_Values_Bool_Exp>
  value_id?: InputMaybe<Numeric_Comparison_Exp>
  wallet_id?: InputMaybe<String_Comparison_Exp>
}

/** aggregate max on columns */
export type Atoms_Max_Fields = {
  __typename?: 'atoms_max_fields'
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  creator_id?: Maybe<Scalars['String']['output']>
  data?: Maybe<Scalars['String']['output']>
  emoji?: Maybe<Scalars['String']['output']>
  image?: Maybe<Scalars['String']['output']>
  label?: Maybe<Scalars['String']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
  transaction_hash?: Maybe<Scalars['String']['output']>
  type?: Maybe<Scalars['atom_type']['output']>
  value_id?: Maybe<Scalars['numeric']['output']>
  wallet_id?: Maybe<Scalars['String']['output']>
}

/** order by max() on columns of table "atom" */
export type Atoms_Max_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  creator_id?: InputMaybe<Order_By>
  data?: InputMaybe<Order_By>
  emoji?: InputMaybe<Order_By>
  image?: InputMaybe<Order_By>
  label?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
  type?: InputMaybe<Order_By>
  value_id?: InputMaybe<Order_By>
  wallet_id?: InputMaybe<Order_By>
}

/** aggregate min on columns */
export type Atoms_Min_Fields = {
  __typename?: 'atoms_min_fields'
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  creator_id?: Maybe<Scalars['String']['output']>
  data?: Maybe<Scalars['String']['output']>
  emoji?: Maybe<Scalars['String']['output']>
  image?: Maybe<Scalars['String']['output']>
  label?: Maybe<Scalars['String']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
  transaction_hash?: Maybe<Scalars['String']['output']>
  type?: Maybe<Scalars['atom_type']['output']>
  value_id?: Maybe<Scalars['numeric']['output']>
  wallet_id?: Maybe<Scalars['String']['output']>
}

/** order by min() on columns of table "atom" */
export type Atoms_Min_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  creator_id?: InputMaybe<Order_By>
  data?: InputMaybe<Order_By>
  emoji?: InputMaybe<Order_By>
  image?: InputMaybe<Order_By>
  label?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
  type?: InputMaybe<Order_By>
  value_id?: InputMaybe<Order_By>
  wallet_id?: InputMaybe<Order_By>
}

/** Ordering options when selecting data from "atom". */
export type Atoms_Order_By = {
  accounts_aggregate?: InputMaybe<Accounts_Aggregate_Order_By>
  as_object_predicate_objects_aggregate?: InputMaybe<Predicate_Objects_Aggregate_Order_By>
  as_object_triples_aggregate?: InputMaybe<Triples_Aggregate_Order_By>
  as_predicate_predicate_objects_aggregate?: InputMaybe<Predicate_Objects_Aggregate_Order_By>
  as_predicate_triples_aggregate?: InputMaybe<Triples_Aggregate_Order_By>
  as_subject_triples_aggregate?: InputMaybe<Triples_Aggregate_Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  controller?: InputMaybe<Accounts_Order_By>
  creator?: InputMaybe<Accounts_Order_By>
  creator_id?: InputMaybe<Order_By>
  data?: InputMaybe<Order_By>
  emoji?: InputMaybe<Order_By>
  image?: InputMaybe<Order_By>
  label?: InputMaybe<Order_By>
  positions_aggregate?: InputMaybe<Positions_Aggregate_Order_By>
  signals_aggregate?: InputMaybe<Signals_Aggregate_Order_By>
  term?: InputMaybe<Terms_Order_By>
  term_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
  type?: InputMaybe<Order_By>
  value?: InputMaybe<Atom_Values_Order_By>
  value_id?: InputMaybe<Order_By>
  wallet_id?: InputMaybe<Order_By>
}

/** select columns of table "atom" */
export enum Atoms_Select_Column {
  /** column name */
  BlockNumber = 'block_number',
  /** column name */
  BlockTimestamp = 'block_timestamp',
  /** column name */
  CreatorId = 'creator_id',
  /** column name */
  Data = 'data',
  /** column name */
  Emoji = 'emoji',
  /** column name */
  Image = 'image',
  /** column name */
  Label = 'label',
  /** column name */
  TermId = 'term_id',
  /** column name */
  TransactionHash = 'transaction_hash',
  /** column name */
  Type = 'type',
  /** column name */
  ValueId = 'value_id',
  /** column name */
  WalletId = 'wallet_id',
}

/** aggregate stddev on columns */
export type Atoms_Stddev_Fields = {
  __typename?: 'atoms_stddev_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  value_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev() on columns of table "atom" */
export type Atoms_Stddev_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  value_id?: InputMaybe<Order_By>
}

/** aggregate stddev_pop on columns */
export type Atoms_Stddev_Pop_Fields = {
  __typename?: 'atoms_stddev_pop_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  value_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_pop() on columns of table "atom" */
export type Atoms_Stddev_Pop_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  value_id?: InputMaybe<Order_By>
}

/** aggregate stddev_samp on columns */
export type Atoms_Stddev_Samp_Fields = {
  __typename?: 'atoms_stddev_samp_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  value_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_samp() on columns of table "atom" */
export type Atoms_Stddev_Samp_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  value_id?: InputMaybe<Order_By>
}

/** Streaming cursor of the table "atoms" */
export type Atoms_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Atoms_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Atoms_Stream_Cursor_Value_Input = {
  block_number?: InputMaybe<Scalars['numeric']['input']>
  block_timestamp?: InputMaybe<Scalars['bigint']['input']>
  creator_id?: InputMaybe<Scalars['String']['input']>
  data?: InputMaybe<Scalars['String']['input']>
  emoji?: InputMaybe<Scalars['String']['input']>
  image?: InputMaybe<Scalars['String']['input']>
  label?: InputMaybe<Scalars['String']['input']>
  term_id?: InputMaybe<Scalars['numeric']['input']>
  transaction_hash?: InputMaybe<Scalars['String']['input']>
  type?: InputMaybe<Scalars['atom_type']['input']>
  value_id?: InputMaybe<Scalars['numeric']['input']>
  wallet_id?: InputMaybe<Scalars['String']['input']>
}

/** aggregate sum on columns */
export type Atoms_Sum_Fields = {
  __typename?: 'atoms_sum_fields'
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
  value_id?: Maybe<Scalars['numeric']['output']>
}

/** order by sum() on columns of table "atom" */
export type Atoms_Sum_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  value_id?: InputMaybe<Order_By>
}

/** aggregate var_pop on columns */
export type Atoms_Var_Pop_Fields = {
  __typename?: 'atoms_var_pop_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  value_id?: Maybe<Scalars['Float']['output']>
}

/** order by var_pop() on columns of table "atom" */
export type Atoms_Var_Pop_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  value_id?: InputMaybe<Order_By>
}

/** aggregate var_samp on columns */
export type Atoms_Var_Samp_Fields = {
  __typename?: 'atoms_var_samp_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  value_id?: Maybe<Scalars['Float']['output']>
}

/** order by var_samp() on columns of table "atom" */
export type Atoms_Var_Samp_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  value_id?: InputMaybe<Order_By>
}

/** aggregate variance on columns */
export type Atoms_Variance_Fields = {
  __typename?: 'atoms_variance_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  value_id?: Maybe<Scalars['Float']['output']>
}

/** order by variance() on columns of table "atom" */
export type Atoms_Variance_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  value_id?: InputMaybe<Order_By>
}

/** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
export type Bigint_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['bigint']['input']>
  _gt?: InputMaybe<Scalars['bigint']['input']>
  _gte?: InputMaybe<Scalars['bigint']['input']>
  _in?: InputMaybe<Array<Scalars['bigint']['input']>>
  _is_null?: InputMaybe<Scalars['Boolean']['input']>
  _lt?: InputMaybe<Scalars['bigint']['input']>
  _lte?: InputMaybe<Scalars['bigint']['input']>
  _neq?: InputMaybe<Scalars['bigint']['input']>
  _nin?: InputMaybe<Array<Scalars['bigint']['input']>>
}

/** columns and relationships of "book" */
export type Books = {
  __typename?: 'books'
  /** An object relationship */
  atom?: Maybe<Atoms>
  description?: Maybe<Scalars['String']['output']>
  genre?: Maybe<Scalars['String']['output']>
  id: Scalars['numeric']['output']
  name?: Maybe<Scalars['String']['output']>
  url?: Maybe<Scalars['String']['output']>
}

/** aggregated selection of "book" */
export type Books_Aggregate = {
  __typename?: 'books_aggregate'
  aggregate?: Maybe<Books_Aggregate_Fields>
  nodes: Array<Books>
}

/** aggregate fields of "book" */
export type Books_Aggregate_Fields = {
  __typename?: 'books_aggregate_fields'
  avg?: Maybe<Books_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Books_Max_Fields>
  min?: Maybe<Books_Min_Fields>
  stddev?: Maybe<Books_Stddev_Fields>
  stddev_pop?: Maybe<Books_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Books_Stddev_Samp_Fields>
  sum?: Maybe<Books_Sum_Fields>
  var_pop?: Maybe<Books_Var_Pop_Fields>
  var_samp?: Maybe<Books_Var_Samp_Fields>
  variance?: Maybe<Books_Variance_Fields>
}

/** aggregate fields of "book" */
export type Books_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Books_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** aggregate avg on columns */
export type Books_Avg_Fields = {
  __typename?: 'books_avg_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** Boolean expression to filter rows from the table "book". All fields are combined with a logical 'AND'. */
export type Books_Bool_Exp = {
  _and?: InputMaybe<Array<Books_Bool_Exp>>
  _not?: InputMaybe<Books_Bool_Exp>
  _or?: InputMaybe<Array<Books_Bool_Exp>>
  atom?: InputMaybe<Atoms_Bool_Exp>
  description?: InputMaybe<String_Comparison_Exp>
  genre?: InputMaybe<String_Comparison_Exp>
  id?: InputMaybe<Numeric_Comparison_Exp>
  name?: InputMaybe<String_Comparison_Exp>
  url?: InputMaybe<String_Comparison_Exp>
}

/** aggregate max on columns */
export type Books_Max_Fields = {
  __typename?: 'books_max_fields'
  description?: Maybe<Scalars['String']['output']>
  genre?: Maybe<Scalars['String']['output']>
  id?: Maybe<Scalars['numeric']['output']>
  name?: Maybe<Scalars['String']['output']>
  url?: Maybe<Scalars['String']['output']>
}

/** aggregate min on columns */
export type Books_Min_Fields = {
  __typename?: 'books_min_fields'
  description?: Maybe<Scalars['String']['output']>
  genre?: Maybe<Scalars['String']['output']>
  id?: Maybe<Scalars['numeric']['output']>
  name?: Maybe<Scalars['String']['output']>
  url?: Maybe<Scalars['String']['output']>
}

/** Ordering options when selecting data from "book". */
export type Books_Order_By = {
  atom?: InputMaybe<Atoms_Order_By>
  description?: InputMaybe<Order_By>
  genre?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  name?: InputMaybe<Order_By>
  url?: InputMaybe<Order_By>
}

/** select columns of table "book" */
export enum Books_Select_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Genre = 'genre',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  Url = 'url',
}

/** aggregate stddev on columns */
export type Books_Stddev_Fields = {
  __typename?: 'books_stddev_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_pop on columns */
export type Books_Stddev_Pop_Fields = {
  __typename?: 'books_stddev_pop_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_samp on columns */
export type Books_Stddev_Samp_Fields = {
  __typename?: 'books_stddev_samp_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** Streaming cursor of the table "books" */
export type Books_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Books_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Books_Stream_Cursor_Value_Input = {
  description?: InputMaybe<Scalars['String']['input']>
  genre?: InputMaybe<Scalars['String']['input']>
  id?: InputMaybe<Scalars['numeric']['input']>
  name?: InputMaybe<Scalars['String']['input']>
  url?: InputMaybe<Scalars['String']['input']>
}

/** aggregate sum on columns */
export type Books_Sum_Fields = {
  __typename?: 'books_sum_fields'
  id?: Maybe<Scalars['numeric']['output']>
}

/** aggregate var_pop on columns */
export type Books_Var_Pop_Fields = {
  __typename?: 'books_var_pop_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate var_samp on columns */
export type Books_Var_Samp_Fields = {
  __typename?: 'books_var_samp_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate variance on columns */
export type Books_Variance_Fields = {
  __typename?: 'books_variance_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** columns and relationships of "byte_object" */
export type Byte_Object = {
  __typename?: 'byte_object'
  /** An object relationship */
  atom?: Maybe<Atoms>
  data: Scalars['bytea']['output']
  id: Scalars['numeric']['output']
}

/** aggregated selection of "byte_object" */
export type Byte_Object_Aggregate = {
  __typename?: 'byte_object_aggregate'
  aggregate?: Maybe<Byte_Object_Aggregate_Fields>
  nodes: Array<Byte_Object>
}

/** aggregate fields of "byte_object" */
export type Byte_Object_Aggregate_Fields = {
  __typename?: 'byte_object_aggregate_fields'
  avg?: Maybe<Byte_Object_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Byte_Object_Max_Fields>
  min?: Maybe<Byte_Object_Min_Fields>
  stddev?: Maybe<Byte_Object_Stddev_Fields>
  stddev_pop?: Maybe<Byte_Object_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Byte_Object_Stddev_Samp_Fields>
  sum?: Maybe<Byte_Object_Sum_Fields>
  var_pop?: Maybe<Byte_Object_Var_Pop_Fields>
  var_samp?: Maybe<Byte_Object_Var_Samp_Fields>
  variance?: Maybe<Byte_Object_Variance_Fields>
}

/** aggregate fields of "byte_object" */
export type Byte_Object_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Byte_Object_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** aggregate avg on columns */
export type Byte_Object_Avg_Fields = {
  __typename?: 'byte_object_avg_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** Boolean expression to filter rows from the table "byte_object". All fields are combined with a logical 'AND'. */
export type Byte_Object_Bool_Exp = {
  _and?: InputMaybe<Array<Byte_Object_Bool_Exp>>
  _not?: InputMaybe<Byte_Object_Bool_Exp>
  _or?: InputMaybe<Array<Byte_Object_Bool_Exp>>
  atom?: InputMaybe<Atoms_Bool_Exp>
  data?: InputMaybe<Bytea_Comparison_Exp>
  id?: InputMaybe<Numeric_Comparison_Exp>
}

/** aggregate max on columns */
export type Byte_Object_Max_Fields = {
  __typename?: 'byte_object_max_fields'
  id?: Maybe<Scalars['numeric']['output']>
}

/** aggregate min on columns */
export type Byte_Object_Min_Fields = {
  __typename?: 'byte_object_min_fields'
  id?: Maybe<Scalars['numeric']['output']>
}

/** Ordering options when selecting data from "byte_object". */
export type Byte_Object_Order_By = {
  atom?: InputMaybe<Atoms_Order_By>
  data?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
}

/** select columns of table "byte_object" */
export enum Byte_Object_Select_Column {
  /** column name */
  Data = 'data',
  /** column name */
  Id = 'id',
}

/** aggregate stddev on columns */
export type Byte_Object_Stddev_Fields = {
  __typename?: 'byte_object_stddev_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_pop on columns */
export type Byte_Object_Stddev_Pop_Fields = {
  __typename?: 'byte_object_stddev_pop_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_samp on columns */
export type Byte_Object_Stddev_Samp_Fields = {
  __typename?: 'byte_object_stddev_samp_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** Streaming cursor of the table "byte_object" */
export type Byte_Object_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Byte_Object_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Byte_Object_Stream_Cursor_Value_Input = {
  data?: InputMaybe<Scalars['bytea']['input']>
  id?: InputMaybe<Scalars['numeric']['input']>
}

/** aggregate sum on columns */
export type Byte_Object_Sum_Fields = {
  __typename?: 'byte_object_sum_fields'
  id?: Maybe<Scalars['numeric']['output']>
}

/** aggregate var_pop on columns */
export type Byte_Object_Var_Pop_Fields = {
  __typename?: 'byte_object_var_pop_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate var_samp on columns */
export type Byte_Object_Var_Samp_Fields = {
  __typename?: 'byte_object_var_samp_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate variance on columns */
export type Byte_Object_Variance_Fields = {
  __typename?: 'byte_object_variance_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** Boolean expression to compare columns of type "bytea". All fields are combined with logical 'AND'. */
export type Bytea_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['bytea']['input']>
  _gt?: InputMaybe<Scalars['bytea']['input']>
  _gte?: InputMaybe<Scalars['bytea']['input']>
  _in?: InputMaybe<Array<Scalars['bytea']['input']>>
  _is_null?: InputMaybe<Scalars['Boolean']['input']>
  _lt?: InputMaybe<Scalars['bytea']['input']>
  _lte?: InputMaybe<Scalars['bytea']['input']>
  _neq?: InputMaybe<Scalars['bytea']['input']>
  _nin?: InputMaybe<Array<Scalars['bytea']['input']>>
}

/** columns and relationships of "cached_images.cached_image" */
export type Cached_Images_Cached_Image = {
  __typename?: 'cached_images_cached_image'
  created_at: Scalars['timestamptz']['output']
  model?: Maybe<Scalars['String']['output']>
  original_url: Scalars['String']['output']
  safe: Scalars['Boolean']['output']
  score?: Maybe<Scalars['jsonb']['output']>
  url: Scalars['String']['output']
}

/** columns and relationships of "cached_images.cached_image" */
export type Cached_Images_Cached_ImageScoreArgs = {
  path?: InputMaybe<Scalars['String']['input']>
}

/** Boolean expression to filter rows from the table "cached_images.cached_image". All fields are combined with a logical 'AND'. */
export type Cached_Images_Cached_Image_Bool_Exp = {
  _and?: InputMaybe<Array<Cached_Images_Cached_Image_Bool_Exp>>
  _not?: InputMaybe<Cached_Images_Cached_Image_Bool_Exp>
  _or?: InputMaybe<Array<Cached_Images_Cached_Image_Bool_Exp>>
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>
  model?: InputMaybe<String_Comparison_Exp>
  original_url?: InputMaybe<String_Comparison_Exp>
  safe?: InputMaybe<Boolean_Comparison_Exp>
  score?: InputMaybe<Jsonb_Comparison_Exp>
  url?: InputMaybe<String_Comparison_Exp>
}

/** Ordering options when selecting data from "cached_images.cached_image". */
export type Cached_Images_Cached_Image_Order_By = {
  created_at?: InputMaybe<Order_By>
  model?: InputMaybe<Order_By>
  original_url?: InputMaybe<Order_By>
  safe?: InputMaybe<Order_By>
  score?: InputMaybe<Order_By>
  url?: InputMaybe<Order_By>
}

/** select columns of table "cached_images.cached_image" */
export enum Cached_Images_Cached_Image_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Model = 'model',
  /** column name */
  OriginalUrl = 'original_url',
  /** column name */
  Safe = 'safe',
  /** column name */
  Score = 'score',
  /** column name */
  Url = 'url',
}

/** Streaming cursor of the table "cached_images_cached_image" */
export type Cached_Images_Cached_Image_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Cached_Images_Cached_Image_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Cached_Images_Cached_Image_Stream_Cursor_Value_Input = {
  created_at?: InputMaybe<Scalars['timestamptz']['input']>
  model?: InputMaybe<Scalars['String']['input']>
  original_url?: InputMaybe<Scalars['String']['input']>
  safe?: InputMaybe<Scalars['Boolean']['input']>
  score?: InputMaybe<Scalars['jsonb']['input']>
  url?: InputMaybe<Scalars['String']['input']>
}

/** columns and relationships of "caip10" */
export type Caip10 = {
  __typename?: 'caip10'
  account_address: Scalars['String']['output']
  /** An object relationship */
  atom?: Maybe<Atoms>
  chain_id: Scalars['Int']['output']
  id: Scalars['numeric']['output']
  namespace: Scalars['String']['output']
}

/** aggregated selection of "caip10" */
export type Caip10_Aggregate = {
  __typename?: 'caip10_aggregate'
  aggregate?: Maybe<Caip10_Aggregate_Fields>
  nodes: Array<Caip10>
}

/** aggregate fields of "caip10" */
export type Caip10_Aggregate_Fields = {
  __typename?: 'caip10_aggregate_fields'
  avg?: Maybe<Caip10_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Caip10_Max_Fields>
  min?: Maybe<Caip10_Min_Fields>
  stddev?: Maybe<Caip10_Stddev_Fields>
  stddev_pop?: Maybe<Caip10_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Caip10_Stddev_Samp_Fields>
  sum?: Maybe<Caip10_Sum_Fields>
  var_pop?: Maybe<Caip10_Var_Pop_Fields>
  var_samp?: Maybe<Caip10_Var_Samp_Fields>
  variance?: Maybe<Caip10_Variance_Fields>
}

/** aggregate fields of "caip10" */
export type Caip10_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Caip10_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** aggregate avg on columns */
export type Caip10_Avg_Fields = {
  __typename?: 'caip10_avg_fields'
  chain_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
}

/** Boolean expression to filter rows from the table "caip10". All fields are combined with a logical 'AND'. */
export type Caip10_Bool_Exp = {
  _and?: InputMaybe<Array<Caip10_Bool_Exp>>
  _not?: InputMaybe<Caip10_Bool_Exp>
  _or?: InputMaybe<Array<Caip10_Bool_Exp>>
  account_address?: InputMaybe<String_Comparison_Exp>
  atom?: InputMaybe<Atoms_Bool_Exp>
  chain_id?: InputMaybe<Int_Comparison_Exp>
  id?: InputMaybe<Numeric_Comparison_Exp>
  namespace?: InputMaybe<String_Comparison_Exp>
}

/** aggregate max on columns */
export type Caip10_Max_Fields = {
  __typename?: 'caip10_max_fields'
  account_address?: Maybe<Scalars['String']['output']>
  chain_id?: Maybe<Scalars['Int']['output']>
  id?: Maybe<Scalars['numeric']['output']>
  namespace?: Maybe<Scalars['String']['output']>
}

/** aggregate min on columns */
export type Caip10_Min_Fields = {
  __typename?: 'caip10_min_fields'
  account_address?: Maybe<Scalars['String']['output']>
  chain_id?: Maybe<Scalars['Int']['output']>
  id?: Maybe<Scalars['numeric']['output']>
  namespace?: Maybe<Scalars['String']['output']>
}

/** Ordering options when selecting data from "caip10". */
export type Caip10_Order_By = {
  account_address?: InputMaybe<Order_By>
  atom?: InputMaybe<Atoms_Order_By>
  chain_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  namespace?: InputMaybe<Order_By>
}

/** select columns of table "caip10" */
export enum Caip10_Select_Column {
  /** column name */
  AccountAddress = 'account_address',
  /** column name */
  ChainId = 'chain_id',
  /** column name */
  Id = 'id',
  /** column name */
  Namespace = 'namespace',
}

/** aggregate stddev on columns */
export type Caip10_Stddev_Fields = {
  __typename?: 'caip10_stddev_fields'
  chain_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_pop on columns */
export type Caip10_Stddev_Pop_Fields = {
  __typename?: 'caip10_stddev_pop_fields'
  chain_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_samp on columns */
export type Caip10_Stddev_Samp_Fields = {
  __typename?: 'caip10_stddev_samp_fields'
  chain_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
}

/** Streaming cursor of the table "caip10" */
export type Caip10_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Caip10_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Caip10_Stream_Cursor_Value_Input = {
  account_address?: InputMaybe<Scalars['String']['input']>
  chain_id?: InputMaybe<Scalars['Int']['input']>
  id?: InputMaybe<Scalars['numeric']['input']>
  namespace?: InputMaybe<Scalars['String']['input']>
}

/** aggregate sum on columns */
export type Caip10_Sum_Fields = {
  __typename?: 'caip10_sum_fields'
  chain_id?: Maybe<Scalars['Int']['output']>
  id?: Maybe<Scalars['numeric']['output']>
}

/** aggregate var_pop on columns */
export type Caip10_Var_Pop_Fields = {
  __typename?: 'caip10_var_pop_fields'
  chain_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate var_samp on columns */
export type Caip10_Var_Samp_Fields = {
  __typename?: 'caip10_var_samp_fields'
  chain_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate variance on columns */
export type Caip10_Variance_Fields = {
  __typename?: 'caip10_variance_fields'
  chain_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
}

/** columns and relationships of "chainlink_price" */
export type Chainlink_Prices = {
  __typename?: 'chainlink_prices'
  id: Scalars['numeric']['output']
  usd?: Maybe<Scalars['float8']['output']>
}

/** Boolean expression to filter rows from the table "chainlink_price". All fields are combined with a logical 'AND'. */
export type Chainlink_Prices_Bool_Exp = {
  _and?: InputMaybe<Array<Chainlink_Prices_Bool_Exp>>
  _not?: InputMaybe<Chainlink_Prices_Bool_Exp>
  _or?: InputMaybe<Array<Chainlink_Prices_Bool_Exp>>
  id?: InputMaybe<Numeric_Comparison_Exp>
  usd?: InputMaybe<Float8_Comparison_Exp>
}

/** Ordering options when selecting data from "chainlink_price". */
export type Chainlink_Prices_Order_By = {
  id?: InputMaybe<Order_By>
  usd?: InputMaybe<Order_By>
}

/** select columns of table "chainlink_price" */
export enum Chainlink_Prices_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Usd = 'usd',
}

/** Streaming cursor of the table "chainlink_prices" */
export type Chainlink_Prices_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Chainlink_Prices_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Chainlink_Prices_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['numeric']['input']>
  usd?: InputMaybe<Scalars['float8']['input']>
}

/** columns and relationships of "claim" */
export type Claims = {
  __typename?: 'claims'
  /** An object relationship */
  account?: Maybe<Accounts>
  account_id: Scalars['String']['output']
  id: Scalars['String']['output']
  /** An object relationship */
  position: Positions
  position_id: Scalars['String']['output']
}

/** aggregated selection of "claim" */
export type Claims_Aggregate = {
  __typename?: 'claims_aggregate'
  aggregate?: Maybe<Claims_Aggregate_Fields>
  nodes: Array<Claims>
}

export type Claims_Aggregate_Bool_Exp = {
  count?: InputMaybe<Claims_Aggregate_Bool_Exp_Count>
}

export type Claims_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Claims_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
  filter?: InputMaybe<Claims_Bool_Exp>
  predicate: Int_Comparison_Exp
}

/** aggregate fields of "claim" */
export type Claims_Aggregate_Fields = {
  __typename?: 'claims_aggregate_fields'
  count: Scalars['Int']['output']
  max?: Maybe<Claims_Max_Fields>
  min?: Maybe<Claims_Min_Fields>
}

/** aggregate fields of "claim" */
export type Claims_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Claims_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** order by aggregate values of table "claim" */
export type Claims_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>
  max?: InputMaybe<Claims_Max_Order_By>
  min?: InputMaybe<Claims_Min_Order_By>
}

/** Boolean expression to filter rows from the table "claim". All fields are combined with a logical 'AND'. */
export type Claims_Bool_Exp = {
  _and?: InputMaybe<Array<Claims_Bool_Exp>>
  _not?: InputMaybe<Claims_Bool_Exp>
  _or?: InputMaybe<Array<Claims_Bool_Exp>>
  account?: InputMaybe<Accounts_Bool_Exp>
  account_id?: InputMaybe<String_Comparison_Exp>
  id?: InputMaybe<String_Comparison_Exp>
  position?: InputMaybe<Positions_Bool_Exp>
  position_id?: InputMaybe<String_Comparison_Exp>
}

export type Claims_From_Following_Args = {
  address?: InputMaybe<Scalars['String']['input']>
}

/** aggregate max on columns */
export type Claims_Max_Fields = {
  __typename?: 'claims_max_fields'
  account_id?: Maybe<Scalars['String']['output']>
  id?: Maybe<Scalars['String']['output']>
  position_id?: Maybe<Scalars['String']['output']>
}

/** order by max() on columns of table "claim" */
export type Claims_Max_Order_By = {
  account_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  position_id?: InputMaybe<Order_By>
}

/** aggregate min on columns */
export type Claims_Min_Fields = {
  __typename?: 'claims_min_fields'
  account_id?: Maybe<Scalars['String']['output']>
  id?: Maybe<Scalars['String']['output']>
  position_id?: Maybe<Scalars['String']['output']>
}

/** order by min() on columns of table "claim" */
export type Claims_Min_Order_By = {
  account_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  position_id?: InputMaybe<Order_By>
}

/** Ordering options when selecting data from "claim". */
export type Claims_Order_By = {
  account?: InputMaybe<Accounts_Order_By>
  account_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  position?: InputMaybe<Positions_Order_By>
  position_id?: InputMaybe<Order_By>
}

/** select columns of table "claim" */
export enum Claims_Select_Column {
  /** column name */
  AccountId = 'account_id',
  /** column name */
  Id = 'id',
  /** column name */
  PositionId = 'position_id',
}

/** Streaming cursor of the table "claims" */
export type Claims_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Claims_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Claims_Stream_Cursor_Value_Input = {
  account_id?: InputMaybe<Scalars['String']['input']>
  id?: InputMaybe<Scalars['String']['input']>
  position_id?: InputMaybe<Scalars['String']['input']>
}

/** ordering argument of a cursor */
export enum Cursor_Ordering {
  /** ascending ordering of the cursor */
  Asc = 'ASC',
  /** descending ordering of the cursor */
  Desc = 'DESC',
}

/** columns and relationships of "deposit" */
export type Deposits = {
  __typename?: 'deposits'
  block_number: Scalars['numeric']['output']
  block_timestamp: Scalars['bigint']['output']
  curve_id: Scalars['numeric']['output']
  entry_fee: Scalars['numeric']['output']
  id: Scalars['String']['output']
  is_atom_wallet: Scalars['Boolean']['output']
  is_triple: Scalars['Boolean']['output']
  /** An object relationship */
  receiver: Accounts
  receiver_id: Scalars['String']['output']
  receiver_total_shares_in_vault: Scalars['numeric']['output']
  /** An object relationship */
  sender?: Maybe<Accounts>
  sender_assets_after_total_fees: Scalars['numeric']['output']
  sender_id: Scalars['String']['output']
  shares_for_receiver: Scalars['numeric']['output']
  /** An object relationship */
  term: Terms
  term_id: Scalars['numeric']['output']
  transaction_hash: Scalars['String']['output']
  /** An object relationship */
  vault?: Maybe<Vaults>
}

/** aggregated selection of "deposit" */
export type Deposits_Aggregate = {
  __typename?: 'deposits_aggregate'
  aggregate?: Maybe<Deposits_Aggregate_Fields>
  nodes: Array<Deposits>
}

export type Deposits_Aggregate_Bool_Exp = {
  bool_and?: InputMaybe<Deposits_Aggregate_Bool_Exp_Bool_And>
  bool_or?: InputMaybe<Deposits_Aggregate_Bool_Exp_Bool_Or>
  count?: InputMaybe<Deposits_Aggregate_Bool_Exp_Count>
}

export type Deposits_Aggregate_Bool_Exp_Bool_And = {
  arguments: Deposits_Select_Column_Deposits_Aggregate_Bool_Exp_Bool_And_Arguments_Columns
  distinct?: InputMaybe<Scalars['Boolean']['input']>
  filter?: InputMaybe<Deposits_Bool_Exp>
  predicate: Boolean_Comparison_Exp
}

export type Deposits_Aggregate_Bool_Exp_Bool_Or = {
  arguments: Deposits_Select_Column_Deposits_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns
  distinct?: InputMaybe<Scalars['Boolean']['input']>
  filter?: InputMaybe<Deposits_Bool_Exp>
  predicate: Boolean_Comparison_Exp
}

export type Deposits_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Deposits_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
  filter?: InputMaybe<Deposits_Bool_Exp>
  predicate: Int_Comparison_Exp
}

/** aggregate fields of "deposit" */
export type Deposits_Aggregate_Fields = {
  __typename?: 'deposits_aggregate_fields'
  avg?: Maybe<Deposits_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Deposits_Max_Fields>
  min?: Maybe<Deposits_Min_Fields>
  stddev?: Maybe<Deposits_Stddev_Fields>
  stddev_pop?: Maybe<Deposits_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Deposits_Stddev_Samp_Fields>
  sum?: Maybe<Deposits_Sum_Fields>
  var_pop?: Maybe<Deposits_Var_Pop_Fields>
  var_samp?: Maybe<Deposits_Var_Samp_Fields>
  variance?: Maybe<Deposits_Variance_Fields>
}

/** aggregate fields of "deposit" */
export type Deposits_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Deposits_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** order by aggregate values of table "deposit" */
export type Deposits_Aggregate_Order_By = {
  avg?: InputMaybe<Deposits_Avg_Order_By>
  count?: InputMaybe<Order_By>
  max?: InputMaybe<Deposits_Max_Order_By>
  min?: InputMaybe<Deposits_Min_Order_By>
  stddev?: InputMaybe<Deposits_Stddev_Order_By>
  stddev_pop?: InputMaybe<Deposits_Stddev_Pop_Order_By>
  stddev_samp?: InputMaybe<Deposits_Stddev_Samp_Order_By>
  sum?: InputMaybe<Deposits_Sum_Order_By>
  var_pop?: InputMaybe<Deposits_Var_Pop_Order_By>
  var_samp?: InputMaybe<Deposits_Var_Samp_Order_By>
  variance?: InputMaybe<Deposits_Variance_Order_By>
}

/** aggregate avg on columns */
export type Deposits_Avg_Fields = {
  __typename?: 'deposits_avg_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  entry_fee?: Maybe<Scalars['Float']['output']>
  receiver_total_shares_in_vault?: Maybe<Scalars['Float']['output']>
  sender_assets_after_total_fees?: Maybe<Scalars['Float']['output']>
  shares_for_receiver?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by avg() on columns of table "deposit" */
export type Deposits_Avg_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  entry_fee?: InputMaybe<Order_By>
  receiver_total_shares_in_vault?: InputMaybe<Order_By>
  sender_assets_after_total_fees?: InputMaybe<Order_By>
  shares_for_receiver?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** Boolean expression to filter rows from the table "deposit". All fields are combined with a logical 'AND'. */
export type Deposits_Bool_Exp = {
  _and?: InputMaybe<Array<Deposits_Bool_Exp>>
  _not?: InputMaybe<Deposits_Bool_Exp>
  _or?: InputMaybe<Array<Deposits_Bool_Exp>>
  block_number?: InputMaybe<Numeric_Comparison_Exp>
  block_timestamp?: InputMaybe<Bigint_Comparison_Exp>
  curve_id?: InputMaybe<Numeric_Comparison_Exp>
  entry_fee?: InputMaybe<Numeric_Comparison_Exp>
  id?: InputMaybe<String_Comparison_Exp>
  is_atom_wallet?: InputMaybe<Boolean_Comparison_Exp>
  is_triple?: InputMaybe<Boolean_Comparison_Exp>
  receiver?: InputMaybe<Accounts_Bool_Exp>
  receiver_id?: InputMaybe<String_Comparison_Exp>
  receiver_total_shares_in_vault?: InputMaybe<Numeric_Comparison_Exp>
  sender?: InputMaybe<Accounts_Bool_Exp>
  sender_assets_after_total_fees?: InputMaybe<Numeric_Comparison_Exp>
  sender_id?: InputMaybe<String_Comparison_Exp>
  shares_for_receiver?: InputMaybe<Numeric_Comparison_Exp>
  term?: InputMaybe<Terms_Bool_Exp>
  term_id?: InputMaybe<Numeric_Comparison_Exp>
  transaction_hash?: InputMaybe<String_Comparison_Exp>
  vault?: InputMaybe<Vaults_Bool_Exp>
}

/** aggregate max on columns */
export type Deposits_Max_Fields = {
  __typename?: 'deposits_max_fields'
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  curve_id?: Maybe<Scalars['numeric']['output']>
  entry_fee?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['String']['output']>
  receiver_id?: Maybe<Scalars['String']['output']>
  receiver_total_shares_in_vault?: Maybe<Scalars['numeric']['output']>
  sender_assets_after_total_fees?: Maybe<Scalars['numeric']['output']>
  sender_id?: Maybe<Scalars['String']['output']>
  shares_for_receiver?: Maybe<Scalars['numeric']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
  transaction_hash?: Maybe<Scalars['String']['output']>
}

/** order by max() on columns of table "deposit" */
export type Deposits_Max_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  entry_fee?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  receiver_id?: InputMaybe<Order_By>
  receiver_total_shares_in_vault?: InputMaybe<Order_By>
  sender_assets_after_total_fees?: InputMaybe<Order_By>
  sender_id?: InputMaybe<Order_By>
  shares_for_receiver?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
}

/** aggregate min on columns */
export type Deposits_Min_Fields = {
  __typename?: 'deposits_min_fields'
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  curve_id?: Maybe<Scalars['numeric']['output']>
  entry_fee?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['String']['output']>
  receiver_id?: Maybe<Scalars['String']['output']>
  receiver_total_shares_in_vault?: Maybe<Scalars['numeric']['output']>
  sender_assets_after_total_fees?: Maybe<Scalars['numeric']['output']>
  sender_id?: Maybe<Scalars['String']['output']>
  shares_for_receiver?: Maybe<Scalars['numeric']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
  transaction_hash?: Maybe<Scalars['String']['output']>
}

/** order by min() on columns of table "deposit" */
export type Deposits_Min_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  entry_fee?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  receiver_id?: InputMaybe<Order_By>
  receiver_total_shares_in_vault?: InputMaybe<Order_By>
  sender_assets_after_total_fees?: InputMaybe<Order_By>
  sender_id?: InputMaybe<Order_By>
  shares_for_receiver?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
}

/** Ordering options when selecting data from "deposit". */
export type Deposits_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  entry_fee?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  is_atom_wallet?: InputMaybe<Order_By>
  is_triple?: InputMaybe<Order_By>
  receiver?: InputMaybe<Accounts_Order_By>
  receiver_id?: InputMaybe<Order_By>
  receiver_total_shares_in_vault?: InputMaybe<Order_By>
  sender?: InputMaybe<Accounts_Order_By>
  sender_assets_after_total_fees?: InputMaybe<Order_By>
  sender_id?: InputMaybe<Order_By>
  shares_for_receiver?: InputMaybe<Order_By>
  term?: InputMaybe<Terms_Order_By>
  term_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
  vault?: InputMaybe<Vaults_Order_By>
}

/** select columns of table "deposit" */
export enum Deposits_Select_Column {
  /** column name */
  BlockNumber = 'block_number',
  /** column name */
  BlockTimestamp = 'block_timestamp',
  /** column name */
  CurveId = 'curve_id',
  /** column name */
  EntryFee = 'entry_fee',
  /** column name */
  Id = 'id',
  /** column name */
  IsAtomWallet = 'is_atom_wallet',
  /** column name */
  IsTriple = 'is_triple',
  /** column name */
  ReceiverId = 'receiver_id',
  /** column name */
  ReceiverTotalSharesInVault = 'receiver_total_shares_in_vault',
  /** column name */
  SenderAssetsAfterTotalFees = 'sender_assets_after_total_fees',
  /** column name */
  SenderId = 'sender_id',
  /** column name */
  SharesForReceiver = 'shares_for_receiver',
  /** column name */
  TermId = 'term_id',
  /** column name */
  TransactionHash = 'transaction_hash',
}

/** select "deposits_aggregate_bool_exp_bool_and_arguments_columns" columns of table "deposit" */
export enum Deposits_Select_Column_Deposits_Aggregate_Bool_Exp_Bool_And_Arguments_Columns {
  /** column name */
  IsAtomWallet = 'is_atom_wallet',
  /** column name */
  IsTriple = 'is_triple',
}

/** select "deposits_aggregate_bool_exp_bool_or_arguments_columns" columns of table "deposit" */
export enum Deposits_Select_Column_Deposits_Aggregate_Bool_Exp_Bool_Or_Arguments_Columns {
  /** column name */
  IsAtomWallet = 'is_atom_wallet',
  /** column name */
  IsTriple = 'is_triple',
}

/** aggregate stddev on columns */
export type Deposits_Stddev_Fields = {
  __typename?: 'deposits_stddev_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  entry_fee?: Maybe<Scalars['Float']['output']>
  receiver_total_shares_in_vault?: Maybe<Scalars['Float']['output']>
  sender_assets_after_total_fees?: Maybe<Scalars['Float']['output']>
  shares_for_receiver?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev() on columns of table "deposit" */
export type Deposits_Stddev_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  entry_fee?: InputMaybe<Order_By>
  receiver_total_shares_in_vault?: InputMaybe<Order_By>
  sender_assets_after_total_fees?: InputMaybe<Order_By>
  shares_for_receiver?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate stddev_pop on columns */
export type Deposits_Stddev_Pop_Fields = {
  __typename?: 'deposits_stddev_pop_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  entry_fee?: Maybe<Scalars['Float']['output']>
  receiver_total_shares_in_vault?: Maybe<Scalars['Float']['output']>
  sender_assets_after_total_fees?: Maybe<Scalars['Float']['output']>
  shares_for_receiver?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_pop() on columns of table "deposit" */
export type Deposits_Stddev_Pop_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  entry_fee?: InputMaybe<Order_By>
  receiver_total_shares_in_vault?: InputMaybe<Order_By>
  sender_assets_after_total_fees?: InputMaybe<Order_By>
  shares_for_receiver?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate stddev_samp on columns */
export type Deposits_Stddev_Samp_Fields = {
  __typename?: 'deposits_stddev_samp_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  entry_fee?: Maybe<Scalars['Float']['output']>
  receiver_total_shares_in_vault?: Maybe<Scalars['Float']['output']>
  sender_assets_after_total_fees?: Maybe<Scalars['Float']['output']>
  shares_for_receiver?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_samp() on columns of table "deposit" */
export type Deposits_Stddev_Samp_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  entry_fee?: InputMaybe<Order_By>
  receiver_total_shares_in_vault?: InputMaybe<Order_By>
  sender_assets_after_total_fees?: InputMaybe<Order_By>
  shares_for_receiver?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** Streaming cursor of the table "deposits" */
export type Deposits_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Deposits_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Deposits_Stream_Cursor_Value_Input = {
  block_number?: InputMaybe<Scalars['numeric']['input']>
  block_timestamp?: InputMaybe<Scalars['bigint']['input']>
  curve_id?: InputMaybe<Scalars['numeric']['input']>
  entry_fee?: InputMaybe<Scalars['numeric']['input']>
  id?: InputMaybe<Scalars['String']['input']>
  is_atom_wallet?: InputMaybe<Scalars['Boolean']['input']>
  is_triple?: InputMaybe<Scalars['Boolean']['input']>
  receiver_id?: InputMaybe<Scalars['String']['input']>
  receiver_total_shares_in_vault?: InputMaybe<Scalars['numeric']['input']>
  sender_assets_after_total_fees?: InputMaybe<Scalars['numeric']['input']>
  sender_id?: InputMaybe<Scalars['String']['input']>
  shares_for_receiver?: InputMaybe<Scalars['numeric']['input']>
  term_id?: InputMaybe<Scalars['numeric']['input']>
  transaction_hash?: InputMaybe<Scalars['String']['input']>
}

/** aggregate sum on columns */
export type Deposits_Sum_Fields = {
  __typename?: 'deposits_sum_fields'
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  curve_id?: Maybe<Scalars['numeric']['output']>
  entry_fee?: Maybe<Scalars['numeric']['output']>
  receiver_total_shares_in_vault?: Maybe<Scalars['numeric']['output']>
  sender_assets_after_total_fees?: Maybe<Scalars['numeric']['output']>
  shares_for_receiver?: Maybe<Scalars['numeric']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
}

/** order by sum() on columns of table "deposit" */
export type Deposits_Sum_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  entry_fee?: InputMaybe<Order_By>
  receiver_total_shares_in_vault?: InputMaybe<Order_By>
  sender_assets_after_total_fees?: InputMaybe<Order_By>
  shares_for_receiver?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate var_pop on columns */
export type Deposits_Var_Pop_Fields = {
  __typename?: 'deposits_var_pop_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  entry_fee?: Maybe<Scalars['Float']['output']>
  receiver_total_shares_in_vault?: Maybe<Scalars['Float']['output']>
  sender_assets_after_total_fees?: Maybe<Scalars['Float']['output']>
  shares_for_receiver?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by var_pop() on columns of table "deposit" */
export type Deposits_Var_Pop_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  entry_fee?: InputMaybe<Order_By>
  receiver_total_shares_in_vault?: InputMaybe<Order_By>
  sender_assets_after_total_fees?: InputMaybe<Order_By>
  shares_for_receiver?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate var_samp on columns */
export type Deposits_Var_Samp_Fields = {
  __typename?: 'deposits_var_samp_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  entry_fee?: Maybe<Scalars['Float']['output']>
  receiver_total_shares_in_vault?: Maybe<Scalars['Float']['output']>
  sender_assets_after_total_fees?: Maybe<Scalars['Float']['output']>
  shares_for_receiver?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by var_samp() on columns of table "deposit" */
export type Deposits_Var_Samp_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  entry_fee?: InputMaybe<Order_By>
  receiver_total_shares_in_vault?: InputMaybe<Order_By>
  sender_assets_after_total_fees?: InputMaybe<Order_By>
  shares_for_receiver?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate variance on columns */
export type Deposits_Variance_Fields = {
  __typename?: 'deposits_variance_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  entry_fee?: Maybe<Scalars['Float']['output']>
  receiver_total_shares_in_vault?: Maybe<Scalars['Float']['output']>
  sender_assets_after_total_fees?: Maybe<Scalars['Float']['output']>
  shares_for_receiver?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by variance() on columns of table "deposit" */
export type Deposits_Variance_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  entry_fee?: InputMaybe<Order_By>
  receiver_total_shares_in_vault?: InputMaybe<Order_By>
  sender_assets_after_total_fees?: InputMaybe<Order_By>
  shares_for_receiver?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** Boolean expression to compare columns of type "event_type". All fields are combined with logical 'AND'. */
export type Event_Type_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['event_type']['input']>
  _gt?: InputMaybe<Scalars['event_type']['input']>
  _gte?: InputMaybe<Scalars['event_type']['input']>
  _in?: InputMaybe<Array<Scalars['event_type']['input']>>
  _is_null?: InputMaybe<Scalars['Boolean']['input']>
  _lt?: InputMaybe<Scalars['event_type']['input']>
  _lte?: InputMaybe<Scalars['event_type']['input']>
  _neq?: InputMaybe<Scalars['event_type']['input']>
  _nin?: InputMaybe<Array<Scalars['event_type']['input']>>
}

/** columns and relationships of "event" */
export type Events = {
  __typename?: 'events'
  /** An object relationship */
  atom?: Maybe<Atoms>
  atom_id?: Maybe<Scalars['numeric']['output']>
  block_number: Scalars['numeric']['output']
  block_timestamp: Scalars['bigint']['output']
  /** An object relationship */
  deposit?: Maybe<Deposits>
  deposit_id?: Maybe<Scalars['String']['output']>
  /** An object relationship */
  fee_transfer?: Maybe<Fee_Transfers>
  fee_transfer_id?: Maybe<Scalars['String']['output']>
  id: Scalars['String']['output']
  /** An object relationship */
  redemption?: Maybe<Redemptions>
  redemption_id?: Maybe<Scalars['String']['output']>
  transaction_hash: Scalars['String']['output']
  /** An object relationship */
  triple?: Maybe<Triples>
  triple_id?: Maybe<Scalars['numeric']['output']>
  type: Scalars['event_type']['output']
}

/** aggregated selection of "event" */
export type Events_Aggregate = {
  __typename?: 'events_aggregate'
  aggregate?: Maybe<Events_Aggregate_Fields>
  nodes: Array<Events>
}

/** aggregate fields of "event" */
export type Events_Aggregate_Fields = {
  __typename?: 'events_aggregate_fields'
  avg?: Maybe<Events_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Events_Max_Fields>
  min?: Maybe<Events_Min_Fields>
  stddev?: Maybe<Events_Stddev_Fields>
  stddev_pop?: Maybe<Events_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Events_Stddev_Samp_Fields>
  sum?: Maybe<Events_Sum_Fields>
  var_pop?: Maybe<Events_Var_Pop_Fields>
  var_samp?: Maybe<Events_Var_Samp_Fields>
  variance?: Maybe<Events_Variance_Fields>
}

/** aggregate fields of "event" */
export type Events_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Events_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** aggregate avg on columns */
export type Events_Avg_Fields = {
  __typename?: 'events_avg_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** Boolean expression to filter rows from the table "event". All fields are combined with a logical 'AND'. */
export type Events_Bool_Exp = {
  _and?: InputMaybe<Array<Events_Bool_Exp>>
  _not?: InputMaybe<Events_Bool_Exp>
  _or?: InputMaybe<Array<Events_Bool_Exp>>
  atom?: InputMaybe<Atoms_Bool_Exp>
  atom_id?: InputMaybe<Numeric_Comparison_Exp>
  block_number?: InputMaybe<Numeric_Comparison_Exp>
  block_timestamp?: InputMaybe<Bigint_Comparison_Exp>
  deposit?: InputMaybe<Deposits_Bool_Exp>
  deposit_id?: InputMaybe<String_Comparison_Exp>
  fee_transfer?: InputMaybe<Fee_Transfers_Bool_Exp>
  fee_transfer_id?: InputMaybe<String_Comparison_Exp>
  id?: InputMaybe<String_Comparison_Exp>
  redemption?: InputMaybe<Redemptions_Bool_Exp>
  redemption_id?: InputMaybe<String_Comparison_Exp>
  transaction_hash?: InputMaybe<String_Comparison_Exp>
  triple?: InputMaybe<Triples_Bool_Exp>
  triple_id?: InputMaybe<Numeric_Comparison_Exp>
  type?: InputMaybe<Event_Type_Comparison_Exp>
}

/** aggregate max on columns */
export type Events_Max_Fields = {
  __typename?: 'events_max_fields'
  atom_id?: Maybe<Scalars['numeric']['output']>
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  deposit_id?: Maybe<Scalars['String']['output']>
  fee_transfer_id?: Maybe<Scalars['String']['output']>
  id?: Maybe<Scalars['String']['output']>
  redemption_id?: Maybe<Scalars['String']['output']>
  transaction_hash?: Maybe<Scalars['String']['output']>
  triple_id?: Maybe<Scalars['numeric']['output']>
  type?: Maybe<Scalars['event_type']['output']>
}

/** aggregate min on columns */
export type Events_Min_Fields = {
  __typename?: 'events_min_fields'
  atom_id?: Maybe<Scalars['numeric']['output']>
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  deposit_id?: Maybe<Scalars['String']['output']>
  fee_transfer_id?: Maybe<Scalars['String']['output']>
  id?: Maybe<Scalars['String']['output']>
  redemption_id?: Maybe<Scalars['String']['output']>
  transaction_hash?: Maybe<Scalars['String']['output']>
  triple_id?: Maybe<Scalars['numeric']['output']>
  type?: Maybe<Scalars['event_type']['output']>
}

/** Ordering options when selecting data from "event". */
export type Events_Order_By = {
  atom?: InputMaybe<Atoms_Order_By>
  atom_id?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  deposit?: InputMaybe<Deposits_Order_By>
  deposit_id?: InputMaybe<Order_By>
  fee_transfer?: InputMaybe<Fee_Transfers_Order_By>
  fee_transfer_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  redemption?: InputMaybe<Redemptions_Order_By>
  redemption_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
  triple?: InputMaybe<Triples_Order_By>
  triple_id?: InputMaybe<Order_By>
  type?: InputMaybe<Order_By>
}

/** select columns of table "event" */
export enum Events_Select_Column {
  /** column name */
  AtomId = 'atom_id',
  /** column name */
  BlockNumber = 'block_number',
  /** column name */
  BlockTimestamp = 'block_timestamp',
  /** column name */
  DepositId = 'deposit_id',
  /** column name */
  FeeTransferId = 'fee_transfer_id',
  /** column name */
  Id = 'id',
  /** column name */
  RedemptionId = 'redemption_id',
  /** column name */
  TransactionHash = 'transaction_hash',
  /** column name */
  TripleId = 'triple_id',
  /** column name */
  Type = 'type',
}

/** aggregate stddev on columns */
export type Events_Stddev_Fields = {
  __typename?: 'events_stddev_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_pop on columns */
export type Events_Stddev_Pop_Fields = {
  __typename?: 'events_stddev_pop_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_samp on columns */
export type Events_Stddev_Samp_Fields = {
  __typename?: 'events_stddev_samp_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** Streaming cursor of the table "events" */
export type Events_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Events_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Events_Stream_Cursor_Value_Input = {
  atom_id?: InputMaybe<Scalars['numeric']['input']>
  block_number?: InputMaybe<Scalars['numeric']['input']>
  block_timestamp?: InputMaybe<Scalars['bigint']['input']>
  deposit_id?: InputMaybe<Scalars['String']['input']>
  fee_transfer_id?: InputMaybe<Scalars['String']['input']>
  id?: InputMaybe<Scalars['String']['input']>
  redemption_id?: InputMaybe<Scalars['String']['input']>
  transaction_hash?: InputMaybe<Scalars['String']['input']>
  triple_id?: InputMaybe<Scalars['numeric']['input']>
  type?: InputMaybe<Scalars['event_type']['input']>
}

/** aggregate sum on columns */
export type Events_Sum_Fields = {
  __typename?: 'events_sum_fields'
  atom_id?: Maybe<Scalars['numeric']['output']>
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  triple_id?: Maybe<Scalars['numeric']['output']>
}

/** aggregate var_pop on columns */
export type Events_Var_Pop_Fields = {
  __typename?: 'events_var_pop_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** aggregate var_samp on columns */
export type Events_Var_Samp_Fields = {
  __typename?: 'events_var_samp_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** aggregate variance on columns */
export type Events_Variance_Fields = {
  __typename?: 'events_variance_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** columns and relationships of "fee_transfer" */
export type Fee_Transfers = {
  __typename?: 'fee_transfers'
  amount: Scalars['numeric']['output']
  block_number: Scalars['numeric']['output']
  block_timestamp: Scalars['bigint']['output']
  id: Scalars['String']['output']
  /** An object relationship */
  receiver: Accounts
  receiver_id: Scalars['String']['output']
  /** An object relationship */
  sender?: Maybe<Accounts>
  sender_id: Scalars['String']['output']
  transaction_hash: Scalars['String']['output']
}

/** aggregated selection of "fee_transfer" */
export type Fee_Transfers_Aggregate = {
  __typename?: 'fee_transfers_aggregate'
  aggregate?: Maybe<Fee_Transfers_Aggregate_Fields>
  nodes: Array<Fee_Transfers>
}

export type Fee_Transfers_Aggregate_Bool_Exp = {
  count?: InputMaybe<Fee_Transfers_Aggregate_Bool_Exp_Count>
}

export type Fee_Transfers_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Fee_Transfers_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
  filter?: InputMaybe<Fee_Transfers_Bool_Exp>
  predicate: Int_Comparison_Exp
}

/** aggregate fields of "fee_transfer" */
export type Fee_Transfers_Aggregate_Fields = {
  __typename?: 'fee_transfers_aggregate_fields'
  avg?: Maybe<Fee_Transfers_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Fee_Transfers_Max_Fields>
  min?: Maybe<Fee_Transfers_Min_Fields>
  stddev?: Maybe<Fee_Transfers_Stddev_Fields>
  stddev_pop?: Maybe<Fee_Transfers_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Fee_Transfers_Stddev_Samp_Fields>
  sum?: Maybe<Fee_Transfers_Sum_Fields>
  var_pop?: Maybe<Fee_Transfers_Var_Pop_Fields>
  var_samp?: Maybe<Fee_Transfers_Var_Samp_Fields>
  variance?: Maybe<Fee_Transfers_Variance_Fields>
}

/** aggregate fields of "fee_transfer" */
export type Fee_Transfers_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Fee_Transfers_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** order by aggregate values of table "fee_transfer" */
export type Fee_Transfers_Aggregate_Order_By = {
  avg?: InputMaybe<Fee_Transfers_Avg_Order_By>
  count?: InputMaybe<Order_By>
  max?: InputMaybe<Fee_Transfers_Max_Order_By>
  min?: InputMaybe<Fee_Transfers_Min_Order_By>
  stddev?: InputMaybe<Fee_Transfers_Stddev_Order_By>
  stddev_pop?: InputMaybe<Fee_Transfers_Stddev_Pop_Order_By>
  stddev_samp?: InputMaybe<Fee_Transfers_Stddev_Samp_Order_By>
  sum?: InputMaybe<Fee_Transfers_Sum_Order_By>
  var_pop?: InputMaybe<Fee_Transfers_Var_Pop_Order_By>
  var_samp?: InputMaybe<Fee_Transfers_Var_Samp_Order_By>
  variance?: InputMaybe<Fee_Transfers_Variance_Order_By>
}

/** aggregate avg on columns */
export type Fee_Transfers_Avg_Fields = {
  __typename?: 'fee_transfers_avg_fields'
  amount?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
}

/** order by avg() on columns of table "fee_transfer" */
export type Fee_Transfers_Avg_Order_By = {
  amount?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
}

/** Boolean expression to filter rows from the table "fee_transfer". All fields are combined with a logical 'AND'. */
export type Fee_Transfers_Bool_Exp = {
  _and?: InputMaybe<Array<Fee_Transfers_Bool_Exp>>
  _not?: InputMaybe<Fee_Transfers_Bool_Exp>
  _or?: InputMaybe<Array<Fee_Transfers_Bool_Exp>>
  amount?: InputMaybe<Numeric_Comparison_Exp>
  block_number?: InputMaybe<Numeric_Comparison_Exp>
  block_timestamp?: InputMaybe<Bigint_Comparison_Exp>
  id?: InputMaybe<String_Comparison_Exp>
  receiver?: InputMaybe<Accounts_Bool_Exp>
  receiver_id?: InputMaybe<String_Comparison_Exp>
  sender?: InputMaybe<Accounts_Bool_Exp>
  sender_id?: InputMaybe<String_Comparison_Exp>
  transaction_hash?: InputMaybe<String_Comparison_Exp>
}

/** aggregate max on columns */
export type Fee_Transfers_Max_Fields = {
  __typename?: 'fee_transfers_max_fields'
  amount?: Maybe<Scalars['numeric']['output']>
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  id?: Maybe<Scalars['String']['output']>
  receiver_id?: Maybe<Scalars['String']['output']>
  sender_id?: Maybe<Scalars['String']['output']>
  transaction_hash?: Maybe<Scalars['String']['output']>
}

/** order by max() on columns of table "fee_transfer" */
export type Fee_Transfers_Max_Order_By = {
  amount?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  receiver_id?: InputMaybe<Order_By>
  sender_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
}

/** aggregate min on columns */
export type Fee_Transfers_Min_Fields = {
  __typename?: 'fee_transfers_min_fields'
  amount?: Maybe<Scalars['numeric']['output']>
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  id?: Maybe<Scalars['String']['output']>
  receiver_id?: Maybe<Scalars['String']['output']>
  sender_id?: Maybe<Scalars['String']['output']>
  transaction_hash?: Maybe<Scalars['String']['output']>
}

/** order by min() on columns of table "fee_transfer" */
export type Fee_Transfers_Min_Order_By = {
  amount?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  receiver_id?: InputMaybe<Order_By>
  sender_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
}

/** Ordering options when selecting data from "fee_transfer". */
export type Fee_Transfers_Order_By = {
  amount?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  receiver?: InputMaybe<Accounts_Order_By>
  receiver_id?: InputMaybe<Order_By>
  sender?: InputMaybe<Accounts_Order_By>
  sender_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
}

/** select columns of table "fee_transfer" */
export enum Fee_Transfers_Select_Column {
  /** column name */
  Amount = 'amount',
  /** column name */
  BlockNumber = 'block_number',
  /** column name */
  BlockTimestamp = 'block_timestamp',
  /** column name */
  Id = 'id',
  /** column name */
  ReceiverId = 'receiver_id',
  /** column name */
  SenderId = 'sender_id',
  /** column name */
  TransactionHash = 'transaction_hash',
}

/** aggregate stddev on columns */
export type Fee_Transfers_Stddev_Fields = {
  __typename?: 'fee_transfers_stddev_fields'
  amount?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
}

/** order by stddev() on columns of table "fee_transfer" */
export type Fee_Transfers_Stddev_Order_By = {
  amount?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
}

/** aggregate stddev_pop on columns */
export type Fee_Transfers_Stddev_Pop_Fields = {
  __typename?: 'fee_transfers_stddev_pop_fields'
  amount?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_pop() on columns of table "fee_transfer" */
export type Fee_Transfers_Stddev_Pop_Order_By = {
  amount?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
}

/** aggregate stddev_samp on columns */
export type Fee_Transfers_Stddev_Samp_Fields = {
  __typename?: 'fee_transfers_stddev_samp_fields'
  amount?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_samp() on columns of table "fee_transfer" */
export type Fee_Transfers_Stddev_Samp_Order_By = {
  amount?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
}

/** Streaming cursor of the table "fee_transfers" */
export type Fee_Transfers_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Fee_Transfers_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Fee_Transfers_Stream_Cursor_Value_Input = {
  amount?: InputMaybe<Scalars['numeric']['input']>
  block_number?: InputMaybe<Scalars['numeric']['input']>
  block_timestamp?: InputMaybe<Scalars['bigint']['input']>
  id?: InputMaybe<Scalars['String']['input']>
  receiver_id?: InputMaybe<Scalars['String']['input']>
  sender_id?: InputMaybe<Scalars['String']['input']>
  transaction_hash?: InputMaybe<Scalars['String']['input']>
}

/** aggregate sum on columns */
export type Fee_Transfers_Sum_Fields = {
  __typename?: 'fee_transfers_sum_fields'
  amount?: Maybe<Scalars['numeric']['output']>
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
}

/** order by sum() on columns of table "fee_transfer" */
export type Fee_Transfers_Sum_Order_By = {
  amount?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
}

/** aggregate var_pop on columns */
export type Fee_Transfers_Var_Pop_Fields = {
  __typename?: 'fee_transfers_var_pop_fields'
  amount?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
}

/** order by var_pop() on columns of table "fee_transfer" */
export type Fee_Transfers_Var_Pop_Order_By = {
  amount?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
}

/** aggregate var_samp on columns */
export type Fee_Transfers_Var_Samp_Fields = {
  __typename?: 'fee_transfers_var_samp_fields'
  amount?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
}

/** order by var_samp() on columns of table "fee_transfer" */
export type Fee_Transfers_Var_Samp_Order_By = {
  amount?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
}

/** aggregate variance on columns */
export type Fee_Transfers_Variance_Fields = {
  __typename?: 'fee_transfers_variance_fields'
  amount?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
}

/** order by variance() on columns of table "fee_transfer" */
export type Fee_Transfers_Variance_Order_By = {
  amount?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
}

/** Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'. */
export type Float8_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['float8']['input']>
  _gt?: InputMaybe<Scalars['float8']['input']>
  _gte?: InputMaybe<Scalars['float8']['input']>
  _in?: InputMaybe<Array<Scalars['float8']['input']>>
  _is_null?: InputMaybe<Scalars['Boolean']['input']>
  _lt?: InputMaybe<Scalars['float8']['input']>
  _lte?: InputMaybe<Scalars['float8']['input']>
  _neq?: InputMaybe<Scalars['float8']['input']>
  _nin?: InputMaybe<Array<Scalars['float8']['input']>>
}

export type Following_Args = {
  address?: InputMaybe<Scalars['String']['input']>
}

/** columns and relationships of "json_object" */
export type Json_Objects = {
  __typename?: 'json_objects'
  /** An object relationship */
  atom?: Maybe<Atoms>
  data: Scalars['jsonb']['output']
  id: Scalars['numeric']['output']
}

/** columns and relationships of "json_object" */
export type Json_ObjectsDataArgs = {
  path?: InputMaybe<Scalars['String']['input']>
}

/** aggregated selection of "json_object" */
export type Json_Objects_Aggregate = {
  __typename?: 'json_objects_aggregate'
  aggregate?: Maybe<Json_Objects_Aggregate_Fields>
  nodes: Array<Json_Objects>
}

/** aggregate fields of "json_object" */
export type Json_Objects_Aggregate_Fields = {
  __typename?: 'json_objects_aggregate_fields'
  avg?: Maybe<Json_Objects_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Json_Objects_Max_Fields>
  min?: Maybe<Json_Objects_Min_Fields>
  stddev?: Maybe<Json_Objects_Stddev_Fields>
  stddev_pop?: Maybe<Json_Objects_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Json_Objects_Stddev_Samp_Fields>
  sum?: Maybe<Json_Objects_Sum_Fields>
  var_pop?: Maybe<Json_Objects_Var_Pop_Fields>
  var_samp?: Maybe<Json_Objects_Var_Samp_Fields>
  variance?: Maybe<Json_Objects_Variance_Fields>
}

/** aggregate fields of "json_object" */
export type Json_Objects_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Json_Objects_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** aggregate avg on columns */
export type Json_Objects_Avg_Fields = {
  __typename?: 'json_objects_avg_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** Boolean expression to filter rows from the table "json_object". All fields are combined with a logical 'AND'. */
export type Json_Objects_Bool_Exp = {
  _and?: InputMaybe<Array<Json_Objects_Bool_Exp>>
  _not?: InputMaybe<Json_Objects_Bool_Exp>
  _or?: InputMaybe<Array<Json_Objects_Bool_Exp>>
  atom?: InputMaybe<Atoms_Bool_Exp>
  data?: InputMaybe<Jsonb_Comparison_Exp>
  id?: InputMaybe<Numeric_Comparison_Exp>
}

/** aggregate max on columns */
export type Json_Objects_Max_Fields = {
  __typename?: 'json_objects_max_fields'
  id?: Maybe<Scalars['numeric']['output']>
}

/** aggregate min on columns */
export type Json_Objects_Min_Fields = {
  __typename?: 'json_objects_min_fields'
  id?: Maybe<Scalars['numeric']['output']>
}

/** Ordering options when selecting data from "json_object". */
export type Json_Objects_Order_By = {
  atom?: InputMaybe<Atoms_Order_By>
  data?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
}

/** select columns of table "json_object" */
export enum Json_Objects_Select_Column {
  /** column name */
  Data = 'data',
  /** column name */
  Id = 'id',
}

/** aggregate stddev on columns */
export type Json_Objects_Stddev_Fields = {
  __typename?: 'json_objects_stddev_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_pop on columns */
export type Json_Objects_Stddev_Pop_Fields = {
  __typename?: 'json_objects_stddev_pop_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_samp on columns */
export type Json_Objects_Stddev_Samp_Fields = {
  __typename?: 'json_objects_stddev_samp_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** Streaming cursor of the table "json_objects" */
export type Json_Objects_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Json_Objects_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Json_Objects_Stream_Cursor_Value_Input = {
  data?: InputMaybe<Scalars['jsonb']['input']>
  id?: InputMaybe<Scalars['numeric']['input']>
}

/** aggregate sum on columns */
export type Json_Objects_Sum_Fields = {
  __typename?: 'json_objects_sum_fields'
  id?: Maybe<Scalars['numeric']['output']>
}

/** aggregate var_pop on columns */
export type Json_Objects_Var_Pop_Fields = {
  __typename?: 'json_objects_var_pop_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate var_samp on columns */
export type Json_Objects_Var_Samp_Fields = {
  __typename?: 'json_objects_var_samp_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate variance on columns */
export type Json_Objects_Variance_Fields = {
  __typename?: 'json_objects_variance_fields'
  id?: Maybe<Scalars['Float']['output']>
}

export type Jsonb_Cast_Exp = {
  String?: InputMaybe<String_Comparison_Exp>
}

/** Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'. */
export type Jsonb_Comparison_Exp = {
  _cast?: InputMaybe<Jsonb_Cast_Exp>
  /** is the column contained in the given json value */
  _contained_in?: InputMaybe<Scalars['jsonb']['input']>
  /** does the column contain the given json value at the top level */
  _contains?: InputMaybe<Scalars['jsonb']['input']>
  _eq?: InputMaybe<Scalars['jsonb']['input']>
  _gt?: InputMaybe<Scalars['jsonb']['input']>
  _gte?: InputMaybe<Scalars['jsonb']['input']>
  /** does the string exist as a top-level key in the column */
  _has_key?: InputMaybe<Scalars['String']['input']>
  /** do all of these strings exist as top-level keys in the column */
  _has_keys_all?: InputMaybe<Array<Scalars['String']['input']>>
  /** do any of these strings exist as top-level keys in the column */
  _has_keys_any?: InputMaybe<Array<Scalars['String']['input']>>
  _in?: InputMaybe<Array<Scalars['jsonb']['input']>>
  _is_null?: InputMaybe<Scalars['Boolean']['input']>
  _lt?: InputMaybe<Scalars['jsonb']['input']>
  _lte?: InputMaybe<Scalars['jsonb']['input']>
  _neq?: InputMaybe<Scalars['jsonb']['input']>
  _nin?: InputMaybe<Array<Scalars['jsonb']['input']>>
}

/** mutation root */
export type Mutation_Root = {
  __typename?: 'mutation_root'
  /** Uploads and pins Organization to IPFS */
  pinOrganization?: Maybe<PinOutput>
  /** Uploads and pins Person to IPFS */
  pinPerson?: Maybe<PinOutput>
  /** Uploads and pins Thing to IPFS */
  pinThing?: Maybe<PinOutput>
}

/** mutation root */
export type Mutation_RootPinOrganizationArgs = {
  organization: PinOrganizationInput
}

/** mutation root */
export type Mutation_RootPinPersonArgs = {
  person: PinPersonInput
}

/** mutation root */
export type Mutation_RootPinThingArgs = {
  thing: PinThingInput
}

/** Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'. */
export type Numeric_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['numeric']['input']>
  _gt?: InputMaybe<Scalars['numeric']['input']>
  _gte?: InputMaybe<Scalars['numeric']['input']>
  _in?: InputMaybe<Array<Scalars['numeric']['input']>>
  _is_null?: InputMaybe<Scalars['Boolean']['input']>
  _lt?: InputMaybe<Scalars['numeric']['input']>
  _lte?: InputMaybe<Scalars['numeric']['input']>
  _neq?: InputMaybe<Scalars['numeric']['input']>
  _nin?: InputMaybe<Array<Scalars['numeric']['input']>>
}

/** column ordering options */
export enum Order_By {
  /** in ascending order, nulls last */
  Asc = 'asc',
  /** in ascending order, nulls first */
  AscNullsFirst = 'asc_nulls_first',
  /** in ascending order, nulls last */
  AscNullsLast = 'asc_nulls_last',
  /** in descending order, nulls first */
  Desc = 'desc',
  /** in descending order, nulls first */
  DescNullsFirst = 'desc_nulls_first',
  /** in descending order, nulls last */
  DescNullsLast = 'desc_nulls_last',
}

/** columns and relationships of "organization" */
export type Organizations = {
  __typename?: 'organizations'
  /** An object relationship */
  atom?: Maybe<Atoms>
  description?: Maybe<Scalars['String']['output']>
  email?: Maybe<Scalars['String']['output']>
  id: Scalars['numeric']['output']
  image?: Maybe<Scalars['String']['output']>
  name?: Maybe<Scalars['String']['output']>
  url?: Maybe<Scalars['String']['output']>
}

/** aggregated selection of "organization" */
export type Organizations_Aggregate = {
  __typename?: 'organizations_aggregate'
  aggregate?: Maybe<Organizations_Aggregate_Fields>
  nodes: Array<Organizations>
}

/** aggregate fields of "organization" */
export type Organizations_Aggregate_Fields = {
  __typename?: 'organizations_aggregate_fields'
  avg?: Maybe<Organizations_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Organizations_Max_Fields>
  min?: Maybe<Organizations_Min_Fields>
  stddev?: Maybe<Organizations_Stddev_Fields>
  stddev_pop?: Maybe<Organizations_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Organizations_Stddev_Samp_Fields>
  sum?: Maybe<Organizations_Sum_Fields>
  var_pop?: Maybe<Organizations_Var_Pop_Fields>
  var_samp?: Maybe<Organizations_Var_Samp_Fields>
  variance?: Maybe<Organizations_Variance_Fields>
}

/** aggregate fields of "organization" */
export type Organizations_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Organizations_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** aggregate avg on columns */
export type Organizations_Avg_Fields = {
  __typename?: 'organizations_avg_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** Boolean expression to filter rows from the table "organization". All fields are combined with a logical 'AND'. */
export type Organizations_Bool_Exp = {
  _and?: InputMaybe<Array<Organizations_Bool_Exp>>
  _not?: InputMaybe<Organizations_Bool_Exp>
  _or?: InputMaybe<Array<Organizations_Bool_Exp>>
  atom?: InputMaybe<Atoms_Bool_Exp>
  description?: InputMaybe<String_Comparison_Exp>
  email?: InputMaybe<String_Comparison_Exp>
  id?: InputMaybe<Numeric_Comparison_Exp>
  image?: InputMaybe<String_Comparison_Exp>
  name?: InputMaybe<String_Comparison_Exp>
  url?: InputMaybe<String_Comparison_Exp>
}

/** aggregate max on columns */
export type Organizations_Max_Fields = {
  __typename?: 'organizations_max_fields'
  description?: Maybe<Scalars['String']['output']>
  email?: Maybe<Scalars['String']['output']>
  id?: Maybe<Scalars['numeric']['output']>
  image?: Maybe<Scalars['String']['output']>
  name?: Maybe<Scalars['String']['output']>
  url?: Maybe<Scalars['String']['output']>
}

/** aggregate min on columns */
export type Organizations_Min_Fields = {
  __typename?: 'organizations_min_fields'
  description?: Maybe<Scalars['String']['output']>
  email?: Maybe<Scalars['String']['output']>
  id?: Maybe<Scalars['numeric']['output']>
  image?: Maybe<Scalars['String']['output']>
  name?: Maybe<Scalars['String']['output']>
  url?: Maybe<Scalars['String']['output']>
}

/** Ordering options when selecting data from "organization". */
export type Organizations_Order_By = {
  atom?: InputMaybe<Atoms_Order_By>
  description?: InputMaybe<Order_By>
  email?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  image?: InputMaybe<Order_By>
  name?: InputMaybe<Order_By>
  url?: InputMaybe<Order_By>
}

/** select columns of table "organization" */
export enum Organizations_Select_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id',
  /** column name */
  Image = 'image',
  /** column name */
  Name = 'name',
  /** column name */
  Url = 'url',
}

/** aggregate stddev on columns */
export type Organizations_Stddev_Fields = {
  __typename?: 'organizations_stddev_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_pop on columns */
export type Organizations_Stddev_Pop_Fields = {
  __typename?: 'organizations_stddev_pop_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_samp on columns */
export type Organizations_Stddev_Samp_Fields = {
  __typename?: 'organizations_stddev_samp_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** Streaming cursor of the table "organizations" */
export type Organizations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Organizations_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Organizations_Stream_Cursor_Value_Input = {
  description?: InputMaybe<Scalars['String']['input']>
  email?: InputMaybe<Scalars['String']['input']>
  id?: InputMaybe<Scalars['numeric']['input']>
  image?: InputMaybe<Scalars['String']['input']>
  name?: InputMaybe<Scalars['String']['input']>
  url?: InputMaybe<Scalars['String']['input']>
}

/** aggregate sum on columns */
export type Organizations_Sum_Fields = {
  __typename?: 'organizations_sum_fields'
  id?: Maybe<Scalars['numeric']['output']>
}

/** aggregate var_pop on columns */
export type Organizations_Var_Pop_Fields = {
  __typename?: 'organizations_var_pop_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate var_samp on columns */
export type Organizations_Var_Samp_Fields = {
  __typename?: 'organizations_var_samp_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate variance on columns */
export type Organizations_Variance_Fields = {
  __typename?: 'organizations_variance_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** columns and relationships of "person" */
export type Persons = {
  __typename?: 'persons'
  /** An object relationship */
  atom?: Maybe<Atoms>
  cached_image?: Maybe<Cached_Images_Cached_Image>
  description?: Maybe<Scalars['String']['output']>
  email?: Maybe<Scalars['String']['output']>
  id: Scalars['numeric']['output']
  identifier?: Maybe<Scalars['String']['output']>
  image?: Maybe<Scalars['String']['output']>
  name?: Maybe<Scalars['String']['output']>
  url?: Maybe<Scalars['String']['output']>
}

/** aggregated selection of "person" */
export type Persons_Aggregate = {
  __typename?: 'persons_aggregate'
  aggregate?: Maybe<Persons_Aggregate_Fields>
  nodes: Array<Persons>
}

/** aggregate fields of "person" */
export type Persons_Aggregate_Fields = {
  __typename?: 'persons_aggregate_fields'
  avg?: Maybe<Persons_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Persons_Max_Fields>
  min?: Maybe<Persons_Min_Fields>
  stddev?: Maybe<Persons_Stddev_Fields>
  stddev_pop?: Maybe<Persons_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Persons_Stddev_Samp_Fields>
  sum?: Maybe<Persons_Sum_Fields>
  var_pop?: Maybe<Persons_Var_Pop_Fields>
  var_samp?: Maybe<Persons_Var_Samp_Fields>
  variance?: Maybe<Persons_Variance_Fields>
}

/** aggregate fields of "person" */
export type Persons_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Persons_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** aggregate avg on columns */
export type Persons_Avg_Fields = {
  __typename?: 'persons_avg_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** Boolean expression to filter rows from the table "person". All fields are combined with a logical 'AND'. */
export type Persons_Bool_Exp = {
  _and?: InputMaybe<Array<Persons_Bool_Exp>>
  _not?: InputMaybe<Persons_Bool_Exp>
  _or?: InputMaybe<Array<Persons_Bool_Exp>>
  atom?: InputMaybe<Atoms_Bool_Exp>
  description?: InputMaybe<String_Comparison_Exp>
  email?: InputMaybe<String_Comparison_Exp>
  id?: InputMaybe<Numeric_Comparison_Exp>
  identifier?: InputMaybe<String_Comparison_Exp>
  image?: InputMaybe<String_Comparison_Exp>
  name?: InputMaybe<String_Comparison_Exp>
  url?: InputMaybe<String_Comparison_Exp>
}

/** aggregate max on columns */
export type Persons_Max_Fields = {
  __typename?: 'persons_max_fields'
  description?: Maybe<Scalars['String']['output']>
  email?: Maybe<Scalars['String']['output']>
  id?: Maybe<Scalars['numeric']['output']>
  identifier?: Maybe<Scalars['String']['output']>
  image?: Maybe<Scalars['String']['output']>
  name?: Maybe<Scalars['String']['output']>
  url?: Maybe<Scalars['String']['output']>
}

/** aggregate min on columns */
export type Persons_Min_Fields = {
  __typename?: 'persons_min_fields'
  description?: Maybe<Scalars['String']['output']>
  email?: Maybe<Scalars['String']['output']>
  id?: Maybe<Scalars['numeric']['output']>
  identifier?: Maybe<Scalars['String']['output']>
  image?: Maybe<Scalars['String']['output']>
  name?: Maybe<Scalars['String']['output']>
  url?: Maybe<Scalars['String']['output']>
}

/** Ordering options when selecting data from "person". */
export type Persons_Order_By = {
  atom?: InputMaybe<Atoms_Order_By>
  description?: InputMaybe<Order_By>
  email?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  identifier?: InputMaybe<Order_By>
  image?: InputMaybe<Order_By>
  name?: InputMaybe<Order_By>
  url?: InputMaybe<Order_By>
}

/** select columns of table "person" */
export enum Persons_Select_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id',
  /** column name */
  Identifier = 'identifier',
  /** column name */
  Image = 'image',
  /** column name */
  Name = 'name',
  /** column name */
  Url = 'url',
}

/** aggregate stddev on columns */
export type Persons_Stddev_Fields = {
  __typename?: 'persons_stddev_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_pop on columns */
export type Persons_Stddev_Pop_Fields = {
  __typename?: 'persons_stddev_pop_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_samp on columns */
export type Persons_Stddev_Samp_Fields = {
  __typename?: 'persons_stddev_samp_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** Streaming cursor of the table "persons" */
export type Persons_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Persons_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Persons_Stream_Cursor_Value_Input = {
  description?: InputMaybe<Scalars['String']['input']>
  email?: InputMaybe<Scalars['String']['input']>
  id?: InputMaybe<Scalars['numeric']['input']>
  identifier?: InputMaybe<Scalars['String']['input']>
  image?: InputMaybe<Scalars['String']['input']>
  name?: InputMaybe<Scalars['String']['input']>
  url?: InputMaybe<Scalars['String']['input']>
}

/** aggregate sum on columns */
export type Persons_Sum_Fields = {
  __typename?: 'persons_sum_fields'
  id?: Maybe<Scalars['numeric']['output']>
}

/** aggregate var_pop on columns */
export type Persons_Var_Pop_Fields = {
  __typename?: 'persons_var_pop_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate var_samp on columns */
export type Persons_Var_Samp_Fields = {
  __typename?: 'persons_var_samp_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate variance on columns */
export type Persons_Variance_Fields = {
  __typename?: 'persons_variance_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** columns and relationships of "position" */
export type Positions = {
  __typename?: 'positions'
  /** An object relationship */
  account?: Maybe<Accounts>
  account_id: Scalars['String']['output']
  curve_id: Scalars['numeric']['output']
  id: Scalars['String']['output']
  shares: Scalars['numeric']['output']
  /** An object relationship */
  term: Terms
  term_id: Scalars['numeric']['output']
  /** An object relationship */
  vault?: Maybe<Vaults>
}

/** aggregated selection of "position" */
export type Positions_Aggregate = {
  __typename?: 'positions_aggregate'
  aggregate?: Maybe<Positions_Aggregate_Fields>
  nodes: Array<Positions>
}

export type Positions_Aggregate_Bool_Exp = {
  count?: InputMaybe<Positions_Aggregate_Bool_Exp_Count>
}

export type Positions_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Positions_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
  filter?: InputMaybe<Positions_Bool_Exp>
  predicate: Int_Comparison_Exp
}

/** aggregate fields of "position" */
export type Positions_Aggregate_Fields = {
  __typename?: 'positions_aggregate_fields'
  avg?: Maybe<Positions_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Positions_Max_Fields>
  min?: Maybe<Positions_Min_Fields>
  stddev?: Maybe<Positions_Stddev_Fields>
  stddev_pop?: Maybe<Positions_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Positions_Stddev_Samp_Fields>
  sum?: Maybe<Positions_Sum_Fields>
  var_pop?: Maybe<Positions_Var_Pop_Fields>
  var_samp?: Maybe<Positions_Var_Samp_Fields>
  variance?: Maybe<Positions_Variance_Fields>
}

/** aggregate fields of "position" */
export type Positions_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Positions_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** order by aggregate values of table "position" */
export type Positions_Aggregate_Order_By = {
  avg?: InputMaybe<Positions_Avg_Order_By>
  count?: InputMaybe<Order_By>
  max?: InputMaybe<Positions_Max_Order_By>
  min?: InputMaybe<Positions_Min_Order_By>
  stddev?: InputMaybe<Positions_Stddev_Order_By>
  stddev_pop?: InputMaybe<Positions_Stddev_Pop_Order_By>
  stddev_samp?: InputMaybe<Positions_Stddev_Samp_Order_By>
  sum?: InputMaybe<Positions_Sum_Order_By>
  var_pop?: InputMaybe<Positions_Var_Pop_Order_By>
  var_samp?: InputMaybe<Positions_Var_Samp_Order_By>
  variance?: InputMaybe<Positions_Variance_Order_By>
}

/** aggregate avg on columns */
export type Positions_Avg_Fields = {
  __typename?: 'positions_avg_fields'
  curve_id?: Maybe<Scalars['Float']['output']>
  shares?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by avg() on columns of table "position" */
export type Positions_Avg_Order_By = {
  curve_id?: InputMaybe<Order_By>
  shares?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** Boolean expression to filter rows from the table "position". All fields are combined with a logical 'AND'. */
export type Positions_Bool_Exp = {
  _and?: InputMaybe<Array<Positions_Bool_Exp>>
  _not?: InputMaybe<Positions_Bool_Exp>
  _or?: InputMaybe<Array<Positions_Bool_Exp>>
  account?: InputMaybe<Accounts_Bool_Exp>
  account_id?: InputMaybe<String_Comparison_Exp>
  curve_id?: InputMaybe<Numeric_Comparison_Exp>
  id?: InputMaybe<String_Comparison_Exp>
  shares?: InputMaybe<Numeric_Comparison_Exp>
  term?: InputMaybe<Terms_Bool_Exp>
  term_id?: InputMaybe<Numeric_Comparison_Exp>
  vault?: InputMaybe<Vaults_Bool_Exp>
}

/** aggregate max on columns */
export type Positions_Max_Fields = {
  __typename?: 'positions_max_fields'
  account_id?: Maybe<Scalars['String']['output']>
  curve_id?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['String']['output']>
  shares?: Maybe<Scalars['numeric']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
}

/** order by max() on columns of table "position" */
export type Positions_Max_Order_By = {
  account_id?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  shares?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate min on columns */
export type Positions_Min_Fields = {
  __typename?: 'positions_min_fields'
  account_id?: Maybe<Scalars['String']['output']>
  curve_id?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['String']['output']>
  shares?: Maybe<Scalars['numeric']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
}

/** order by min() on columns of table "position" */
export type Positions_Min_Order_By = {
  account_id?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  shares?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** Ordering options when selecting data from "position". */
export type Positions_Order_By = {
  account?: InputMaybe<Accounts_Order_By>
  account_id?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  shares?: InputMaybe<Order_By>
  term?: InputMaybe<Terms_Order_By>
  term_id?: InputMaybe<Order_By>
  vault?: InputMaybe<Vaults_Order_By>
}

/** select columns of table "position" */
export enum Positions_Select_Column {
  /** column name */
  AccountId = 'account_id',
  /** column name */
  CurveId = 'curve_id',
  /** column name */
  Id = 'id',
  /** column name */
  Shares = 'shares',
  /** column name */
  TermId = 'term_id',
}

/** aggregate stddev on columns */
export type Positions_Stddev_Fields = {
  __typename?: 'positions_stddev_fields'
  curve_id?: Maybe<Scalars['Float']['output']>
  shares?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev() on columns of table "position" */
export type Positions_Stddev_Order_By = {
  curve_id?: InputMaybe<Order_By>
  shares?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate stddev_pop on columns */
export type Positions_Stddev_Pop_Fields = {
  __typename?: 'positions_stddev_pop_fields'
  curve_id?: Maybe<Scalars['Float']['output']>
  shares?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_pop() on columns of table "position" */
export type Positions_Stddev_Pop_Order_By = {
  curve_id?: InputMaybe<Order_By>
  shares?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate stddev_samp on columns */
export type Positions_Stddev_Samp_Fields = {
  __typename?: 'positions_stddev_samp_fields'
  curve_id?: Maybe<Scalars['Float']['output']>
  shares?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_samp() on columns of table "position" */
export type Positions_Stddev_Samp_Order_By = {
  curve_id?: InputMaybe<Order_By>
  shares?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** Streaming cursor of the table "positions" */
export type Positions_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Positions_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Positions_Stream_Cursor_Value_Input = {
  account_id?: InputMaybe<Scalars['String']['input']>
  curve_id?: InputMaybe<Scalars['numeric']['input']>
  id?: InputMaybe<Scalars['String']['input']>
  shares?: InputMaybe<Scalars['numeric']['input']>
  term_id?: InputMaybe<Scalars['numeric']['input']>
}

/** aggregate sum on columns */
export type Positions_Sum_Fields = {
  __typename?: 'positions_sum_fields'
  curve_id?: Maybe<Scalars['numeric']['output']>
  shares?: Maybe<Scalars['numeric']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
}

/** order by sum() on columns of table "position" */
export type Positions_Sum_Order_By = {
  curve_id?: InputMaybe<Order_By>
  shares?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate var_pop on columns */
export type Positions_Var_Pop_Fields = {
  __typename?: 'positions_var_pop_fields'
  curve_id?: Maybe<Scalars['Float']['output']>
  shares?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by var_pop() on columns of table "position" */
export type Positions_Var_Pop_Order_By = {
  curve_id?: InputMaybe<Order_By>
  shares?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate var_samp on columns */
export type Positions_Var_Samp_Fields = {
  __typename?: 'positions_var_samp_fields'
  curve_id?: Maybe<Scalars['Float']['output']>
  shares?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by var_samp() on columns of table "position" */
export type Positions_Var_Samp_Order_By = {
  curve_id?: InputMaybe<Order_By>
  shares?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate variance on columns */
export type Positions_Variance_Fields = {
  __typename?: 'positions_variance_fields'
  curve_id?: Maybe<Scalars['Float']['output']>
  shares?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by variance() on columns of table "position" */
export type Positions_Variance_Order_By = {
  curve_id?: InputMaybe<Order_By>
  shares?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** columns and relationships of "predicate_object" */
export type Predicate_Objects = {
  __typename?: 'predicate_objects'
  claim_count: Scalars['Int']['output']
  id: Scalars['String']['output']
  /** An object relationship */
  object: Atoms
  object_id: Scalars['numeric']['output']
  /** An object relationship */
  predicate: Atoms
  predicate_id: Scalars['numeric']['output']
  triple_count: Scalars['Int']['output']
}

/** aggregated selection of "predicate_object" */
export type Predicate_Objects_Aggregate = {
  __typename?: 'predicate_objects_aggregate'
  aggregate?: Maybe<Predicate_Objects_Aggregate_Fields>
  nodes: Array<Predicate_Objects>
}

export type Predicate_Objects_Aggregate_Bool_Exp = {
  count?: InputMaybe<Predicate_Objects_Aggregate_Bool_Exp_Count>
}

export type Predicate_Objects_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Predicate_Objects_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
  filter?: InputMaybe<Predicate_Objects_Bool_Exp>
  predicate: Int_Comparison_Exp
}

/** aggregate fields of "predicate_object" */
export type Predicate_Objects_Aggregate_Fields = {
  __typename?: 'predicate_objects_aggregate_fields'
  avg?: Maybe<Predicate_Objects_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Predicate_Objects_Max_Fields>
  min?: Maybe<Predicate_Objects_Min_Fields>
  stddev?: Maybe<Predicate_Objects_Stddev_Fields>
  stddev_pop?: Maybe<Predicate_Objects_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Predicate_Objects_Stddev_Samp_Fields>
  sum?: Maybe<Predicate_Objects_Sum_Fields>
  var_pop?: Maybe<Predicate_Objects_Var_Pop_Fields>
  var_samp?: Maybe<Predicate_Objects_Var_Samp_Fields>
  variance?: Maybe<Predicate_Objects_Variance_Fields>
}

/** aggregate fields of "predicate_object" */
export type Predicate_Objects_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Predicate_Objects_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** order by aggregate values of table "predicate_object" */
export type Predicate_Objects_Aggregate_Order_By = {
  avg?: InputMaybe<Predicate_Objects_Avg_Order_By>
  count?: InputMaybe<Order_By>
  max?: InputMaybe<Predicate_Objects_Max_Order_By>
  min?: InputMaybe<Predicate_Objects_Min_Order_By>
  stddev?: InputMaybe<Predicate_Objects_Stddev_Order_By>
  stddev_pop?: InputMaybe<Predicate_Objects_Stddev_Pop_Order_By>
  stddev_samp?: InputMaybe<Predicate_Objects_Stddev_Samp_Order_By>
  sum?: InputMaybe<Predicate_Objects_Sum_Order_By>
  var_pop?: InputMaybe<Predicate_Objects_Var_Pop_Order_By>
  var_samp?: InputMaybe<Predicate_Objects_Var_Samp_Order_By>
  variance?: InputMaybe<Predicate_Objects_Variance_Order_By>
}

/** aggregate avg on columns */
export type Predicate_Objects_Avg_Fields = {
  __typename?: 'predicate_objects_avg_fields'
  claim_count?: Maybe<Scalars['Float']['output']>
  object_id?: Maybe<Scalars['Float']['output']>
  predicate_id?: Maybe<Scalars['Float']['output']>
  triple_count?: Maybe<Scalars['Float']['output']>
}

/** order by avg() on columns of table "predicate_object" */
export type Predicate_Objects_Avg_Order_By = {
  claim_count?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  triple_count?: InputMaybe<Order_By>
}

/** Boolean expression to filter rows from the table "predicate_object". All fields are combined with a logical 'AND'. */
export type Predicate_Objects_Bool_Exp = {
  _and?: InputMaybe<Array<Predicate_Objects_Bool_Exp>>
  _not?: InputMaybe<Predicate_Objects_Bool_Exp>
  _or?: InputMaybe<Array<Predicate_Objects_Bool_Exp>>
  claim_count?: InputMaybe<Int_Comparison_Exp>
  id?: InputMaybe<String_Comparison_Exp>
  object?: InputMaybe<Atoms_Bool_Exp>
  object_id?: InputMaybe<Numeric_Comparison_Exp>
  predicate?: InputMaybe<Atoms_Bool_Exp>
  predicate_id?: InputMaybe<Numeric_Comparison_Exp>
  triple_count?: InputMaybe<Int_Comparison_Exp>
}

/** aggregate max on columns */
export type Predicate_Objects_Max_Fields = {
  __typename?: 'predicate_objects_max_fields'
  claim_count?: Maybe<Scalars['Int']['output']>
  id?: Maybe<Scalars['String']['output']>
  object_id?: Maybe<Scalars['numeric']['output']>
  predicate_id?: Maybe<Scalars['numeric']['output']>
  triple_count?: Maybe<Scalars['Int']['output']>
}

/** order by max() on columns of table "predicate_object" */
export type Predicate_Objects_Max_Order_By = {
  claim_count?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  triple_count?: InputMaybe<Order_By>
}

/** aggregate min on columns */
export type Predicate_Objects_Min_Fields = {
  __typename?: 'predicate_objects_min_fields'
  claim_count?: Maybe<Scalars['Int']['output']>
  id?: Maybe<Scalars['String']['output']>
  object_id?: Maybe<Scalars['numeric']['output']>
  predicate_id?: Maybe<Scalars['numeric']['output']>
  triple_count?: Maybe<Scalars['Int']['output']>
}

/** order by min() on columns of table "predicate_object" */
export type Predicate_Objects_Min_Order_By = {
  claim_count?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  triple_count?: InputMaybe<Order_By>
}

/** Ordering options when selecting data from "predicate_object". */
export type Predicate_Objects_Order_By = {
  claim_count?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  object?: InputMaybe<Atoms_Order_By>
  object_id?: InputMaybe<Order_By>
  predicate?: InputMaybe<Atoms_Order_By>
  predicate_id?: InputMaybe<Order_By>
  triple_count?: InputMaybe<Order_By>
}

/** select columns of table "predicate_object" */
export enum Predicate_Objects_Select_Column {
  /** column name */
  ClaimCount = 'claim_count',
  /** column name */
  Id = 'id',
  /** column name */
  ObjectId = 'object_id',
  /** column name */
  PredicateId = 'predicate_id',
  /** column name */
  TripleCount = 'triple_count',
}

/** aggregate stddev on columns */
export type Predicate_Objects_Stddev_Fields = {
  __typename?: 'predicate_objects_stddev_fields'
  claim_count?: Maybe<Scalars['Float']['output']>
  object_id?: Maybe<Scalars['Float']['output']>
  predicate_id?: Maybe<Scalars['Float']['output']>
  triple_count?: Maybe<Scalars['Float']['output']>
}

/** order by stddev() on columns of table "predicate_object" */
export type Predicate_Objects_Stddev_Order_By = {
  claim_count?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  triple_count?: InputMaybe<Order_By>
}

/** aggregate stddev_pop on columns */
export type Predicate_Objects_Stddev_Pop_Fields = {
  __typename?: 'predicate_objects_stddev_pop_fields'
  claim_count?: Maybe<Scalars['Float']['output']>
  object_id?: Maybe<Scalars['Float']['output']>
  predicate_id?: Maybe<Scalars['Float']['output']>
  triple_count?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_pop() on columns of table "predicate_object" */
export type Predicate_Objects_Stddev_Pop_Order_By = {
  claim_count?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  triple_count?: InputMaybe<Order_By>
}

/** aggregate stddev_samp on columns */
export type Predicate_Objects_Stddev_Samp_Fields = {
  __typename?: 'predicate_objects_stddev_samp_fields'
  claim_count?: Maybe<Scalars['Float']['output']>
  object_id?: Maybe<Scalars['Float']['output']>
  predicate_id?: Maybe<Scalars['Float']['output']>
  triple_count?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_samp() on columns of table "predicate_object" */
export type Predicate_Objects_Stddev_Samp_Order_By = {
  claim_count?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  triple_count?: InputMaybe<Order_By>
}

/** Streaming cursor of the table "predicate_objects" */
export type Predicate_Objects_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Predicate_Objects_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Predicate_Objects_Stream_Cursor_Value_Input = {
  claim_count?: InputMaybe<Scalars['Int']['input']>
  id?: InputMaybe<Scalars['String']['input']>
  object_id?: InputMaybe<Scalars['numeric']['input']>
  predicate_id?: InputMaybe<Scalars['numeric']['input']>
  triple_count?: InputMaybe<Scalars['Int']['input']>
}

/** aggregate sum on columns */
export type Predicate_Objects_Sum_Fields = {
  __typename?: 'predicate_objects_sum_fields'
  claim_count?: Maybe<Scalars['Int']['output']>
  object_id?: Maybe<Scalars['numeric']['output']>
  predicate_id?: Maybe<Scalars['numeric']['output']>
  triple_count?: Maybe<Scalars['Int']['output']>
}

/** order by sum() on columns of table "predicate_object" */
export type Predicate_Objects_Sum_Order_By = {
  claim_count?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  triple_count?: InputMaybe<Order_By>
}

/** aggregate var_pop on columns */
export type Predicate_Objects_Var_Pop_Fields = {
  __typename?: 'predicate_objects_var_pop_fields'
  claim_count?: Maybe<Scalars['Float']['output']>
  object_id?: Maybe<Scalars['Float']['output']>
  predicate_id?: Maybe<Scalars['Float']['output']>
  triple_count?: Maybe<Scalars['Float']['output']>
}

/** order by var_pop() on columns of table "predicate_object" */
export type Predicate_Objects_Var_Pop_Order_By = {
  claim_count?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  triple_count?: InputMaybe<Order_By>
}

/** aggregate var_samp on columns */
export type Predicate_Objects_Var_Samp_Fields = {
  __typename?: 'predicate_objects_var_samp_fields'
  claim_count?: Maybe<Scalars['Float']['output']>
  object_id?: Maybe<Scalars['Float']['output']>
  predicate_id?: Maybe<Scalars['Float']['output']>
  triple_count?: Maybe<Scalars['Float']['output']>
}

/** order by var_samp() on columns of table "predicate_object" */
export type Predicate_Objects_Var_Samp_Order_By = {
  claim_count?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  triple_count?: InputMaybe<Order_By>
}

/** aggregate variance on columns */
export type Predicate_Objects_Variance_Fields = {
  __typename?: 'predicate_objects_variance_fields'
  claim_count?: Maybe<Scalars['Float']['output']>
  object_id?: Maybe<Scalars['Float']['output']>
  predicate_id?: Maybe<Scalars['Float']['output']>
  triple_count?: Maybe<Scalars['Float']['output']>
}

/** order by variance() on columns of table "predicate_object" */
export type Predicate_Objects_Variance_Order_By = {
  claim_count?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  triple_count?: InputMaybe<Order_By>
}

export type Query_Root = {
  __typename?: 'query_root'
  /** fetch data from the table: "account" using primary key columns */
  account?: Maybe<Accounts>
  /** An array relationship */
  accounts: Array<Accounts>
  /** An aggregate relationship */
  accounts_aggregate: Accounts_Aggregate
  /** execute function "accounts_that_claim_about_account" which returns "account" */
  accounts_that_claim_about_account: Array<Accounts>
  /** execute function "accounts_that_claim_about_account" and query aggregates on result of table type "account" */
  accounts_that_claim_about_account_aggregate: Accounts_Aggregate
  /** fetch data from the table: "atom" using primary key columns */
  atom?: Maybe<Atoms>
  /** fetch data from the table: "atom_value" using primary key columns */
  atom_value?: Maybe<Atom_Values>
  /** fetch data from the table: "atom_value" */
  atom_values: Array<Atom_Values>
  /** fetch aggregated fields from the table: "atom_value" */
  atom_values_aggregate: Atom_Values_Aggregate
  /** An array relationship */
  atoms: Array<Atoms>
  /** An aggregate relationship */
  atoms_aggregate: Atoms_Aggregate
  /** fetch data from the table: "book" using primary key columns */
  book?: Maybe<Books>
  /** fetch data from the table: "book" */
  books: Array<Books>
  /** fetch aggregated fields from the table: "book" */
  books_aggregate: Books_Aggregate
  /** fetch data from the table: "byte_object" */
  byte_object: Array<Byte_Object>
  /** fetch aggregated fields from the table: "byte_object" */
  byte_object_aggregate: Byte_Object_Aggregate
  /** fetch data from the table: "byte_object" using primary key columns */
  byte_object_by_pk?: Maybe<Byte_Object>
  /** fetch data from the table: "cached_images.cached_image" */
  cached_images_cached_image: Array<Cached_Images_Cached_Image>
  /** fetch data from the table: "cached_images.cached_image" using primary key columns */
  cached_images_cached_image_by_pk?: Maybe<Cached_Images_Cached_Image>
  /** fetch data from the table: "caip10" using primary key columns */
  caip10?: Maybe<Caip10>
  /** fetch aggregated fields from the table: "caip10" */
  caip10_aggregate: Caip10_Aggregate
  /** fetch data from the table: "caip10" */
  caip10s: Array<Caip10>
  /** fetch data from the table: "chainlink_price" using primary key columns */
  chainlink_price?: Maybe<Chainlink_Prices>
  /** fetch data from the table: "chainlink_price" */
  chainlink_prices: Array<Chainlink_Prices>
  /** fetch data from the table: "claim" using primary key columns */
  claim?: Maybe<Claims>
  /** An array relationship */
  claims: Array<Claims>
  /** An aggregate relationship */
  claims_aggregate: Claims_Aggregate
  /** execute function "claims_from_following" which returns "claim" */
  claims_from_following: Array<Claims>
  /** execute function "claims_from_following" and query aggregates on result of table type "claim" */
  claims_from_following_aggregate: Claims_Aggregate
  /** fetch data from the table: "deposit" using primary key columns */
  deposit?: Maybe<Deposits>
  /** An array relationship */
  deposits: Array<Deposits>
  /** An aggregate relationship */
  deposits_aggregate: Deposits_Aggregate
  /** fetch data from the table: "event" using primary key columns */
  event?: Maybe<Events>
  /** fetch data from the table: "event" */
  events: Array<Events>
  /** fetch aggregated fields from the table: "event" */
  events_aggregate: Events_Aggregate
  /** fetch data from the table: "fee_transfer" using primary key columns */
  fee_transfer?: Maybe<Fee_Transfers>
  /** An array relationship */
  fee_transfers: Array<Fee_Transfers>
  /** An aggregate relationship */
  fee_transfers_aggregate: Fee_Transfers_Aggregate
  /** execute function "following" which returns "account" */
  following: Array<Accounts>
  /** execute function "following" and query aggregates on result of table type "account" */
  following_aggregate: Accounts_Aggregate
  /** fetch data from the table: "json_object" using primary key columns */
  json_object?: Maybe<Json_Objects>
  /** fetch data from the table: "json_object" */
  json_objects: Array<Json_Objects>
  /** fetch aggregated fields from the table: "json_object" */
  json_objects_aggregate: Json_Objects_Aggregate
  /** fetch data from the table: "organization" using primary key columns */
  organization?: Maybe<Organizations>
  /** fetch data from the table: "organization" */
  organizations: Array<Organizations>
  /** fetch aggregated fields from the table: "organization" */
  organizations_aggregate: Organizations_Aggregate
  /** fetch data from the table: "person" using primary key columns */
  person?: Maybe<Persons>
  /** fetch data from the table: "person" */
  persons: Array<Persons>
  /** fetch aggregated fields from the table: "person" */
  persons_aggregate: Persons_Aggregate
  /** fetch data from the table: "position" using primary key columns */
  position?: Maybe<Positions>
  /** An array relationship */
  positions: Array<Positions>
  /** An aggregate relationship */
  positions_aggregate: Positions_Aggregate
  /** fetch data from the table: "predicate_object" */
  predicate_objects: Array<Predicate_Objects>
  /** fetch aggregated fields from the table: "predicate_object" */
  predicate_objects_aggregate: Predicate_Objects_Aggregate
  /** fetch data from the table: "predicate_object" using primary key columns */
  predicate_objects_by_pk?: Maybe<Predicate_Objects>
  /** fetch data from the table: "redemption" using primary key columns */
  redemption?: Maybe<Redemptions>
  /** An array relationship */
  redemptions: Array<Redemptions>
  /** An aggregate relationship */
  redemptions_aggregate: Redemptions_Aggregate
  /** fetch data from the table: "share_price_change" using primary key columns */
  share_price_change?: Maybe<Share_Price_Changes>
  /** An array relationship */
  share_price_changes: Array<Share_Price_Changes>
  /** An aggregate relationship */
  share_price_changes_aggregate: Share_Price_Changes_Aggregate
  /** fetch data from the table: "signal" using primary key columns */
  signal?: Maybe<Signals>
  /** An array relationship */
  signals: Array<Signals>
  /** An aggregate relationship */
  signals_aggregate: Signals_Aggregate
  /** execute function "signals_from_following" which returns "signal" */
  signals_from_following: Array<Signals>
  /** execute function "signals_from_following" and query aggregates on result of table type "signal" */
  signals_from_following_aggregate: Signals_Aggregate
  /** fetch data from the table: "stats" using primary key columns */
  stat?: Maybe<Stats>
  /** fetch data from the table: "stats" */
  stats: Array<Stats>
  /** fetch aggregated fields from the table: "stats" */
  stats_aggregate: Stats_Aggregate
  /** fetch data from the table: "term" using primary key columns */
  term?: Maybe<Terms>
  /** fetch data from the table: "term" */
  terms: Array<Terms>
  /** fetch aggregated fields from the table: "term" */
  terms_aggregate: Terms_Aggregate
  /** fetch data from the table: "text_object" using primary key columns */
  text_object?: Maybe<Text_Objects>
  /** fetch data from the table: "text_object" */
  text_objects: Array<Text_Objects>
  /** fetch aggregated fields from the table: "text_object" */
  text_objects_aggregate: Text_Objects_Aggregate
  /** fetch data from the table: "thing" using primary key columns */
  thing?: Maybe<Things>
  /** fetch data from the table: "thing" */
  things: Array<Things>
  /** fetch aggregated fields from the table: "thing" */
  things_aggregate: Things_Aggregate
  /** fetch data from the table: "triple" using primary key columns */
  triple?: Maybe<Triples>
  /** An array relationship */
  triples: Array<Triples>
  /** An aggregate relationship */
  triples_aggregate: Triples_Aggregate
  /** fetch data from the table: "vault" using primary key columns */
  vault?: Maybe<Vaults>
  /** An array relationship */
  vaults: Array<Vaults>
  /** An aggregate relationship */
  vaults_aggregate: Vaults_Aggregate
}

export type Query_RootAccountArgs = {
  id: Scalars['String']['input']
}

export type Query_RootAccountsArgs = {
  distinct_on?: InputMaybe<Array<Accounts_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Accounts_Order_By>>
  where?: InputMaybe<Accounts_Bool_Exp>
}

export type Query_RootAccounts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Accounts_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Accounts_Order_By>>
  where?: InputMaybe<Accounts_Bool_Exp>
}

export type Query_RootAccounts_That_Claim_About_AccountArgs = {
  args: Accounts_That_Claim_About_Account_Args
  distinct_on?: InputMaybe<Array<Accounts_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Accounts_Order_By>>
  where?: InputMaybe<Accounts_Bool_Exp>
}

export type Query_RootAccounts_That_Claim_About_Account_AggregateArgs = {
  args: Accounts_That_Claim_About_Account_Args
  distinct_on?: InputMaybe<Array<Accounts_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Accounts_Order_By>>
  where?: InputMaybe<Accounts_Bool_Exp>
}

export type Query_RootAtomArgs = {
  term_id: Scalars['numeric']['input']
}

export type Query_RootAtom_ValueArgs = {
  id: Scalars['numeric']['input']
}

export type Query_RootAtom_ValuesArgs = {
  distinct_on?: InputMaybe<Array<Atom_Values_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Atom_Values_Order_By>>
  where?: InputMaybe<Atom_Values_Bool_Exp>
}

export type Query_RootAtom_Values_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Atom_Values_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Atom_Values_Order_By>>
  where?: InputMaybe<Atom_Values_Bool_Exp>
}

export type Query_RootAtomsArgs = {
  distinct_on?: InputMaybe<Array<Atoms_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Atoms_Order_By>>
  where?: InputMaybe<Atoms_Bool_Exp>
}

export type Query_RootAtoms_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Atoms_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Atoms_Order_By>>
  where?: InputMaybe<Atoms_Bool_Exp>
}

export type Query_RootBookArgs = {
  id: Scalars['numeric']['input']
}

export type Query_RootBooksArgs = {
  distinct_on?: InputMaybe<Array<Books_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Books_Order_By>>
  where?: InputMaybe<Books_Bool_Exp>
}

export type Query_RootBooks_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Books_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Books_Order_By>>
  where?: InputMaybe<Books_Bool_Exp>
}

export type Query_RootByte_ObjectArgs = {
  distinct_on?: InputMaybe<Array<Byte_Object_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Byte_Object_Order_By>>
  where?: InputMaybe<Byte_Object_Bool_Exp>
}

export type Query_RootByte_Object_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Byte_Object_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Byte_Object_Order_By>>
  where?: InputMaybe<Byte_Object_Bool_Exp>
}

export type Query_RootByte_Object_By_PkArgs = {
  id: Scalars['numeric']['input']
}

export type Query_RootCached_Images_Cached_ImageArgs = {
  distinct_on?: InputMaybe<Array<Cached_Images_Cached_Image_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Cached_Images_Cached_Image_Order_By>>
  where?: InputMaybe<Cached_Images_Cached_Image_Bool_Exp>
}

export type Query_RootCached_Images_Cached_Image_By_PkArgs = {
  url: Scalars['String']['input']
}

export type Query_RootCaip10Args = {
  id: Scalars['numeric']['input']
}

export type Query_RootCaip10_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Caip10_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Caip10_Order_By>>
  where?: InputMaybe<Caip10_Bool_Exp>
}

export type Query_RootCaip10sArgs = {
  distinct_on?: InputMaybe<Array<Caip10_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Caip10_Order_By>>
  where?: InputMaybe<Caip10_Bool_Exp>
}

export type Query_RootChainlink_PriceArgs = {
  id: Scalars['numeric']['input']
}

export type Query_RootChainlink_PricesArgs = {
  distinct_on?: InputMaybe<Array<Chainlink_Prices_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Chainlink_Prices_Order_By>>
  where?: InputMaybe<Chainlink_Prices_Bool_Exp>
}

export type Query_RootClaimArgs = {
  id: Scalars['String']['input']
}

export type Query_RootClaimsArgs = {
  distinct_on?: InputMaybe<Array<Claims_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Claims_Order_By>>
  where?: InputMaybe<Claims_Bool_Exp>
}

export type Query_RootClaims_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Claims_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Claims_Order_By>>
  where?: InputMaybe<Claims_Bool_Exp>
}

export type Query_RootClaims_From_FollowingArgs = {
  args: Claims_From_Following_Args
  distinct_on?: InputMaybe<Array<Claims_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Claims_Order_By>>
  where?: InputMaybe<Claims_Bool_Exp>
}

export type Query_RootClaims_From_Following_AggregateArgs = {
  args: Claims_From_Following_Args
  distinct_on?: InputMaybe<Array<Claims_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Claims_Order_By>>
  where?: InputMaybe<Claims_Bool_Exp>
}

export type Query_RootDepositArgs = {
  id: Scalars['String']['input']
}

export type Query_RootDepositsArgs = {
  distinct_on?: InputMaybe<Array<Deposits_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Deposits_Order_By>>
  where?: InputMaybe<Deposits_Bool_Exp>
}

export type Query_RootDeposits_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Deposits_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Deposits_Order_By>>
  where?: InputMaybe<Deposits_Bool_Exp>
}

export type Query_RootEventArgs = {
  id: Scalars['String']['input']
}

export type Query_RootEventsArgs = {
  distinct_on?: InputMaybe<Array<Events_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Events_Order_By>>
  where?: InputMaybe<Events_Bool_Exp>
}

export type Query_RootEvents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Events_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Events_Order_By>>
  where?: InputMaybe<Events_Bool_Exp>
}

export type Query_RootFee_TransferArgs = {
  id: Scalars['String']['input']
}

export type Query_RootFee_TransfersArgs = {
  distinct_on?: InputMaybe<Array<Fee_Transfers_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Fee_Transfers_Order_By>>
  where?: InputMaybe<Fee_Transfers_Bool_Exp>
}

export type Query_RootFee_Transfers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Fee_Transfers_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Fee_Transfers_Order_By>>
  where?: InputMaybe<Fee_Transfers_Bool_Exp>
}

export type Query_RootFollowingArgs = {
  args: Following_Args
  distinct_on?: InputMaybe<Array<Accounts_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Accounts_Order_By>>
  where?: InputMaybe<Accounts_Bool_Exp>
}

export type Query_RootFollowing_AggregateArgs = {
  args: Following_Args
  distinct_on?: InputMaybe<Array<Accounts_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Accounts_Order_By>>
  where?: InputMaybe<Accounts_Bool_Exp>
}

export type Query_RootJson_ObjectArgs = {
  id: Scalars['numeric']['input']
}

export type Query_RootJson_ObjectsArgs = {
  distinct_on?: InputMaybe<Array<Json_Objects_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Json_Objects_Order_By>>
  where?: InputMaybe<Json_Objects_Bool_Exp>
}

export type Query_RootJson_Objects_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Json_Objects_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Json_Objects_Order_By>>
  where?: InputMaybe<Json_Objects_Bool_Exp>
}

export type Query_RootOrganizationArgs = {
  id: Scalars['numeric']['input']
}

export type Query_RootOrganizationsArgs = {
  distinct_on?: InputMaybe<Array<Organizations_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Organizations_Order_By>>
  where?: InputMaybe<Organizations_Bool_Exp>
}

export type Query_RootOrganizations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Organizations_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Organizations_Order_By>>
  where?: InputMaybe<Organizations_Bool_Exp>
}

export type Query_RootPersonArgs = {
  id: Scalars['numeric']['input']
}

export type Query_RootPersonsArgs = {
  distinct_on?: InputMaybe<Array<Persons_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Persons_Order_By>>
  where?: InputMaybe<Persons_Bool_Exp>
}

export type Query_RootPersons_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Persons_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Persons_Order_By>>
  where?: InputMaybe<Persons_Bool_Exp>
}

export type Query_RootPositionArgs = {
  id: Scalars['String']['input']
}

export type Query_RootPositionsArgs = {
  distinct_on?: InputMaybe<Array<Positions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Positions_Order_By>>
  where?: InputMaybe<Positions_Bool_Exp>
}

export type Query_RootPositions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Positions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Positions_Order_By>>
  where?: InputMaybe<Positions_Bool_Exp>
}

export type Query_RootPredicate_ObjectsArgs = {
  distinct_on?: InputMaybe<Array<Predicate_Objects_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Predicate_Objects_Order_By>>
  where?: InputMaybe<Predicate_Objects_Bool_Exp>
}

export type Query_RootPredicate_Objects_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Predicate_Objects_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Predicate_Objects_Order_By>>
  where?: InputMaybe<Predicate_Objects_Bool_Exp>
}

export type Query_RootPredicate_Objects_By_PkArgs = {
  id: Scalars['String']['input']
}

export type Query_RootRedemptionArgs = {
  id: Scalars['String']['input']
}

export type Query_RootRedemptionsArgs = {
  distinct_on?: InputMaybe<Array<Redemptions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Redemptions_Order_By>>
  where?: InputMaybe<Redemptions_Bool_Exp>
}

export type Query_RootRedemptions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Redemptions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Redemptions_Order_By>>
  where?: InputMaybe<Redemptions_Bool_Exp>
}

export type Query_RootShare_Price_ChangeArgs = {
  id: Scalars['bigint']['input']
}

export type Query_RootShare_Price_ChangesArgs = {
  distinct_on?: InputMaybe<Array<Share_Price_Changes_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Share_Price_Changes_Order_By>>
  where?: InputMaybe<Share_Price_Changes_Bool_Exp>
}

export type Query_RootShare_Price_Changes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Share_Price_Changes_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Share_Price_Changes_Order_By>>
  where?: InputMaybe<Share_Price_Changes_Bool_Exp>
}

export type Query_RootSignalArgs = {
  id: Scalars['String']['input']
}

export type Query_RootSignalsArgs = {
  distinct_on?: InputMaybe<Array<Signals_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Signals_Order_By>>
  where?: InputMaybe<Signals_Bool_Exp>
}

export type Query_RootSignals_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Signals_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Signals_Order_By>>
  where?: InputMaybe<Signals_Bool_Exp>
}

export type Query_RootSignals_From_FollowingArgs = {
  args: Signals_From_Following_Args
  distinct_on?: InputMaybe<Array<Signals_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Signals_Order_By>>
  where?: InputMaybe<Signals_Bool_Exp>
}

export type Query_RootSignals_From_Following_AggregateArgs = {
  args: Signals_From_Following_Args
  distinct_on?: InputMaybe<Array<Signals_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Signals_Order_By>>
  where?: InputMaybe<Signals_Bool_Exp>
}

export type Query_RootStatArgs = {
  id: Scalars['Int']['input']
}

export type Query_RootStatsArgs = {
  distinct_on?: InputMaybe<Array<Stats_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Stats_Order_By>>
  where?: InputMaybe<Stats_Bool_Exp>
}

export type Query_RootStats_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Stats_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Stats_Order_By>>
  where?: InputMaybe<Stats_Bool_Exp>
}

export type Query_RootTermArgs = {
  id: Scalars['numeric']['input']
}

export type Query_RootTermsArgs = {
  distinct_on?: InputMaybe<Array<Terms_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Terms_Order_By>>
  where?: InputMaybe<Terms_Bool_Exp>
}

export type Query_RootTerms_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Terms_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Terms_Order_By>>
  where?: InputMaybe<Terms_Bool_Exp>
}

export type Query_RootText_ObjectArgs = {
  id: Scalars['numeric']['input']
}

export type Query_RootText_ObjectsArgs = {
  distinct_on?: InputMaybe<Array<Text_Objects_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Text_Objects_Order_By>>
  where?: InputMaybe<Text_Objects_Bool_Exp>
}

export type Query_RootText_Objects_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Text_Objects_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Text_Objects_Order_By>>
  where?: InputMaybe<Text_Objects_Bool_Exp>
}

export type Query_RootThingArgs = {
  id: Scalars['numeric']['input']
}

export type Query_RootThingsArgs = {
  distinct_on?: InputMaybe<Array<Things_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Things_Order_By>>
  where?: InputMaybe<Things_Bool_Exp>
}

export type Query_RootThings_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Things_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Things_Order_By>>
  where?: InputMaybe<Things_Bool_Exp>
}

export type Query_RootTripleArgs = {
  term_id: Scalars['numeric']['input']
}

export type Query_RootTriplesArgs = {
  distinct_on?: InputMaybe<Array<Triples_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Triples_Order_By>>
  where?: InputMaybe<Triples_Bool_Exp>
}

export type Query_RootTriples_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Triples_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Triples_Order_By>>
  where?: InputMaybe<Triples_Bool_Exp>
}

export type Query_RootVaultArgs = {
  curve_id: Scalars['numeric']['input']
  term_id: Scalars['numeric']['input']
}

export type Query_RootVaultsArgs = {
  distinct_on?: InputMaybe<Array<Vaults_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Vaults_Order_By>>
  where?: InputMaybe<Vaults_Bool_Exp>
}

export type Query_RootVaults_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Vaults_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Vaults_Order_By>>
  where?: InputMaybe<Vaults_Bool_Exp>
}

/** columns and relationships of "redemption" */
export type Redemptions = {
  __typename?: 'redemptions'
  assets_for_receiver: Scalars['numeric']['output']
  block_number: Scalars['numeric']['output']
  block_timestamp: Scalars['bigint']['output']
  curve_id: Scalars['numeric']['output']
  exit_fee: Scalars['numeric']['output']
  id: Scalars['String']['output']
  /** An object relationship */
  receiver: Accounts
  receiver_id: Scalars['String']['output']
  /** An object relationship */
  sender?: Maybe<Accounts>
  sender_id: Scalars['String']['output']
  sender_total_shares_in_vault: Scalars['numeric']['output']
  shares_redeemed_by_sender: Scalars['numeric']['output']
  /** An object relationship */
  term: Terms
  term_id: Scalars['numeric']['output']
  transaction_hash: Scalars['String']['output']
  /** An object relationship */
  vault?: Maybe<Vaults>
}

/** aggregated selection of "redemption" */
export type Redemptions_Aggregate = {
  __typename?: 'redemptions_aggregate'
  aggregate?: Maybe<Redemptions_Aggregate_Fields>
  nodes: Array<Redemptions>
}

export type Redemptions_Aggregate_Bool_Exp = {
  count?: InputMaybe<Redemptions_Aggregate_Bool_Exp_Count>
}

export type Redemptions_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Redemptions_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
  filter?: InputMaybe<Redemptions_Bool_Exp>
  predicate: Int_Comparison_Exp
}

/** aggregate fields of "redemption" */
export type Redemptions_Aggregate_Fields = {
  __typename?: 'redemptions_aggregate_fields'
  avg?: Maybe<Redemptions_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Redemptions_Max_Fields>
  min?: Maybe<Redemptions_Min_Fields>
  stddev?: Maybe<Redemptions_Stddev_Fields>
  stddev_pop?: Maybe<Redemptions_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Redemptions_Stddev_Samp_Fields>
  sum?: Maybe<Redemptions_Sum_Fields>
  var_pop?: Maybe<Redemptions_Var_Pop_Fields>
  var_samp?: Maybe<Redemptions_Var_Samp_Fields>
  variance?: Maybe<Redemptions_Variance_Fields>
}

/** aggregate fields of "redemption" */
export type Redemptions_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Redemptions_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** order by aggregate values of table "redemption" */
export type Redemptions_Aggregate_Order_By = {
  avg?: InputMaybe<Redemptions_Avg_Order_By>
  count?: InputMaybe<Order_By>
  max?: InputMaybe<Redemptions_Max_Order_By>
  min?: InputMaybe<Redemptions_Min_Order_By>
  stddev?: InputMaybe<Redemptions_Stddev_Order_By>
  stddev_pop?: InputMaybe<Redemptions_Stddev_Pop_Order_By>
  stddev_samp?: InputMaybe<Redemptions_Stddev_Samp_Order_By>
  sum?: InputMaybe<Redemptions_Sum_Order_By>
  var_pop?: InputMaybe<Redemptions_Var_Pop_Order_By>
  var_samp?: InputMaybe<Redemptions_Var_Samp_Order_By>
  variance?: InputMaybe<Redemptions_Variance_Order_By>
}

/** aggregate avg on columns */
export type Redemptions_Avg_Fields = {
  __typename?: 'redemptions_avg_fields'
  assets_for_receiver?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  exit_fee?: Maybe<Scalars['Float']['output']>
  sender_total_shares_in_vault?: Maybe<Scalars['Float']['output']>
  shares_redeemed_by_sender?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by avg() on columns of table "redemption" */
export type Redemptions_Avg_Order_By = {
  assets_for_receiver?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  exit_fee?: InputMaybe<Order_By>
  sender_total_shares_in_vault?: InputMaybe<Order_By>
  shares_redeemed_by_sender?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** Boolean expression to filter rows from the table "redemption". All fields are combined with a logical 'AND'. */
export type Redemptions_Bool_Exp = {
  _and?: InputMaybe<Array<Redemptions_Bool_Exp>>
  _not?: InputMaybe<Redemptions_Bool_Exp>
  _or?: InputMaybe<Array<Redemptions_Bool_Exp>>
  assets_for_receiver?: InputMaybe<Numeric_Comparison_Exp>
  block_number?: InputMaybe<Numeric_Comparison_Exp>
  block_timestamp?: InputMaybe<Bigint_Comparison_Exp>
  curve_id?: InputMaybe<Numeric_Comparison_Exp>
  exit_fee?: InputMaybe<Numeric_Comparison_Exp>
  id?: InputMaybe<String_Comparison_Exp>
  receiver?: InputMaybe<Accounts_Bool_Exp>
  receiver_id?: InputMaybe<String_Comparison_Exp>
  sender?: InputMaybe<Accounts_Bool_Exp>
  sender_id?: InputMaybe<String_Comparison_Exp>
  sender_total_shares_in_vault?: InputMaybe<Numeric_Comparison_Exp>
  shares_redeemed_by_sender?: InputMaybe<Numeric_Comparison_Exp>
  term?: InputMaybe<Terms_Bool_Exp>
  term_id?: InputMaybe<Numeric_Comparison_Exp>
  transaction_hash?: InputMaybe<String_Comparison_Exp>
  vault?: InputMaybe<Vaults_Bool_Exp>
}

/** aggregate max on columns */
export type Redemptions_Max_Fields = {
  __typename?: 'redemptions_max_fields'
  assets_for_receiver?: Maybe<Scalars['numeric']['output']>
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  curve_id?: Maybe<Scalars['numeric']['output']>
  exit_fee?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['String']['output']>
  receiver_id?: Maybe<Scalars['String']['output']>
  sender_id?: Maybe<Scalars['String']['output']>
  sender_total_shares_in_vault?: Maybe<Scalars['numeric']['output']>
  shares_redeemed_by_sender?: Maybe<Scalars['numeric']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
  transaction_hash?: Maybe<Scalars['String']['output']>
}

/** order by max() on columns of table "redemption" */
export type Redemptions_Max_Order_By = {
  assets_for_receiver?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  exit_fee?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  receiver_id?: InputMaybe<Order_By>
  sender_id?: InputMaybe<Order_By>
  sender_total_shares_in_vault?: InputMaybe<Order_By>
  shares_redeemed_by_sender?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
}

/** aggregate min on columns */
export type Redemptions_Min_Fields = {
  __typename?: 'redemptions_min_fields'
  assets_for_receiver?: Maybe<Scalars['numeric']['output']>
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  curve_id?: Maybe<Scalars['numeric']['output']>
  exit_fee?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['String']['output']>
  receiver_id?: Maybe<Scalars['String']['output']>
  sender_id?: Maybe<Scalars['String']['output']>
  sender_total_shares_in_vault?: Maybe<Scalars['numeric']['output']>
  shares_redeemed_by_sender?: Maybe<Scalars['numeric']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
  transaction_hash?: Maybe<Scalars['String']['output']>
}

/** order by min() on columns of table "redemption" */
export type Redemptions_Min_Order_By = {
  assets_for_receiver?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  exit_fee?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  receiver_id?: InputMaybe<Order_By>
  sender_id?: InputMaybe<Order_By>
  sender_total_shares_in_vault?: InputMaybe<Order_By>
  shares_redeemed_by_sender?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
}

/** Ordering options when selecting data from "redemption". */
export type Redemptions_Order_By = {
  assets_for_receiver?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  exit_fee?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  receiver?: InputMaybe<Accounts_Order_By>
  receiver_id?: InputMaybe<Order_By>
  sender?: InputMaybe<Accounts_Order_By>
  sender_id?: InputMaybe<Order_By>
  sender_total_shares_in_vault?: InputMaybe<Order_By>
  shares_redeemed_by_sender?: InputMaybe<Order_By>
  term?: InputMaybe<Terms_Order_By>
  term_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
  vault?: InputMaybe<Vaults_Order_By>
}

/** select columns of table "redemption" */
export enum Redemptions_Select_Column {
  /** column name */
  AssetsForReceiver = 'assets_for_receiver',
  /** column name */
  BlockNumber = 'block_number',
  /** column name */
  BlockTimestamp = 'block_timestamp',
  /** column name */
  CurveId = 'curve_id',
  /** column name */
  ExitFee = 'exit_fee',
  /** column name */
  Id = 'id',
  /** column name */
  ReceiverId = 'receiver_id',
  /** column name */
  SenderId = 'sender_id',
  /** column name */
  SenderTotalSharesInVault = 'sender_total_shares_in_vault',
  /** column name */
  SharesRedeemedBySender = 'shares_redeemed_by_sender',
  /** column name */
  TermId = 'term_id',
  /** column name */
  TransactionHash = 'transaction_hash',
}

/** aggregate stddev on columns */
export type Redemptions_Stddev_Fields = {
  __typename?: 'redemptions_stddev_fields'
  assets_for_receiver?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  exit_fee?: Maybe<Scalars['Float']['output']>
  sender_total_shares_in_vault?: Maybe<Scalars['Float']['output']>
  shares_redeemed_by_sender?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev() on columns of table "redemption" */
export type Redemptions_Stddev_Order_By = {
  assets_for_receiver?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  exit_fee?: InputMaybe<Order_By>
  sender_total_shares_in_vault?: InputMaybe<Order_By>
  shares_redeemed_by_sender?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate stddev_pop on columns */
export type Redemptions_Stddev_Pop_Fields = {
  __typename?: 'redemptions_stddev_pop_fields'
  assets_for_receiver?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  exit_fee?: Maybe<Scalars['Float']['output']>
  sender_total_shares_in_vault?: Maybe<Scalars['Float']['output']>
  shares_redeemed_by_sender?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_pop() on columns of table "redemption" */
export type Redemptions_Stddev_Pop_Order_By = {
  assets_for_receiver?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  exit_fee?: InputMaybe<Order_By>
  sender_total_shares_in_vault?: InputMaybe<Order_By>
  shares_redeemed_by_sender?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate stddev_samp on columns */
export type Redemptions_Stddev_Samp_Fields = {
  __typename?: 'redemptions_stddev_samp_fields'
  assets_for_receiver?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  exit_fee?: Maybe<Scalars['Float']['output']>
  sender_total_shares_in_vault?: Maybe<Scalars['Float']['output']>
  shares_redeemed_by_sender?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_samp() on columns of table "redemption" */
export type Redemptions_Stddev_Samp_Order_By = {
  assets_for_receiver?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  exit_fee?: InputMaybe<Order_By>
  sender_total_shares_in_vault?: InputMaybe<Order_By>
  shares_redeemed_by_sender?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** Streaming cursor of the table "redemptions" */
export type Redemptions_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Redemptions_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Redemptions_Stream_Cursor_Value_Input = {
  assets_for_receiver?: InputMaybe<Scalars['numeric']['input']>
  block_number?: InputMaybe<Scalars['numeric']['input']>
  block_timestamp?: InputMaybe<Scalars['bigint']['input']>
  curve_id?: InputMaybe<Scalars['numeric']['input']>
  exit_fee?: InputMaybe<Scalars['numeric']['input']>
  id?: InputMaybe<Scalars['String']['input']>
  receiver_id?: InputMaybe<Scalars['String']['input']>
  sender_id?: InputMaybe<Scalars['String']['input']>
  sender_total_shares_in_vault?: InputMaybe<Scalars['numeric']['input']>
  shares_redeemed_by_sender?: InputMaybe<Scalars['numeric']['input']>
  term_id?: InputMaybe<Scalars['numeric']['input']>
  transaction_hash?: InputMaybe<Scalars['String']['input']>
}

/** aggregate sum on columns */
export type Redemptions_Sum_Fields = {
  __typename?: 'redemptions_sum_fields'
  assets_for_receiver?: Maybe<Scalars['numeric']['output']>
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  curve_id?: Maybe<Scalars['numeric']['output']>
  exit_fee?: Maybe<Scalars['numeric']['output']>
  sender_total_shares_in_vault?: Maybe<Scalars['numeric']['output']>
  shares_redeemed_by_sender?: Maybe<Scalars['numeric']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
}

/** order by sum() on columns of table "redemption" */
export type Redemptions_Sum_Order_By = {
  assets_for_receiver?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  exit_fee?: InputMaybe<Order_By>
  sender_total_shares_in_vault?: InputMaybe<Order_By>
  shares_redeemed_by_sender?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate var_pop on columns */
export type Redemptions_Var_Pop_Fields = {
  __typename?: 'redemptions_var_pop_fields'
  assets_for_receiver?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  exit_fee?: Maybe<Scalars['Float']['output']>
  sender_total_shares_in_vault?: Maybe<Scalars['Float']['output']>
  shares_redeemed_by_sender?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by var_pop() on columns of table "redemption" */
export type Redemptions_Var_Pop_Order_By = {
  assets_for_receiver?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  exit_fee?: InputMaybe<Order_By>
  sender_total_shares_in_vault?: InputMaybe<Order_By>
  shares_redeemed_by_sender?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate var_samp on columns */
export type Redemptions_Var_Samp_Fields = {
  __typename?: 'redemptions_var_samp_fields'
  assets_for_receiver?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  exit_fee?: Maybe<Scalars['Float']['output']>
  sender_total_shares_in_vault?: Maybe<Scalars['Float']['output']>
  shares_redeemed_by_sender?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by var_samp() on columns of table "redemption" */
export type Redemptions_Var_Samp_Order_By = {
  assets_for_receiver?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  exit_fee?: InputMaybe<Order_By>
  sender_total_shares_in_vault?: InputMaybe<Order_By>
  shares_redeemed_by_sender?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate variance on columns */
export type Redemptions_Variance_Fields = {
  __typename?: 'redemptions_variance_fields'
  assets_for_receiver?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  exit_fee?: Maybe<Scalars['Float']['output']>
  sender_total_shares_in_vault?: Maybe<Scalars['Float']['output']>
  shares_redeemed_by_sender?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by variance() on columns of table "redemption" */
export type Redemptions_Variance_Order_By = {
  assets_for_receiver?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  exit_fee?: InputMaybe<Order_By>
  sender_total_shares_in_vault?: InputMaybe<Order_By>
  shares_redeemed_by_sender?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** columns and relationships of "share_price_change" */
export type Share_Price_Changes = {
  __typename?: 'share_price_changes'
  block_number: Scalars['numeric']['output']
  block_timestamp: Scalars['bigint']['output']
  curve_id: Scalars['numeric']['output']
  id: Scalars['bigint']['output']
  share_price: Scalars['numeric']['output']
  /** An object relationship */
  term: Terms
  term_id: Scalars['numeric']['output']
  total_assets: Scalars['numeric']['output']
  total_shares: Scalars['numeric']['output']
  transaction_hash: Scalars['String']['output']
  updated_at?: Maybe<Scalars['timestamptz']['output']>
  /** An object relationship */
  vault?: Maybe<Vaults>
}

/** aggregated selection of "share_price_change" */
export type Share_Price_Changes_Aggregate = {
  __typename?: 'share_price_changes_aggregate'
  aggregate?: Maybe<Share_Price_Changes_Aggregate_Fields>
  nodes: Array<Share_Price_Changes>
}

export type Share_Price_Changes_Aggregate_Bool_Exp = {
  count?: InputMaybe<Share_Price_Changes_Aggregate_Bool_Exp_Count>
}

export type Share_Price_Changes_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Share_Price_Changes_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
  filter?: InputMaybe<Share_Price_Changes_Bool_Exp>
  predicate: Int_Comparison_Exp
}

/** aggregate fields of "share_price_change" */
export type Share_Price_Changes_Aggregate_Fields = {
  __typename?: 'share_price_changes_aggregate_fields'
  avg?: Maybe<Share_Price_Changes_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Share_Price_Changes_Max_Fields>
  min?: Maybe<Share_Price_Changes_Min_Fields>
  stddev?: Maybe<Share_Price_Changes_Stddev_Fields>
  stddev_pop?: Maybe<Share_Price_Changes_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Share_Price_Changes_Stddev_Samp_Fields>
  sum?: Maybe<Share_Price_Changes_Sum_Fields>
  var_pop?: Maybe<Share_Price_Changes_Var_Pop_Fields>
  var_samp?: Maybe<Share_Price_Changes_Var_Samp_Fields>
  variance?: Maybe<Share_Price_Changes_Variance_Fields>
}

/** aggregate fields of "share_price_change" */
export type Share_Price_Changes_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Share_Price_Changes_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** order by aggregate values of table "share_price_change" */
export type Share_Price_Changes_Aggregate_Order_By = {
  avg?: InputMaybe<Share_Price_Changes_Avg_Order_By>
  count?: InputMaybe<Order_By>
  max?: InputMaybe<Share_Price_Changes_Max_Order_By>
  min?: InputMaybe<Share_Price_Changes_Min_Order_By>
  stddev?: InputMaybe<Share_Price_Changes_Stddev_Order_By>
  stddev_pop?: InputMaybe<Share_Price_Changes_Stddev_Pop_Order_By>
  stddev_samp?: InputMaybe<Share_Price_Changes_Stddev_Samp_Order_By>
  sum?: InputMaybe<Share_Price_Changes_Sum_Order_By>
  var_pop?: InputMaybe<Share_Price_Changes_Var_Pop_Order_By>
  var_samp?: InputMaybe<Share_Price_Changes_Var_Samp_Order_By>
  variance?: InputMaybe<Share_Price_Changes_Variance_Order_By>
}

/** aggregate avg on columns */
export type Share_Price_Changes_Avg_Fields = {
  __typename?: 'share_price_changes_avg_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  share_price?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_shares?: Maybe<Scalars['Float']['output']>
}

/** order by avg() on columns of table "share_price_change" */
export type Share_Price_Changes_Avg_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  share_price?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** Boolean expression to filter rows from the table "share_price_change". All fields are combined with a logical 'AND'. */
export type Share_Price_Changes_Bool_Exp = {
  _and?: InputMaybe<Array<Share_Price_Changes_Bool_Exp>>
  _not?: InputMaybe<Share_Price_Changes_Bool_Exp>
  _or?: InputMaybe<Array<Share_Price_Changes_Bool_Exp>>
  block_number?: InputMaybe<Numeric_Comparison_Exp>
  block_timestamp?: InputMaybe<Bigint_Comparison_Exp>
  curve_id?: InputMaybe<Numeric_Comparison_Exp>
  id?: InputMaybe<Bigint_Comparison_Exp>
  share_price?: InputMaybe<Numeric_Comparison_Exp>
  term?: InputMaybe<Terms_Bool_Exp>
  term_id?: InputMaybe<Numeric_Comparison_Exp>
  total_assets?: InputMaybe<Numeric_Comparison_Exp>
  total_shares?: InputMaybe<Numeric_Comparison_Exp>
  transaction_hash?: InputMaybe<String_Comparison_Exp>
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>
  vault?: InputMaybe<Vaults_Bool_Exp>
}

/** aggregate max on columns */
export type Share_Price_Changes_Max_Fields = {
  __typename?: 'share_price_changes_max_fields'
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  curve_id?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['bigint']['output']>
  share_price?: Maybe<Scalars['numeric']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
  total_assets?: Maybe<Scalars['numeric']['output']>
  total_shares?: Maybe<Scalars['numeric']['output']>
  transaction_hash?: Maybe<Scalars['String']['output']>
  updated_at?: Maybe<Scalars['timestamptz']['output']>
}

/** order by max() on columns of table "share_price_change" */
export type Share_Price_Changes_Max_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  share_price?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
  updated_at?: InputMaybe<Order_By>
}

/** aggregate min on columns */
export type Share_Price_Changes_Min_Fields = {
  __typename?: 'share_price_changes_min_fields'
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  curve_id?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['bigint']['output']>
  share_price?: Maybe<Scalars['numeric']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
  total_assets?: Maybe<Scalars['numeric']['output']>
  total_shares?: Maybe<Scalars['numeric']['output']>
  transaction_hash?: Maybe<Scalars['String']['output']>
  updated_at?: Maybe<Scalars['timestamptz']['output']>
}

/** order by min() on columns of table "share_price_change" */
export type Share_Price_Changes_Min_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  share_price?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
  updated_at?: InputMaybe<Order_By>
}

/** Ordering options when selecting data from "share_price_change". */
export type Share_Price_Changes_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  share_price?: InputMaybe<Order_By>
  term?: InputMaybe<Terms_Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
  updated_at?: InputMaybe<Order_By>
  vault?: InputMaybe<Vaults_Order_By>
}

/** select columns of table "share_price_change" */
export enum Share_Price_Changes_Select_Column {
  /** column name */
  BlockNumber = 'block_number',
  /** column name */
  BlockTimestamp = 'block_timestamp',
  /** column name */
  CurveId = 'curve_id',
  /** column name */
  Id = 'id',
  /** column name */
  SharePrice = 'share_price',
  /** column name */
  TermId = 'term_id',
  /** column name */
  TotalAssets = 'total_assets',
  /** column name */
  TotalShares = 'total_shares',
  /** column name */
  TransactionHash = 'transaction_hash',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Share_Price_Changes_Stddev_Fields = {
  __typename?: 'share_price_changes_stddev_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  share_price?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_shares?: Maybe<Scalars['Float']['output']>
}

/** order by stddev() on columns of table "share_price_change" */
export type Share_Price_Changes_Stddev_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  share_price?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** aggregate stddev_pop on columns */
export type Share_Price_Changes_Stddev_Pop_Fields = {
  __typename?: 'share_price_changes_stddev_pop_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  share_price?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_shares?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_pop() on columns of table "share_price_change" */
export type Share_Price_Changes_Stddev_Pop_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  share_price?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** aggregate stddev_samp on columns */
export type Share_Price_Changes_Stddev_Samp_Fields = {
  __typename?: 'share_price_changes_stddev_samp_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  share_price?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_shares?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_samp() on columns of table "share_price_change" */
export type Share_Price_Changes_Stddev_Samp_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  share_price?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** Streaming cursor of the table "share_price_changes" */
export type Share_Price_Changes_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Share_Price_Changes_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Share_Price_Changes_Stream_Cursor_Value_Input = {
  block_number?: InputMaybe<Scalars['numeric']['input']>
  block_timestamp?: InputMaybe<Scalars['bigint']['input']>
  curve_id?: InputMaybe<Scalars['numeric']['input']>
  id?: InputMaybe<Scalars['bigint']['input']>
  share_price?: InputMaybe<Scalars['numeric']['input']>
  term_id?: InputMaybe<Scalars['numeric']['input']>
  total_assets?: InputMaybe<Scalars['numeric']['input']>
  total_shares?: InputMaybe<Scalars['numeric']['input']>
  transaction_hash?: InputMaybe<Scalars['String']['input']>
  updated_at?: InputMaybe<Scalars['timestamptz']['input']>
}

/** aggregate sum on columns */
export type Share_Price_Changes_Sum_Fields = {
  __typename?: 'share_price_changes_sum_fields'
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  curve_id?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['bigint']['output']>
  share_price?: Maybe<Scalars['numeric']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
  total_assets?: Maybe<Scalars['numeric']['output']>
  total_shares?: Maybe<Scalars['numeric']['output']>
}

/** order by sum() on columns of table "share_price_change" */
export type Share_Price_Changes_Sum_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  share_price?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** aggregate var_pop on columns */
export type Share_Price_Changes_Var_Pop_Fields = {
  __typename?: 'share_price_changes_var_pop_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  share_price?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_shares?: Maybe<Scalars['Float']['output']>
}

/** order by var_pop() on columns of table "share_price_change" */
export type Share_Price_Changes_Var_Pop_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  share_price?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** aggregate var_samp on columns */
export type Share_Price_Changes_Var_Samp_Fields = {
  __typename?: 'share_price_changes_var_samp_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  share_price?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_shares?: Maybe<Scalars['Float']['output']>
}

/** order by var_samp() on columns of table "share_price_change" */
export type Share_Price_Changes_Var_Samp_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  share_price?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** aggregate variance on columns */
export type Share_Price_Changes_Variance_Fields = {
  __typename?: 'share_price_changes_variance_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  share_price?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_shares?: Maybe<Scalars['Float']['output']>
}

/** order by variance() on columns of table "share_price_change" */
export type Share_Price_Changes_Variance_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  share_price?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** columns and relationships of "signal" */
export type Signals = {
  __typename?: 'signals'
  /** An object relationship */
  account?: Maybe<Accounts>
  account_id: Scalars['String']['output']
  atom_id?: Maybe<Scalars['numeric']['output']>
  block_number: Scalars['numeric']['output']
  block_timestamp: Scalars['bigint']['output']
  delta: Scalars['numeric']['output']
  /** An object relationship */
  deposit?: Maybe<Deposits>
  deposit_id?: Maybe<Scalars['String']['output']>
  id: Scalars['String']['output']
  /** An object relationship */
  redemption?: Maybe<Redemptions>
  redemption_id?: Maybe<Scalars['String']['output']>
  /** An object relationship */
  term: Terms
  transaction_hash: Scalars['String']['output']
  triple_id?: Maybe<Scalars['numeric']['output']>
  /** An object relationship */
  vault?: Maybe<Vaults>
}

/** aggregated selection of "signal" */
export type Signals_Aggregate = {
  __typename?: 'signals_aggregate'
  aggregate?: Maybe<Signals_Aggregate_Fields>
  nodes: Array<Signals>
}

export type Signals_Aggregate_Bool_Exp = {
  count?: InputMaybe<Signals_Aggregate_Bool_Exp_Count>
}

export type Signals_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Signals_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
  filter?: InputMaybe<Signals_Bool_Exp>
  predicate: Int_Comparison_Exp
}

/** aggregate fields of "signal" */
export type Signals_Aggregate_Fields = {
  __typename?: 'signals_aggregate_fields'
  avg?: Maybe<Signals_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Signals_Max_Fields>
  min?: Maybe<Signals_Min_Fields>
  stddev?: Maybe<Signals_Stddev_Fields>
  stddev_pop?: Maybe<Signals_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Signals_Stddev_Samp_Fields>
  sum?: Maybe<Signals_Sum_Fields>
  var_pop?: Maybe<Signals_Var_Pop_Fields>
  var_samp?: Maybe<Signals_Var_Samp_Fields>
  variance?: Maybe<Signals_Variance_Fields>
}

/** aggregate fields of "signal" */
export type Signals_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Signals_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** order by aggregate values of table "signal" */
export type Signals_Aggregate_Order_By = {
  avg?: InputMaybe<Signals_Avg_Order_By>
  count?: InputMaybe<Order_By>
  max?: InputMaybe<Signals_Max_Order_By>
  min?: InputMaybe<Signals_Min_Order_By>
  stddev?: InputMaybe<Signals_Stddev_Order_By>
  stddev_pop?: InputMaybe<Signals_Stddev_Pop_Order_By>
  stddev_samp?: InputMaybe<Signals_Stddev_Samp_Order_By>
  sum?: InputMaybe<Signals_Sum_Order_By>
  var_pop?: InputMaybe<Signals_Var_Pop_Order_By>
  var_samp?: InputMaybe<Signals_Var_Samp_Order_By>
  variance?: InputMaybe<Signals_Variance_Order_By>
}

/** aggregate avg on columns */
export type Signals_Avg_Fields = {
  __typename?: 'signals_avg_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  delta?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** order by avg() on columns of table "signal" */
export type Signals_Avg_Order_By = {
  atom_id?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  delta?: InputMaybe<Order_By>
  triple_id?: InputMaybe<Order_By>
}

/** Boolean expression to filter rows from the table "signal". All fields are combined with a logical 'AND'. */
export type Signals_Bool_Exp = {
  _and?: InputMaybe<Array<Signals_Bool_Exp>>
  _not?: InputMaybe<Signals_Bool_Exp>
  _or?: InputMaybe<Array<Signals_Bool_Exp>>
  account?: InputMaybe<Accounts_Bool_Exp>
  account_id?: InputMaybe<String_Comparison_Exp>
  atom_id?: InputMaybe<Numeric_Comparison_Exp>
  block_number?: InputMaybe<Numeric_Comparison_Exp>
  block_timestamp?: InputMaybe<Bigint_Comparison_Exp>
  delta?: InputMaybe<Numeric_Comparison_Exp>
  deposit?: InputMaybe<Deposits_Bool_Exp>
  deposit_id?: InputMaybe<String_Comparison_Exp>
  id?: InputMaybe<String_Comparison_Exp>
  redemption?: InputMaybe<Redemptions_Bool_Exp>
  redemption_id?: InputMaybe<String_Comparison_Exp>
  term?: InputMaybe<Terms_Bool_Exp>
  transaction_hash?: InputMaybe<String_Comparison_Exp>
  triple_id?: InputMaybe<Numeric_Comparison_Exp>
  vault?: InputMaybe<Vaults_Bool_Exp>
}

export type Signals_From_Following_Args = {
  address?: InputMaybe<Scalars['String']['input']>
}

/** aggregate max on columns */
export type Signals_Max_Fields = {
  __typename?: 'signals_max_fields'
  account_id?: Maybe<Scalars['String']['output']>
  atom_id?: Maybe<Scalars['numeric']['output']>
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  delta?: Maybe<Scalars['numeric']['output']>
  deposit_id?: Maybe<Scalars['String']['output']>
  id?: Maybe<Scalars['String']['output']>
  redemption_id?: Maybe<Scalars['String']['output']>
  transaction_hash?: Maybe<Scalars['String']['output']>
  triple_id?: Maybe<Scalars['numeric']['output']>
}

/** order by max() on columns of table "signal" */
export type Signals_Max_Order_By = {
  account_id?: InputMaybe<Order_By>
  atom_id?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  delta?: InputMaybe<Order_By>
  deposit_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  redemption_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
  triple_id?: InputMaybe<Order_By>
}

/** aggregate min on columns */
export type Signals_Min_Fields = {
  __typename?: 'signals_min_fields'
  account_id?: Maybe<Scalars['String']['output']>
  atom_id?: Maybe<Scalars['numeric']['output']>
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  delta?: Maybe<Scalars['numeric']['output']>
  deposit_id?: Maybe<Scalars['String']['output']>
  id?: Maybe<Scalars['String']['output']>
  redemption_id?: Maybe<Scalars['String']['output']>
  transaction_hash?: Maybe<Scalars['String']['output']>
  triple_id?: Maybe<Scalars['numeric']['output']>
}

/** order by min() on columns of table "signal" */
export type Signals_Min_Order_By = {
  account_id?: InputMaybe<Order_By>
  atom_id?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  delta?: InputMaybe<Order_By>
  deposit_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  redemption_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
  triple_id?: InputMaybe<Order_By>
}

/** Ordering options when selecting data from "signal". */
export type Signals_Order_By = {
  account?: InputMaybe<Accounts_Order_By>
  account_id?: InputMaybe<Order_By>
  atom_id?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  delta?: InputMaybe<Order_By>
  deposit?: InputMaybe<Deposits_Order_By>
  deposit_id?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  redemption?: InputMaybe<Redemptions_Order_By>
  redemption_id?: InputMaybe<Order_By>
  term?: InputMaybe<Terms_Order_By>
  transaction_hash?: InputMaybe<Order_By>
  triple_id?: InputMaybe<Order_By>
  vault?: InputMaybe<Vaults_Order_By>
}

/** select columns of table "signal" */
export enum Signals_Select_Column {
  /** column name */
  AccountId = 'account_id',
  /** column name */
  AtomId = 'atom_id',
  /** column name */
  BlockNumber = 'block_number',
  /** column name */
  BlockTimestamp = 'block_timestamp',
  /** column name */
  Delta = 'delta',
  /** column name */
  DepositId = 'deposit_id',
  /** column name */
  Id = 'id',
  /** column name */
  RedemptionId = 'redemption_id',
  /** column name */
  TransactionHash = 'transaction_hash',
  /** column name */
  TripleId = 'triple_id',
}

/** aggregate stddev on columns */
export type Signals_Stddev_Fields = {
  __typename?: 'signals_stddev_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  delta?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev() on columns of table "signal" */
export type Signals_Stddev_Order_By = {
  atom_id?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  delta?: InputMaybe<Order_By>
  triple_id?: InputMaybe<Order_By>
}

/** aggregate stddev_pop on columns */
export type Signals_Stddev_Pop_Fields = {
  __typename?: 'signals_stddev_pop_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  delta?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_pop() on columns of table "signal" */
export type Signals_Stddev_Pop_Order_By = {
  atom_id?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  delta?: InputMaybe<Order_By>
  triple_id?: InputMaybe<Order_By>
}

/** aggregate stddev_samp on columns */
export type Signals_Stddev_Samp_Fields = {
  __typename?: 'signals_stddev_samp_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  delta?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_samp() on columns of table "signal" */
export type Signals_Stddev_Samp_Order_By = {
  atom_id?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  delta?: InputMaybe<Order_By>
  triple_id?: InputMaybe<Order_By>
}

/** Streaming cursor of the table "signals" */
export type Signals_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Signals_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Signals_Stream_Cursor_Value_Input = {
  account_id?: InputMaybe<Scalars['String']['input']>
  atom_id?: InputMaybe<Scalars['numeric']['input']>
  block_number?: InputMaybe<Scalars['numeric']['input']>
  block_timestamp?: InputMaybe<Scalars['bigint']['input']>
  delta?: InputMaybe<Scalars['numeric']['input']>
  deposit_id?: InputMaybe<Scalars['String']['input']>
  id?: InputMaybe<Scalars['String']['input']>
  redemption_id?: InputMaybe<Scalars['String']['input']>
  transaction_hash?: InputMaybe<Scalars['String']['input']>
  triple_id?: InputMaybe<Scalars['numeric']['input']>
}

/** aggregate sum on columns */
export type Signals_Sum_Fields = {
  __typename?: 'signals_sum_fields'
  atom_id?: Maybe<Scalars['numeric']['output']>
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  delta?: Maybe<Scalars['numeric']['output']>
  triple_id?: Maybe<Scalars['numeric']['output']>
}

/** order by sum() on columns of table "signal" */
export type Signals_Sum_Order_By = {
  atom_id?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  delta?: InputMaybe<Order_By>
  triple_id?: InputMaybe<Order_By>
}

/** aggregate var_pop on columns */
export type Signals_Var_Pop_Fields = {
  __typename?: 'signals_var_pop_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  delta?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** order by var_pop() on columns of table "signal" */
export type Signals_Var_Pop_Order_By = {
  atom_id?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  delta?: InputMaybe<Order_By>
  triple_id?: InputMaybe<Order_By>
}

/** aggregate var_samp on columns */
export type Signals_Var_Samp_Fields = {
  __typename?: 'signals_var_samp_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  delta?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** order by var_samp() on columns of table "signal" */
export type Signals_Var_Samp_Order_By = {
  atom_id?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  delta?: InputMaybe<Order_By>
  triple_id?: InputMaybe<Order_By>
}

/** aggregate variance on columns */
export type Signals_Variance_Fields = {
  __typename?: 'signals_variance_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  delta?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** order by variance() on columns of table "signal" */
export type Signals_Variance_Order_By = {
  atom_id?: InputMaybe<Order_By>
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  delta?: InputMaybe<Order_By>
  triple_id?: InputMaybe<Order_By>
}

/** columns and relationships of "stats" */
export type Stats = {
  __typename?: 'stats'
  contract_balance?: Maybe<Scalars['numeric']['output']>
  id: Scalars['Int']['output']
  total_accounts?: Maybe<Scalars['Int']['output']>
  total_atoms?: Maybe<Scalars['Int']['output']>
  total_fees?: Maybe<Scalars['numeric']['output']>
  total_positions?: Maybe<Scalars['Int']['output']>
  total_signals?: Maybe<Scalars['Int']['output']>
  total_triples?: Maybe<Scalars['Int']['output']>
}

/** aggregated selection of "stats" */
export type Stats_Aggregate = {
  __typename?: 'stats_aggregate'
  aggregate?: Maybe<Stats_Aggregate_Fields>
  nodes: Array<Stats>
}

/** aggregate fields of "stats" */
export type Stats_Aggregate_Fields = {
  __typename?: 'stats_aggregate_fields'
  avg?: Maybe<Stats_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Stats_Max_Fields>
  min?: Maybe<Stats_Min_Fields>
  stddev?: Maybe<Stats_Stddev_Fields>
  stddev_pop?: Maybe<Stats_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Stats_Stddev_Samp_Fields>
  sum?: Maybe<Stats_Sum_Fields>
  var_pop?: Maybe<Stats_Var_Pop_Fields>
  var_samp?: Maybe<Stats_Var_Samp_Fields>
  variance?: Maybe<Stats_Variance_Fields>
}

/** aggregate fields of "stats" */
export type Stats_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Stats_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** aggregate avg on columns */
export type Stats_Avg_Fields = {
  __typename?: 'stats_avg_fields'
  contract_balance?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  total_accounts?: Maybe<Scalars['Float']['output']>
  total_atoms?: Maybe<Scalars['Float']['output']>
  total_fees?: Maybe<Scalars['Float']['output']>
  total_positions?: Maybe<Scalars['Float']['output']>
  total_signals?: Maybe<Scalars['Float']['output']>
  total_triples?: Maybe<Scalars['Float']['output']>
}

/** Boolean expression to filter rows from the table "stats". All fields are combined with a logical 'AND'. */
export type Stats_Bool_Exp = {
  _and?: InputMaybe<Array<Stats_Bool_Exp>>
  _not?: InputMaybe<Stats_Bool_Exp>
  _or?: InputMaybe<Array<Stats_Bool_Exp>>
  contract_balance?: InputMaybe<Numeric_Comparison_Exp>
  id?: InputMaybe<Int_Comparison_Exp>
  total_accounts?: InputMaybe<Int_Comparison_Exp>
  total_atoms?: InputMaybe<Int_Comparison_Exp>
  total_fees?: InputMaybe<Numeric_Comparison_Exp>
  total_positions?: InputMaybe<Int_Comparison_Exp>
  total_signals?: InputMaybe<Int_Comparison_Exp>
  total_triples?: InputMaybe<Int_Comparison_Exp>
}

/** aggregate max on columns */
export type Stats_Max_Fields = {
  __typename?: 'stats_max_fields'
  contract_balance?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['Int']['output']>
  total_accounts?: Maybe<Scalars['Int']['output']>
  total_atoms?: Maybe<Scalars['Int']['output']>
  total_fees?: Maybe<Scalars['numeric']['output']>
  total_positions?: Maybe<Scalars['Int']['output']>
  total_signals?: Maybe<Scalars['Int']['output']>
  total_triples?: Maybe<Scalars['Int']['output']>
}

/** aggregate min on columns */
export type Stats_Min_Fields = {
  __typename?: 'stats_min_fields'
  contract_balance?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['Int']['output']>
  total_accounts?: Maybe<Scalars['Int']['output']>
  total_atoms?: Maybe<Scalars['Int']['output']>
  total_fees?: Maybe<Scalars['numeric']['output']>
  total_positions?: Maybe<Scalars['Int']['output']>
  total_signals?: Maybe<Scalars['Int']['output']>
  total_triples?: Maybe<Scalars['Int']['output']>
}

/** Ordering options when selecting data from "stats". */
export type Stats_Order_By = {
  contract_balance?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  total_accounts?: InputMaybe<Order_By>
  total_atoms?: InputMaybe<Order_By>
  total_fees?: InputMaybe<Order_By>
  total_positions?: InputMaybe<Order_By>
  total_signals?: InputMaybe<Order_By>
  total_triples?: InputMaybe<Order_By>
}

/** select columns of table "stats" */
export enum Stats_Select_Column {
  /** column name */
  ContractBalance = 'contract_balance',
  /** column name */
  Id = 'id',
  /** column name */
  TotalAccounts = 'total_accounts',
  /** column name */
  TotalAtoms = 'total_atoms',
  /** column name */
  TotalFees = 'total_fees',
  /** column name */
  TotalPositions = 'total_positions',
  /** column name */
  TotalSignals = 'total_signals',
  /** column name */
  TotalTriples = 'total_triples',
}

/** aggregate stddev on columns */
export type Stats_Stddev_Fields = {
  __typename?: 'stats_stddev_fields'
  contract_balance?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  total_accounts?: Maybe<Scalars['Float']['output']>
  total_atoms?: Maybe<Scalars['Float']['output']>
  total_fees?: Maybe<Scalars['Float']['output']>
  total_positions?: Maybe<Scalars['Float']['output']>
  total_signals?: Maybe<Scalars['Float']['output']>
  total_triples?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_pop on columns */
export type Stats_Stddev_Pop_Fields = {
  __typename?: 'stats_stddev_pop_fields'
  contract_balance?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  total_accounts?: Maybe<Scalars['Float']['output']>
  total_atoms?: Maybe<Scalars['Float']['output']>
  total_fees?: Maybe<Scalars['Float']['output']>
  total_positions?: Maybe<Scalars['Float']['output']>
  total_signals?: Maybe<Scalars['Float']['output']>
  total_triples?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_samp on columns */
export type Stats_Stddev_Samp_Fields = {
  __typename?: 'stats_stddev_samp_fields'
  contract_balance?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  total_accounts?: Maybe<Scalars['Float']['output']>
  total_atoms?: Maybe<Scalars['Float']['output']>
  total_fees?: Maybe<Scalars['Float']['output']>
  total_positions?: Maybe<Scalars['Float']['output']>
  total_signals?: Maybe<Scalars['Float']['output']>
  total_triples?: Maybe<Scalars['Float']['output']>
}

/** Streaming cursor of the table "stats" */
export type Stats_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Stats_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Stats_Stream_Cursor_Value_Input = {
  contract_balance?: InputMaybe<Scalars['numeric']['input']>
  id?: InputMaybe<Scalars['Int']['input']>
  total_accounts?: InputMaybe<Scalars['Int']['input']>
  total_atoms?: InputMaybe<Scalars['Int']['input']>
  total_fees?: InputMaybe<Scalars['numeric']['input']>
  total_positions?: InputMaybe<Scalars['Int']['input']>
  total_signals?: InputMaybe<Scalars['Int']['input']>
  total_triples?: InputMaybe<Scalars['Int']['input']>
}

/** aggregate sum on columns */
export type Stats_Sum_Fields = {
  __typename?: 'stats_sum_fields'
  contract_balance?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['Int']['output']>
  total_accounts?: Maybe<Scalars['Int']['output']>
  total_atoms?: Maybe<Scalars['Int']['output']>
  total_fees?: Maybe<Scalars['numeric']['output']>
  total_positions?: Maybe<Scalars['Int']['output']>
  total_signals?: Maybe<Scalars['Int']['output']>
  total_triples?: Maybe<Scalars['Int']['output']>
}

/** aggregate var_pop on columns */
export type Stats_Var_Pop_Fields = {
  __typename?: 'stats_var_pop_fields'
  contract_balance?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  total_accounts?: Maybe<Scalars['Float']['output']>
  total_atoms?: Maybe<Scalars['Float']['output']>
  total_fees?: Maybe<Scalars['Float']['output']>
  total_positions?: Maybe<Scalars['Float']['output']>
  total_signals?: Maybe<Scalars['Float']['output']>
  total_triples?: Maybe<Scalars['Float']['output']>
}

/** aggregate var_samp on columns */
export type Stats_Var_Samp_Fields = {
  __typename?: 'stats_var_samp_fields'
  contract_balance?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  total_accounts?: Maybe<Scalars['Float']['output']>
  total_atoms?: Maybe<Scalars['Float']['output']>
  total_fees?: Maybe<Scalars['Float']['output']>
  total_positions?: Maybe<Scalars['Float']['output']>
  total_signals?: Maybe<Scalars['Float']['output']>
  total_triples?: Maybe<Scalars['Float']['output']>
}

/** aggregate variance on columns */
export type Stats_Variance_Fields = {
  __typename?: 'stats_variance_fields'
  contract_balance?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  total_accounts?: Maybe<Scalars['Float']['output']>
  total_atoms?: Maybe<Scalars['Float']['output']>
  total_fees?: Maybe<Scalars['Float']['output']>
  total_positions?: Maybe<Scalars['Float']['output']>
  total_signals?: Maybe<Scalars['Float']['output']>
  total_triples?: Maybe<Scalars['Float']['output']>
}

export type Subscription_Root = {
  __typename?: 'subscription_root'
  /** fetch data from the table: "account" using primary key columns */
  account?: Maybe<Accounts>
  /** An array relationship */
  accounts: Array<Accounts>
  /** An aggregate relationship */
  accounts_aggregate: Accounts_Aggregate
  /** fetch data from the table in a streaming manner: "account" */
  accounts_stream: Array<Accounts>
  /** execute function "accounts_that_claim_about_account" which returns "account" */
  accounts_that_claim_about_account: Array<Accounts>
  /** execute function "accounts_that_claim_about_account" and query aggregates on result of table type "account" */
  accounts_that_claim_about_account_aggregate: Accounts_Aggregate
  /** fetch data from the table: "atom" using primary key columns */
  atom?: Maybe<Atoms>
  /** fetch data from the table: "atom_value" using primary key columns */
  atom_value?: Maybe<Atom_Values>
  /** fetch data from the table: "atom_value" */
  atom_values: Array<Atom_Values>
  /** fetch aggregated fields from the table: "atom_value" */
  atom_values_aggregate: Atom_Values_Aggregate
  /** fetch data from the table in a streaming manner: "atom_value" */
  atom_values_stream: Array<Atom_Values>
  /** An array relationship */
  atoms: Array<Atoms>
  /** An aggregate relationship */
  atoms_aggregate: Atoms_Aggregate
  /** fetch data from the table in a streaming manner: "atom" */
  atoms_stream: Array<Atoms>
  /** fetch data from the table: "book" using primary key columns */
  book?: Maybe<Books>
  /** fetch data from the table: "book" */
  books: Array<Books>
  /** fetch aggregated fields from the table: "book" */
  books_aggregate: Books_Aggregate
  /** fetch data from the table in a streaming manner: "book" */
  books_stream: Array<Books>
  /** fetch data from the table: "byte_object" */
  byte_object: Array<Byte_Object>
  /** fetch aggregated fields from the table: "byte_object" */
  byte_object_aggregate: Byte_Object_Aggregate
  /** fetch data from the table: "byte_object" using primary key columns */
  byte_object_by_pk?: Maybe<Byte_Object>
  /** fetch data from the table in a streaming manner: "byte_object" */
  byte_object_stream: Array<Byte_Object>
  /** fetch data from the table: "cached_images.cached_image" */
  cached_images_cached_image: Array<Cached_Images_Cached_Image>
  /** fetch data from the table: "cached_images.cached_image" using primary key columns */
  cached_images_cached_image_by_pk?: Maybe<Cached_Images_Cached_Image>
  /** fetch data from the table in a streaming manner: "cached_images.cached_image" */
  cached_images_cached_image_stream: Array<Cached_Images_Cached_Image>
  /** fetch data from the table: "caip10" using primary key columns */
  caip10?: Maybe<Caip10>
  /** fetch aggregated fields from the table: "caip10" */
  caip10_aggregate: Caip10_Aggregate
  /** fetch data from the table in a streaming manner: "caip10" */
  caip10_stream: Array<Caip10>
  /** fetch data from the table: "caip10" */
  caip10s: Array<Caip10>
  /** fetch data from the table: "chainlink_price" using primary key columns */
  chainlink_price?: Maybe<Chainlink_Prices>
  /** fetch data from the table: "chainlink_price" */
  chainlink_prices: Array<Chainlink_Prices>
  /** fetch data from the table in a streaming manner: "chainlink_price" */
  chainlink_prices_stream: Array<Chainlink_Prices>
  /** fetch data from the table: "claim" using primary key columns */
  claim?: Maybe<Claims>
  /** An array relationship */
  claims: Array<Claims>
  /** An aggregate relationship */
  claims_aggregate: Claims_Aggregate
  /** execute function "claims_from_following" which returns "claim" */
  claims_from_following: Array<Claims>
  /** execute function "claims_from_following" and query aggregates on result of table type "claim" */
  claims_from_following_aggregate: Claims_Aggregate
  /** fetch data from the table in a streaming manner: "claim" */
  claims_stream: Array<Claims>
  /** fetch data from the table: "deposit" using primary key columns */
  deposit?: Maybe<Deposits>
  /** An array relationship */
  deposits: Array<Deposits>
  /** An aggregate relationship */
  deposits_aggregate: Deposits_Aggregate
  /** fetch data from the table in a streaming manner: "deposit" */
  deposits_stream: Array<Deposits>
  /** fetch data from the table: "event" using primary key columns */
  event?: Maybe<Events>
  /** fetch data from the table: "event" */
  events: Array<Events>
  /** fetch aggregated fields from the table: "event" */
  events_aggregate: Events_Aggregate
  /** fetch data from the table in a streaming manner: "event" */
  events_stream: Array<Events>
  /** fetch data from the table: "fee_transfer" using primary key columns */
  fee_transfer?: Maybe<Fee_Transfers>
  /** An array relationship */
  fee_transfers: Array<Fee_Transfers>
  /** An aggregate relationship */
  fee_transfers_aggregate: Fee_Transfers_Aggregate
  /** fetch data from the table in a streaming manner: "fee_transfer" */
  fee_transfers_stream: Array<Fee_Transfers>
  /** execute function "following" which returns "account" */
  following: Array<Accounts>
  /** execute function "following" and query aggregates on result of table type "account" */
  following_aggregate: Accounts_Aggregate
  /** fetch data from the table: "json_object" using primary key columns */
  json_object?: Maybe<Json_Objects>
  /** fetch data from the table: "json_object" */
  json_objects: Array<Json_Objects>
  /** fetch aggregated fields from the table: "json_object" */
  json_objects_aggregate: Json_Objects_Aggregate
  /** fetch data from the table in a streaming manner: "json_object" */
  json_objects_stream: Array<Json_Objects>
  /** fetch data from the table: "organization" using primary key columns */
  organization?: Maybe<Organizations>
  /** fetch data from the table: "organization" */
  organizations: Array<Organizations>
  /** fetch aggregated fields from the table: "organization" */
  organizations_aggregate: Organizations_Aggregate
  /** fetch data from the table in a streaming manner: "organization" */
  organizations_stream: Array<Organizations>
  /** fetch data from the table: "person" using primary key columns */
  person?: Maybe<Persons>
  /** fetch data from the table: "person" */
  persons: Array<Persons>
  /** fetch aggregated fields from the table: "person" */
  persons_aggregate: Persons_Aggregate
  /** fetch data from the table in a streaming manner: "person" */
  persons_stream: Array<Persons>
  /** fetch data from the table: "position" using primary key columns */
  position?: Maybe<Positions>
  /** An array relationship */
  positions: Array<Positions>
  /** An aggregate relationship */
  positions_aggregate: Positions_Aggregate
  /** fetch data from the table in a streaming manner: "position" */
  positions_stream: Array<Positions>
  /** fetch data from the table: "predicate_object" */
  predicate_objects: Array<Predicate_Objects>
  /** fetch aggregated fields from the table: "predicate_object" */
  predicate_objects_aggregate: Predicate_Objects_Aggregate
  /** fetch data from the table: "predicate_object" using primary key columns */
  predicate_objects_by_pk?: Maybe<Predicate_Objects>
  /** fetch data from the table in a streaming manner: "predicate_object" */
  predicate_objects_stream: Array<Predicate_Objects>
  /** fetch data from the table: "redemption" using primary key columns */
  redemption?: Maybe<Redemptions>
  /** An array relationship */
  redemptions: Array<Redemptions>
  /** An aggregate relationship */
  redemptions_aggregate: Redemptions_Aggregate
  /** fetch data from the table in a streaming manner: "redemption" */
  redemptions_stream: Array<Redemptions>
  /** fetch data from the table: "share_price_change" using primary key columns */
  share_price_change?: Maybe<Share_Price_Changes>
  /** An array relationship */
  share_price_changes: Array<Share_Price_Changes>
  /** An aggregate relationship */
  share_price_changes_aggregate: Share_Price_Changes_Aggregate
  /** fetch data from the table in a streaming manner: "share_price_change" */
  share_price_changes_stream: Array<Share_Price_Changes>
  /** fetch data from the table: "signal" using primary key columns */
  signal?: Maybe<Signals>
  /** An array relationship */
  signals: Array<Signals>
  /** An aggregate relationship */
  signals_aggregate: Signals_Aggregate
  /** execute function "signals_from_following" which returns "signal" */
  signals_from_following: Array<Signals>
  /** execute function "signals_from_following" and query aggregates on result of table type "signal" */
  signals_from_following_aggregate: Signals_Aggregate
  /** fetch data from the table in a streaming manner: "signal" */
  signals_stream: Array<Signals>
  /** fetch data from the table: "stats" using primary key columns */
  stat?: Maybe<Stats>
  /** fetch data from the table: "stats" */
  stats: Array<Stats>
  /** fetch aggregated fields from the table: "stats" */
  stats_aggregate: Stats_Aggregate
  /** fetch data from the table in a streaming manner: "stats" */
  stats_stream: Array<Stats>
  /** fetch data from the table: "term" using primary key columns */
  term?: Maybe<Terms>
  /** fetch data from the table: "term" */
  terms: Array<Terms>
  /** fetch aggregated fields from the table: "term" */
  terms_aggregate: Terms_Aggregate
  /** fetch data from the table in a streaming manner: "term" */
  terms_stream: Array<Terms>
  /** fetch data from the table: "text_object" using primary key columns */
  text_object?: Maybe<Text_Objects>
  /** fetch data from the table: "text_object" */
  text_objects: Array<Text_Objects>
  /** fetch aggregated fields from the table: "text_object" */
  text_objects_aggregate: Text_Objects_Aggregate
  /** fetch data from the table in a streaming manner: "text_object" */
  text_objects_stream: Array<Text_Objects>
  /** fetch data from the table: "thing" using primary key columns */
  thing?: Maybe<Things>
  /** fetch data from the table: "thing" */
  things: Array<Things>
  /** fetch aggregated fields from the table: "thing" */
  things_aggregate: Things_Aggregate
  /** fetch data from the table in a streaming manner: "thing" */
  things_stream: Array<Things>
  /** fetch data from the table: "triple" using primary key columns */
  triple?: Maybe<Triples>
  /** An array relationship */
  triples: Array<Triples>
  /** An aggregate relationship */
  triples_aggregate: Triples_Aggregate
  /** fetch data from the table in a streaming manner: "triple" */
  triples_stream: Array<Triples>
  /** fetch data from the table: "vault" using primary key columns */
  vault?: Maybe<Vaults>
  /** An array relationship */
  vaults: Array<Vaults>
  /** An aggregate relationship */
  vaults_aggregate: Vaults_Aggregate
  /** fetch data from the table in a streaming manner: "vault" */
  vaults_stream: Array<Vaults>
}

export type Subscription_RootAccountArgs = {
  id: Scalars['String']['input']
}

export type Subscription_RootAccountsArgs = {
  distinct_on?: InputMaybe<Array<Accounts_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Accounts_Order_By>>
  where?: InputMaybe<Accounts_Bool_Exp>
}

export type Subscription_RootAccounts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Accounts_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Accounts_Order_By>>
  where?: InputMaybe<Accounts_Bool_Exp>
}

export type Subscription_RootAccounts_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Accounts_Stream_Cursor_Input>>
  where?: InputMaybe<Accounts_Bool_Exp>
}

export type Subscription_RootAccounts_That_Claim_About_AccountArgs = {
  args: Accounts_That_Claim_About_Account_Args
  distinct_on?: InputMaybe<Array<Accounts_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Accounts_Order_By>>
  where?: InputMaybe<Accounts_Bool_Exp>
}

export type Subscription_RootAccounts_That_Claim_About_Account_AggregateArgs = {
  args: Accounts_That_Claim_About_Account_Args
  distinct_on?: InputMaybe<Array<Accounts_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Accounts_Order_By>>
  where?: InputMaybe<Accounts_Bool_Exp>
}

export type Subscription_RootAtomArgs = {
  term_id: Scalars['numeric']['input']
}

export type Subscription_RootAtom_ValueArgs = {
  id: Scalars['numeric']['input']
}

export type Subscription_RootAtom_ValuesArgs = {
  distinct_on?: InputMaybe<Array<Atom_Values_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Atom_Values_Order_By>>
  where?: InputMaybe<Atom_Values_Bool_Exp>
}

export type Subscription_RootAtom_Values_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Atom_Values_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Atom_Values_Order_By>>
  where?: InputMaybe<Atom_Values_Bool_Exp>
}

export type Subscription_RootAtom_Values_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Atom_Values_Stream_Cursor_Input>>
  where?: InputMaybe<Atom_Values_Bool_Exp>
}

export type Subscription_RootAtomsArgs = {
  distinct_on?: InputMaybe<Array<Atoms_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Atoms_Order_By>>
  where?: InputMaybe<Atoms_Bool_Exp>
}

export type Subscription_RootAtoms_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Atoms_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Atoms_Order_By>>
  where?: InputMaybe<Atoms_Bool_Exp>
}

export type Subscription_RootAtoms_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Atoms_Stream_Cursor_Input>>
  where?: InputMaybe<Atoms_Bool_Exp>
}

export type Subscription_RootBookArgs = {
  id: Scalars['numeric']['input']
}

export type Subscription_RootBooksArgs = {
  distinct_on?: InputMaybe<Array<Books_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Books_Order_By>>
  where?: InputMaybe<Books_Bool_Exp>
}

export type Subscription_RootBooks_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Books_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Books_Order_By>>
  where?: InputMaybe<Books_Bool_Exp>
}

export type Subscription_RootBooks_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Books_Stream_Cursor_Input>>
  where?: InputMaybe<Books_Bool_Exp>
}

export type Subscription_RootByte_ObjectArgs = {
  distinct_on?: InputMaybe<Array<Byte_Object_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Byte_Object_Order_By>>
  where?: InputMaybe<Byte_Object_Bool_Exp>
}

export type Subscription_RootByte_Object_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Byte_Object_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Byte_Object_Order_By>>
  where?: InputMaybe<Byte_Object_Bool_Exp>
}

export type Subscription_RootByte_Object_By_PkArgs = {
  id: Scalars['numeric']['input']
}

export type Subscription_RootByte_Object_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Byte_Object_Stream_Cursor_Input>>
  where?: InputMaybe<Byte_Object_Bool_Exp>
}

export type Subscription_RootCached_Images_Cached_ImageArgs = {
  distinct_on?: InputMaybe<Array<Cached_Images_Cached_Image_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Cached_Images_Cached_Image_Order_By>>
  where?: InputMaybe<Cached_Images_Cached_Image_Bool_Exp>
}

export type Subscription_RootCached_Images_Cached_Image_By_PkArgs = {
  url: Scalars['String']['input']
}

export type Subscription_RootCached_Images_Cached_Image_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Cached_Images_Cached_Image_Stream_Cursor_Input>>
  where?: InputMaybe<Cached_Images_Cached_Image_Bool_Exp>
}

export type Subscription_RootCaip10Args = {
  id: Scalars['numeric']['input']
}

export type Subscription_RootCaip10_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Caip10_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Caip10_Order_By>>
  where?: InputMaybe<Caip10_Bool_Exp>
}

export type Subscription_RootCaip10_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Caip10_Stream_Cursor_Input>>
  where?: InputMaybe<Caip10_Bool_Exp>
}

export type Subscription_RootCaip10sArgs = {
  distinct_on?: InputMaybe<Array<Caip10_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Caip10_Order_By>>
  where?: InputMaybe<Caip10_Bool_Exp>
}

export type Subscription_RootChainlink_PriceArgs = {
  id: Scalars['numeric']['input']
}

export type Subscription_RootChainlink_PricesArgs = {
  distinct_on?: InputMaybe<Array<Chainlink_Prices_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Chainlink_Prices_Order_By>>
  where?: InputMaybe<Chainlink_Prices_Bool_Exp>
}

export type Subscription_RootChainlink_Prices_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Chainlink_Prices_Stream_Cursor_Input>>
  where?: InputMaybe<Chainlink_Prices_Bool_Exp>
}

export type Subscription_RootClaimArgs = {
  id: Scalars['String']['input']
}

export type Subscription_RootClaimsArgs = {
  distinct_on?: InputMaybe<Array<Claims_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Claims_Order_By>>
  where?: InputMaybe<Claims_Bool_Exp>
}

export type Subscription_RootClaims_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Claims_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Claims_Order_By>>
  where?: InputMaybe<Claims_Bool_Exp>
}

export type Subscription_RootClaims_From_FollowingArgs = {
  args: Claims_From_Following_Args
  distinct_on?: InputMaybe<Array<Claims_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Claims_Order_By>>
  where?: InputMaybe<Claims_Bool_Exp>
}

export type Subscription_RootClaims_From_Following_AggregateArgs = {
  args: Claims_From_Following_Args
  distinct_on?: InputMaybe<Array<Claims_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Claims_Order_By>>
  where?: InputMaybe<Claims_Bool_Exp>
}

export type Subscription_RootClaims_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Claims_Stream_Cursor_Input>>
  where?: InputMaybe<Claims_Bool_Exp>
}

export type Subscription_RootDepositArgs = {
  id: Scalars['String']['input']
}

export type Subscription_RootDepositsArgs = {
  distinct_on?: InputMaybe<Array<Deposits_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Deposits_Order_By>>
  where?: InputMaybe<Deposits_Bool_Exp>
}

export type Subscription_RootDeposits_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Deposits_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Deposits_Order_By>>
  where?: InputMaybe<Deposits_Bool_Exp>
}

export type Subscription_RootDeposits_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Deposits_Stream_Cursor_Input>>
  where?: InputMaybe<Deposits_Bool_Exp>
}

export type Subscription_RootEventArgs = {
  id: Scalars['String']['input']
}

export type Subscription_RootEventsArgs = {
  distinct_on?: InputMaybe<Array<Events_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Events_Order_By>>
  where?: InputMaybe<Events_Bool_Exp>
}

export type Subscription_RootEvents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Events_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Events_Order_By>>
  where?: InputMaybe<Events_Bool_Exp>
}

export type Subscription_RootEvents_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Events_Stream_Cursor_Input>>
  where?: InputMaybe<Events_Bool_Exp>
}

export type Subscription_RootFee_TransferArgs = {
  id: Scalars['String']['input']
}

export type Subscription_RootFee_TransfersArgs = {
  distinct_on?: InputMaybe<Array<Fee_Transfers_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Fee_Transfers_Order_By>>
  where?: InputMaybe<Fee_Transfers_Bool_Exp>
}

export type Subscription_RootFee_Transfers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Fee_Transfers_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Fee_Transfers_Order_By>>
  where?: InputMaybe<Fee_Transfers_Bool_Exp>
}

export type Subscription_RootFee_Transfers_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Fee_Transfers_Stream_Cursor_Input>>
  where?: InputMaybe<Fee_Transfers_Bool_Exp>
}

export type Subscription_RootFollowingArgs = {
  args: Following_Args
  distinct_on?: InputMaybe<Array<Accounts_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Accounts_Order_By>>
  where?: InputMaybe<Accounts_Bool_Exp>
}

export type Subscription_RootFollowing_AggregateArgs = {
  args: Following_Args
  distinct_on?: InputMaybe<Array<Accounts_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Accounts_Order_By>>
  where?: InputMaybe<Accounts_Bool_Exp>
}

export type Subscription_RootJson_ObjectArgs = {
  id: Scalars['numeric']['input']
}

export type Subscription_RootJson_ObjectsArgs = {
  distinct_on?: InputMaybe<Array<Json_Objects_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Json_Objects_Order_By>>
  where?: InputMaybe<Json_Objects_Bool_Exp>
}

export type Subscription_RootJson_Objects_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Json_Objects_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Json_Objects_Order_By>>
  where?: InputMaybe<Json_Objects_Bool_Exp>
}

export type Subscription_RootJson_Objects_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Json_Objects_Stream_Cursor_Input>>
  where?: InputMaybe<Json_Objects_Bool_Exp>
}

export type Subscription_RootOrganizationArgs = {
  id: Scalars['numeric']['input']
}

export type Subscription_RootOrganizationsArgs = {
  distinct_on?: InputMaybe<Array<Organizations_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Organizations_Order_By>>
  where?: InputMaybe<Organizations_Bool_Exp>
}

export type Subscription_RootOrganizations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Organizations_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Organizations_Order_By>>
  where?: InputMaybe<Organizations_Bool_Exp>
}

export type Subscription_RootOrganizations_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Organizations_Stream_Cursor_Input>>
  where?: InputMaybe<Organizations_Bool_Exp>
}

export type Subscription_RootPersonArgs = {
  id: Scalars['numeric']['input']
}

export type Subscription_RootPersonsArgs = {
  distinct_on?: InputMaybe<Array<Persons_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Persons_Order_By>>
  where?: InputMaybe<Persons_Bool_Exp>
}

export type Subscription_RootPersons_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Persons_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Persons_Order_By>>
  where?: InputMaybe<Persons_Bool_Exp>
}

export type Subscription_RootPersons_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Persons_Stream_Cursor_Input>>
  where?: InputMaybe<Persons_Bool_Exp>
}

export type Subscription_RootPositionArgs = {
  id: Scalars['String']['input']
}

export type Subscription_RootPositionsArgs = {
  distinct_on?: InputMaybe<Array<Positions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Positions_Order_By>>
  where?: InputMaybe<Positions_Bool_Exp>
}

export type Subscription_RootPositions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Positions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Positions_Order_By>>
  where?: InputMaybe<Positions_Bool_Exp>
}

export type Subscription_RootPositions_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Positions_Stream_Cursor_Input>>
  where?: InputMaybe<Positions_Bool_Exp>
}

export type Subscription_RootPredicate_ObjectsArgs = {
  distinct_on?: InputMaybe<Array<Predicate_Objects_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Predicate_Objects_Order_By>>
  where?: InputMaybe<Predicate_Objects_Bool_Exp>
}

export type Subscription_RootPredicate_Objects_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Predicate_Objects_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Predicate_Objects_Order_By>>
  where?: InputMaybe<Predicate_Objects_Bool_Exp>
}

export type Subscription_RootPredicate_Objects_By_PkArgs = {
  id: Scalars['String']['input']
}

export type Subscription_RootPredicate_Objects_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Predicate_Objects_Stream_Cursor_Input>>
  where?: InputMaybe<Predicate_Objects_Bool_Exp>
}

export type Subscription_RootRedemptionArgs = {
  id: Scalars['String']['input']
}

export type Subscription_RootRedemptionsArgs = {
  distinct_on?: InputMaybe<Array<Redemptions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Redemptions_Order_By>>
  where?: InputMaybe<Redemptions_Bool_Exp>
}

export type Subscription_RootRedemptions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Redemptions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Redemptions_Order_By>>
  where?: InputMaybe<Redemptions_Bool_Exp>
}

export type Subscription_RootRedemptions_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Redemptions_Stream_Cursor_Input>>
  where?: InputMaybe<Redemptions_Bool_Exp>
}

export type Subscription_RootShare_Price_ChangeArgs = {
  id: Scalars['bigint']['input']
}

export type Subscription_RootShare_Price_ChangesArgs = {
  distinct_on?: InputMaybe<Array<Share_Price_Changes_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Share_Price_Changes_Order_By>>
  where?: InputMaybe<Share_Price_Changes_Bool_Exp>
}

export type Subscription_RootShare_Price_Changes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Share_Price_Changes_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Share_Price_Changes_Order_By>>
  where?: InputMaybe<Share_Price_Changes_Bool_Exp>
}

export type Subscription_RootShare_Price_Changes_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Share_Price_Changes_Stream_Cursor_Input>>
  where?: InputMaybe<Share_Price_Changes_Bool_Exp>
}

export type Subscription_RootSignalArgs = {
  id: Scalars['String']['input']
}

export type Subscription_RootSignalsArgs = {
  distinct_on?: InputMaybe<Array<Signals_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Signals_Order_By>>
  where?: InputMaybe<Signals_Bool_Exp>
}

export type Subscription_RootSignals_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Signals_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Signals_Order_By>>
  where?: InputMaybe<Signals_Bool_Exp>
}

export type Subscription_RootSignals_From_FollowingArgs = {
  args: Signals_From_Following_Args
  distinct_on?: InputMaybe<Array<Signals_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Signals_Order_By>>
  where?: InputMaybe<Signals_Bool_Exp>
}

export type Subscription_RootSignals_From_Following_AggregateArgs = {
  args: Signals_From_Following_Args
  distinct_on?: InputMaybe<Array<Signals_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Signals_Order_By>>
  where?: InputMaybe<Signals_Bool_Exp>
}

export type Subscription_RootSignals_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Signals_Stream_Cursor_Input>>
  where?: InputMaybe<Signals_Bool_Exp>
}

export type Subscription_RootStatArgs = {
  id: Scalars['Int']['input']
}

export type Subscription_RootStatsArgs = {
  distinct_on?: InputMaybe<Array<Stats_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Stats_Order_By>>
  where?: InputMaybe<Stats_Bool_Exp>
}

export type Subscription_RootStats_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Stats_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Stats_Order_By>>
  where?: InputMaybe<Stats_Bool_Exp>
}

export type Subscription_RootStats_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Stats_Stream_Cursor_Input>>
  where?: InputMaybe<Stats_Bool_Exp>
}

export type Subscription_RootTermArgs = {
  id: Scalars['numeric']['input']
}

export type Subscription_RootTermsArgs = {
  distinct_on?: InputMaybe<Array<Terms_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Terms_Order_By>>
  where?: InputMaybe<Terms_Bool_Exp>
}

export type Subscription_RootTerms_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Terms_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Terms_Order_By>>
  where?: InputMaybe<Terms_Bool_Exp>
}

export type Subscription_RootTerms_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Terms_Stream_Cursor_Input>>
  where?: InputMaybe<Terms_Bool_Exp>
}

export type Subscription_RootText_ObjectArgs = {
  id: Scalars['numeric']['input']
}

export type Subscription_RootText_ObjectsArgs = {
  distinct_on?: InputMaybe<Array<Text_Objects_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Text_Objects_Order_By>>
  where?: InputMaybe<Text_Objects_Bool_Exp>
}

export type Subscription_RootText_Objects_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Text_Objects_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Text_Objects_Order_By>>
  where?: InputMaybe<Text_Objects_Bool_Exp>
}

export type Subscription_RootText_Objects_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Text_Objects_Stream_Cursor_Input>>
  where?: InputMaybe<Text_Objects_Bool_Exp>
}

export type Subscription_RootThingArgs = {
  id: Scalars['numeric']['input']
}

export type Subscription_RootThingsArgs = {
  distinct_on?: InputMaybe<Array<Things_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Things_Order_By>>
  where?: InputMaybe<Things_Bool_Exp>
}

export type Subscription_RootThings_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Things_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Things_Order_By>>
  where?: InputMaybe<Things_Bool_Exp>
}

export type Subscription_RootThings_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Things_Stream_Cursor_Input>>
  where?: InputMaybe<Things_Bool_Exp>
}

export type Subscription_RootTripleArgs = {
  term_id: Scalars['numeric']['input']
}

export type Subscription_RootTriplesArgs = {
  distinct_on?: InputMaybe<Array<Triples_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Triples_Order_By>>
  where?: InputMaybe<Triples_Bool_Exp>
}

export type Subscription_RootTriples_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Triples_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Triples_Order_By>>
  where?: InputMaybe<Triples_Bool_Exp>
}

export type Subscription_RootTriples_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Triples_Stream_Cursor_Input>>
  where?: InputMaybe<Triples_Bool_Exp>
}

export type Subscription_RootVaultArgs = {
  curve_id: Scalars['numeric']['input']
  term_id: Scalars['numeric']['input']
}

export type Subscription_RootVaultsArgs = {
  distinct_on?: InputMaybe<Array<Vaults_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Vaults_Order_By>>
  where?: InputMaybe<Vaults_Bool_Exp>
}

export type Subscription_RootVaults_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Vaults_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Vaults_Order_By>>
  where?: InputMaybe<Vaults_Bool_Exp>
}

export type Subscription_RootVaults_StreamArgs = {
  batch_size: Scalars['Int']['input']
  cursor: Array<InputMaybe<Vaults_Stream_Cursor_Input>>
  where?: InputMaybe<Vaults_Bool_Exp>
}

/** Boolean expression to compare columns of type "term_type". All fields are combined with logical 'AND'. */
export type Term_Type_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['term_type']['input']>
  _gt?: InputMaybe<Scalars['term_type']['input']>
  _gte?: InputMaybe<Scalars['term_type']['input']>
  _in?: InputMaybe<Array<Scalars['term_type']['input']>>
  _is_null?: InputMaybe<Scalars['Boolean']['input']>
  _lt?: InputMaybe<Scalars['term_type']['input']>
  _lte?: InputMaybe<Scalars['term_type']['input']>
  _neq?: InputMaybe<Scalars['term_type']['input']>
  _nin?: InputMaybe<Array<Scalars['term_type']['input']>>
}

/** columns and relationships of "term" */
export type Terms = {
  __typename?: 'terms'
  /** An object relationship */
  atom?: Maybe<Atoms>
  /** An object relationship */
  atomById?: Maybe<Atoms>
  atom_id?: Maybe<Scalars['numeric']['output']>
  /** An array relationship */
  deposits: Array<Deposits>
  /** An aggregate relationship */
  deposits_aggregate: Deposits_Aggregate
  id: Scalars['numeric']['output']
  /** An array relationship */
  positions: Array<Positions>
  /** An aggregate relationship */
  positions_aggregate: Positions_Aggregate
  /** An array relationship */
  redemptions: Array<Redemptions>
  /** An aggregate relationship */
  redemptions_aggregate: Redemptions_Aggregate
  /** An array relationship */
  share_price_changes: Array<Share_Price_Changes>
  /** An aggregate relationship */
  share_price_changes_aggregate: Share_Price_Changes_Aggregate
  /** An array relationship */
  signals: Array<Signals>
  /** An aggregate relationship */
  signals_aggregate: Signals_Aggregate
  total_assets?: Maybe<Scalars['numeric']['output']>
  total_market_cap?: Maybe<Scalars['numeric']['output']>
  /** An object relationship */
  triple?: Maybe<Triples>
  /** An object relationship */
  tripleById?: Maybe<Triples>
  triple_id?: Maybe<Scalars['numeric']['output']>
  type: Scalars['term_type']['output']
  /** An array relationship */
  vaults: Array<Vaults>
  /** An aggregate relationship */
  vaults_aggregate: Vaults_Aggregate
}

/** columns and relationships of "term" */
export type TermsDepositsArgs = {
  distinct_on?: InputMaybe<Array<Deposits_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Deposits_Order_By>>
  where?: InputMaybe<Deposits_Bool_Exp>
}

/** columns and relationships of "term" */
export type TermsDeposits_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Deposits_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Deposits_Order_By>>
  where?: InputMaybe<Deposits_Bool_Exp>
}

/** columns and relationships of "term" */
export type TermsPositionsArgs = {
  distinct_on?: InputMaybe<Array<Positions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Positions_Order_By>>
  where?: InputMaybe<Positions_Bool_Exp>
}

/** columns and relationships of "term" */
export type TermsPositions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Positions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Positions_Order_By>>
  where?: InputMaybe<Positions_Bool_Exp>
}

/** columns and relationships of "term" */
export type TermsRedemptionsArgs = {
  distinct_on?: InputMaybe<Array<Redemptions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Redemptions_Order_By>>
  where?: InputMaybe<Redemptions_Bool_Exp>
}

/** columns and relationships of "term" */
export type TermsRedemptions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Redemptions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Redemptions_Order_By>>
  where?: InputMaybe<Redemptions_Bool_Exp>
}

/** columns and relationships of "term" */
export type TermsShare_Price_ChangesArgs = {
  distinct_on?: InputMaybe<Array<Share_Price_Changes_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Share_Price_Changes_Order_By>>
  where?: InputMaybe<Share_Price_Changes_Bool_Exp>
}

/** columns and relationships of "term" */
export type TermsShare_Price_Changes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Share_Price_Changes_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Share_Price_Changes_Order_By>>
  where?: InputMaybe<Share_Price_Changes_Bool_Exp>
}

/** columns and relationships of "term" */
export type TermsSignalsArgs = {
  distinct_on?: InputMaybe<Array<Signals_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Signals_Order_By>>
  where?: InputMaybe<Signals_Bool_Exp>
}

/** columns and relationships of "term" */
export type TermsSignals_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Signals_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Signals_Order_By>>
  where?: InputMaybe<Signals_Bool_Exp>
}

/** columns and relationships of "term" */
export type TermsVaultsArgs = {
  distinct_on?: InputMaybe<Array<Vaults_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Vaults_Order_By>>
  where?: InputMaybe<Vaults_Bool_Exp>
}

/** columns and relationships of "term" */
export type TermsVaults_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Vaults_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Vaults_Order_By>>
  where?: InputMaybe<Vaults_Bool_Exp>
}

/** aggregated selection of "term" */
export type Terms_Aggregate = {
  __typename?: 'terms_aggregate'
  aggregate?: Maybe<Terms_Aggregate_Fields>
  nodes: Array<Terms>
}

/** aggregate fields of "term" */
export type Terms_Aggregate_Fields = {
  __typename?: 'terms_aggregate_fields'
  avg?: Maybe<Terms_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Terms_Max_Fields>
  min?: Maybe<Terms_Min_Fields>
  stddev?: Maybe<Terms_Stddev_Fields>
  stddev_pop?: Maybe<Terms_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Terms_Stddev_Samp_Fields>
  sum?: Maybe<Terms_Sum_Fields>
  var_pop?: Maybe<Terms_Var_Pop_Fields>
  var_samp?: Maybe<Terms_Var_Samp_Fields>
  variance?: Maybe<Terms_Variance_Fields>
}

/** aggregate fields of "term" */
export type Terms_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Terms_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** aggregate avg on columns */
export type Terms_Avg_Fields = {
  __typename?: 'terms_avg_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_market_cap?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** Boolean expression to filter rows from the table "term". All fields are combined with a logical 'AND'. */
export type Terms_Bool_Exp = {
  _and?: InputMaybe<Array<Terms_Bool_Exp>>
  _not?: InputMaybe<Terms_Bool_Exp>
  _or?: InputMaybe<Array<Terms_Bool_Exp>>
  atom?: InputMaybe<Atoms_Bool_Exp>
  atomById?: InputMaybe<Atoms_Bool_Exp>
  atom_id?: InputMaybe<Numeric_Comparison_Exp>
  deposits?: InputMaybe<Deposits_Bool_Exp>
  deposits_aggregate?: InputMaybe<Deposits_Aggregate_Bool_Exp>
  id?: InputMaybe<Numeric_Comparison_Exp>
  positions?: InputMaybe<Positions_Bool_Exp>
  positions_aggregate?: InputMaybe<Positions_Aggregate_Bool_Exp>
  redemptions?: InputMaybe<Redemptions_Bool_Exp>
  redemptions_aggregate?: InputMaybe<Redemptions_Aggregate_Bool_Exp>
  share_price_changes?: InputMaybe<Share_Price_Changes_Bool_Exp>
  share_price_changes_aggregate?: InputMaybe<Share_Price_Changes_Aggregate_Bool_Exp>
  signals?: InputMaybe<Signals_Bool_Exp>
  signals_aggregate?: InputMaybe<Signals_Aggregate_Bool_Exp>
  total_assets?: InputMaybe<Numeric_Comparison_Exp>
  total_market_cap?: InputMaybe<Numeric_Comparison_Exp>
  triple?: InputMaybe<Triples_Bool_Exp>
  tripleById?: InputMaybe<Triples_Bool_Exp>
  triple_id?: InputMaybe<Numeric_Comparison_Exp>
  type?: InputMaybe<Term_Type_Comparison_Exp>
  vaults?: InputMaybe<Vaults_Bool_Exp>
  vaults_aggregate?: InputMaybe<Vaults_Aggregate_Bool_Exp>
}

/** aggregate max on columns */
export type Terms_Max_Fields = {
  __typename?: 'terms_max_fields'
  atom_id?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['numeric']['output']>
  total_assets?: Maybe<Scalars['numeric']['output']>
  total_market_cap?: Maybe<Scalars['numeric']['output']>
  triple_id?: Maybe<Scalars['numeric']['output']>
  type?: Maybe<Scalars['term_type']['output']>
}

/** aggregate min on columns */
export type Terms_Min_Fields = {
  __typename?: 'terms_min_fields'
  atom_id?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['numeric']['output']>
  total_assets?: Maybe<Scalars['numeric']['output']>
  total_market_cap?: Maybe<Scalars['numeric']['output']>
  triple_id?: Maybe<Scalars['numeric']['output']>
  type?: Maybe<Scalars['term_type']['output']>
}

/** Ordering options when selecting data from "term". */
export type Terms_Order_By = {
  atom?: InputMaybe<Atoms_Order_By>
  atomById?: InputMaybe<Atoms_Order_By>
  atom_id?: InputMaybe<Order_By>
  deposits_aggregate?: InputMaybe<Deposits_Aggregate_Order_By>
  id?: InputMaybe<Order_By>
  positions_aggregate?: InputMaybe<Positions_Aggregate_Order_By>
  redemptions_aggregate?: InputMaybe<Redemptions_Aggregate_Order_By>
  share_price_changes_aggregate?: InputMaybe<Share_Price_Changes_Aggregate_Order_By>
  signals_aggregate?: InputMaybe<Signals_Aggregate_Order_By>
  total_assets?: InputMaybe<Order_By>
  total_market_cap?: InputMaybe<Order_By>
  triple?: InputMaybe<Triples_Order_By>
  tripleById?: InputMaybe<Triples_Order_By>
  triple_id?: InputMaybe<Order_By>
  type?: InputMaybe<Order_By>
  vaults_aggregate?: InputMaybe<Vaults_Aggregate_Order_By>
}

/** select columns of table "term" */
export enum Terms_Select_Column {
  /** column name */
  AtomId = 'atom_id',
  /** column name */
  Id = 'id',
  /** column name */
  TotalAssets = 'total_assets',
  /** column name */
  TotalMarketCap = 'total_market_cap',
  /** column name */
  TripleId = 'triple_id',
  /** column name */
  Type = 'type',
}

/** aggregate stddev on columns */
export type Terms_Stddev_Fields = {
  __typename?: 'terms_stddev_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_market_cap?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_pop on columns */
export type Terms_Stddev_Pop_Fields = {
  __typename?: 'terms_stddev_pop_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_market_cap?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_samp on columns */
export type Terms_Stddev_Samp_Fields = {
  __typename?: 'terms_stddev_samp_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_market_cap?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** Streaming cursor of the table "terms" */
export type Terms_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Terms_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Terms_Stream_Cursor_Value_Input = {
  atom_id?: InputMaybe<Scalars['numeric']['input']>
  id?: InputMaybe<Scalars['numeric']['input']>
  total_assets?: InputMaybe<Scalars['numeric']['input']>
  total_market_cap?: InputMaybe<Scalars['numeric']['input']>
  triple_id?: InputMaybe<Scalars['numeric']['input']>
  type?: InputMaybe<Scalars['term_type']['input']>
}

/** aggregate sum on columns */
export type Terms_Sum_Fields = {
  __typename?: 'terms_sum_fields'
  atom_id?: Maybe<Scalars['numeric']['output']>
  id?: Maybe<Scalars['numeric']['output']>
  total_assets?: Maybe<Scalars['numeric']['output']>
  total_market_cap?: Maybe<Scalars['numeric']['output']>
  triple_id?: Maybe<Scalars['numeric']['output']>
}

/** aggregate var_pop on columns */
export type Terms_Var_Pop_Fields = {
  __typename?: 'terms_var_pop_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_market_cap?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** aggregate var_samp on columns */
export type Terms_Var_Samp_Fields = {
  __typename?: 'terms_var_samp_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_market_cap?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** aggregate variance on columns */
export type Terms_Variance_Fields = {
  __typename?: 'terms_variance_fields'
  atom_id?: Maybe<Scalars['Float']['output']>
  id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_market_cap?: Maybe<Scalars['Float']['output']>
  triple_id?: Maybe<Scalars['Float']['output']>
}

/** columns and relationships of "text_object" */
export type Text_Objects = {
  __typename?: 'text_objects'
  /** An object relationship */
  atom?: Maybe<Atoms>
  data: Scalars['String']['output']
  id: Scalars['numeric']['output']
}

/** aggregated selection of "text_object" */
export type Text_Objects_Aggregate = {
  __typename?: 'text_objects_aggregate'
  aggregate?: Maybe<Text_Objects_Aggregate_Fields>
  nodes: Array<Text_Objects>
}

/** aggregate fields of "text_object" */
export type Text_Objects_Aggregate_Fields = {
  __typename?: 'text_objects_aggregate_fields'
  avg?: Maybe<Text_Objects_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Text_Objects_Max_Fields>
  min?: Maybe<Text_Objects_Min_Fields>
  stddev?: Maybe<Text_Objects_Stddev_Fields>
  stddev_pop?: Maybe<Text_Objects_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Text_Objects_Stddev_Samp_Fields>
  sum?: Maybe<Text_Objects_Sum_Fields>
  var_pop?: Maybe<Text_Objects_Var_Pop_Fields>
  var_samp?: Maybe<Text_Objects_Var_Samp_Fields>
  variance?: Maybe<Text_Objects_Variance_Fields>
}

/** aggregate fields of "text_object" */
export type Text_Objects_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Text_Objects_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** aggregate avg on columns */
export type Text_Objects_Avg_Fields = {
  __typename?: 'text_objects_avg_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** Boolean expression to filter rows from the table "text_object". All fields are combined with a logical 'AND'. */
export type Text_Objects_Bool_Exp = {
  _and?: InputMaybe<Array<Text_Objects_Bool_Exp>>
  _not?: InputMaybe<Text_Objects_Bool_Exp>
  _or?: InputMaybe<Array<Text_Objects_Bool_Exp>>
  atom?: InputMaybe<Atoms_Bool_Exp>
  data?: InputMaybe<String_Comparison_Exp>
  id?: InputMaybe<Numeric_Comparison_Exp>
}

/** aggregate max on columns */
export type Text_Objects_Max_Fields = {
  __typename?: 'text_objects_max_fields'
  data?: Maybe<Scalars['String']['output']>
  id?: Maybe<Scalars['numeric']['output']>
}

/** aggregate min on columns */
export type Text_Objects_Min_Fields = {
  __typename?: 'text_objects_min_fields'
  data?: Maybe<Scalars['String']['output']>
  id?: Maybe<Scalars['numeric']['output']>
}

/** Ordering options when selecting data from "text_object". */
export type Text_Objects_Order_By = {
  atom?: InputMaybe<Atoms_Order_By>
  data?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
}

/** select columns of table "text_object" */
export enum Text_Objects_Select_Column {
  /** column name */
  Data = 'data',
  /** column name */
  Id = 'id',
}

/** aggregate stddev on columns */
export type Text_Objects_Stddev_Fields = {
  __typename?: 'text_objects_stddev_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_pop on columns */
export type Text_Objects_Stddev_Pop_Fields = {
  __typename?: 'text_objects_stddev_pop_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_samp on columns */
export type Text_Objects_Stddev_Samp_Fields = {
  __typename?: 'text_objects_stddev_samp_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** Streaming cursor of the table "text_objects" */
export type Text_Objects_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Text_Objects_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Text_Objects_Stream_Cursor_Value_Input = {
  data?: InputMaybe<Scalars['String']['input']>
  id?: InputMaybe<Scalars['numeric']['input']>
}

/** aggregate sum on columns */
export type Text_Objects_Sum_Fields = {
  __typename?: 'text_objects_sum_fields'
  id?: Maybe<Scalars['numeric']['output']>
}

/** aggregate var_pop on columns */
export type Text_Objects_Var_Pop_Fields = {
  __typename?: 'text_objects_var_pop_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate var_samp on columns */
export type Text_Objects_Var_Samp_Fields = {
  __typename?: 'text_objects_var_samp_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate variance on columns */
export type Text_Objects_Variance_Fields = {
  __typename?: 'text_objects_variance_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** columns and relationships of "thing" */
export type Things = {
  __typename?: 'things'
  /** An object relationship */
  atom?: Maybe<Atoms>
  cached_image?: Maybe<Cached_Images_Cached_Image>
  description?: Maybe<Scalars['String']['output']>
  id: Scalars['numeric']['output']
  image?: Maybe<Scalars['String']['output']>
  name?: Maybe<Scalars['String']['output']>
  url?: Maybe<Scalars['String']['output']>
}

/** aggregated selection of "thing" */
export type Things_Aggregate = {
  __typename?: 'things_aggregate'
  aggregate?: Maybe<Things_Aggregate_Fields>
  nodes: Array<Things>
}

/** aggregate fields of "thing" */
export type Things_Aggregate_Fields = {
  __typename?: 'things_aggregate_fields'
  avg?: Maybe<Things_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Things_Max_Fields>
  min?: Maybe<Things_Min_Fields>
  stddev?: Maybe<Things_Stddev_Fields>
  stddev_pop?: Maybe<Things_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Things_Stddev_Samp_Fields>
  sum?: Maybe<Things_Sum_Fields>
  var_pop?: Maybe<Things_Var_Pop_Fields>
  var_samp?: Maybe<Things_Var_Samp_Fields>
  variance?: Maybe<Things_Variance_Fields>
}

/** aggregate fields of "thing" */
export type Things_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Things_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** aggregate avg on columns */
export type Things_Avg_Fields = {
  __typename?: 'things_avg_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** Boolean expression to filter rows from the table "thing". All fields are combined with a logical 'AND'. */
export type Things_Bool_Exp = {
  _and?: InputMaybe<Array<Things_Bool_Exp>>
  _not?: InputMaybe<Things_Bool_Exp>
  _or?: InputMaybe<Array<Things_Bool_Exp>>
  atom?: InputMaybe<Atoms_Bool_Exp>
  description?: InputMaybe<String_Comparison_Exp>
  id?: InputMaybe<Numeric_Comparison_Exp>
  image?: InputMaybe<String_Comparison_Exp>
  name?: InputMaybe<String_Comparison_Exp>
  url?: InputMaybe<String_Comparison_Exp>
}

/** aggregate max on columns */
export type Things_Max_Fields = {
  __typename?: 'things_max_fields'
  description?: Maybe<Scalars['String']['output']>
  id?: Maybe<Scalars['numeric']['output']>
  image?: Maybe<Scalars['String']['output']>
  name?: Maybe<Scalars['String']['output']>
  url?: Maybe<Scalars['String']['output']>
}

/** aggregate min on columns */
export type Things_Min_Fields = {
  __typename?: 'things_min_fields'
  description?: Maybe<Scalars['String']['output']>
  id?: Maybe<Scalars['numeric']['output']>
  image?: Maybe<Scalars['String']['output']>
  name?: Maybe<Scalars['String']['output']>
  url?: Maybe<Scalars['String']['output']>
}

/** Ordering options when selecting data from "thing". */
export type Things_Order_By = {
  atom?: InputMaybe<Atoms_Order_By>
  description?: InputMaybe<Order_By>
  id?: InputMaybe<Order_By>
  image?: InputMaybe<Order_By>
  name?: InputMaybe<Order_By>
  url?: InputMaybe<Order_By>
}

/** select columns of table "thing" */
export enum Things_Select_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Id = 'id',
  /** column name */
  Image = 'image',
  /** column name */
  Name = 'name',
  /** column name */
  Url = 'url',
}

/** aggregate stddev on columns */
export type Things_Stddev_Fields = {
  __typename?: 'things_stddev_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_pop on columns */
export type Things_Stddev_Pop_Fields = {
  __typename?: 'things_stddev_pop_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate stddev_samp on columns */
export type Things_Stddev_Samp_Fields = {
  __typename?: 'things_stddev_samp_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** Streaming cursor of the table "things" */
export type Things_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Things_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Things_Stream_Cursor_Value_Input = {
  description?: InputMaybe<Scalars['String']['input']>
  id?: InputMaybe<Scalars['numeric']['input']>
  image?: InputMaybe<Scalars['String']['input']>
  name?: InputMaybe<Scalars['String']['input']>
  url?: InputMaybe<Scalars['String']['input']>
}

/** aggregate sum on columns */
export type Things_Sum_Fields = {
  __typename?: 'things_sum_fields'
  id?: Maybe<Scalars['numeric']['output']>
}

/** aggregate var_pop on columns */
export type Things_Var_Pop_Fields = {
  __typename?: 'things_var_pop_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate var_samp on columns */
export type Things_Var_Samp_Fields = {
  __typename?: 'things_var_samp_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** aggregate variance on columns */
export type Things_Variance_Fields = {
  __typename?: 'things_variance_fields'
  id?: Maybe<Scalars['Float']['output']>
}

/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
export type Timestamptz_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['timestamptz']['input']>
  _gt?: InputMaybe<Scalars['timestamptz']['input']>
  _gte?: InputMaybe<Scalars['timestamptz']['input']>
  _in?: InputMaybe<Array<Scalars['timestamptz']['input']>>
  _is_null?: InputMaybe<Scalars['Boolean']['input']>
  _lt?: InputMaybe<Scalars['timestamptz']['input']>
  _lte?: InputMaybe<Scalars['timestamptz']['input']>
  _neq?: InputMaybe<Scalars['timestamptz']['input']>
  _nin?: InputMaybe<Array<Scalars['timestamptz']['input']>>
}

/** columns and relationships of "triple" */
export type Triples = {
  __typename?: 'triples'
  block_number: Scalars['numeric']['output']
  block_timestamp: Scalars['bigint']['output']
  /** An array relationship */
  counter_positions: Array<Positions>
  /** An aggregate relationship */
  counter_positions_aggregate: Positions_Aggregate
  /** An object relationship */
  counter_term?: Maybe<Terms>
  counter_term_id: Scalars['numeric']['output']
  /** An object relationship */
  creator?: Maybe<Accounts>
  creator_id: Scalars['String']['output']
  /** An object relationship */
  object: Atoms
  object_id: Scalars['numeric']['output']
  /** An array relationship */
  positions: Array<Positions>
  /** An aggregate relationship */
  positions_aggregate: Positions_Aggregate
  /** An object relationship */
  predicate: Atoms
  predicate_id: Scalars['numeric']['output']
  /** An object relationship */
  subject: Atoms
  subject_id: Scalars['numeric']['output']
  /** An object relationship */
  term?: Maybe<Terms>
  term_id: Scalars['numeric']['output']
  transaction_hash: Scalars['String']['output']
}

/** columns and relationships of "triple" */
export type TriplesCounter_PositionsArgs = {
  distinct_on?: InputMaybe<Array<Positions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Positions_Order_By>>
  where?: InputMaybe<Positions_Bool_Exp>
}

/** columns and relationships of "triple" */
export type TriplesCounter_Positions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Positions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Positions_Order_By>>
  where?: InputMaybe<Positions_Bool_Exp>
}

/** columns and relationships of "triple" */
export type TriplesPositionsArgs = {
  distinct_on?: InputMaybe<Array<Positions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Positions_Order_By>>
  where?: InputMaybe<Positions_Bool_Exp>
}

/** columns and relationships of "triple" */
export type TriplesPositions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Positions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Positions_Order_By>>
  where?: InputMaybe<Positions_Bool_Exp>
}

/** aggregated selection of "triple" */
export type Triples_Aggregate = {
  __typename?: 'triples_aggregate'
  aggregate?: Maybe<Triples_Aggregate_Fields>
  nodes: Array<Triples>
}

export type Triples_Aggregate_Bool_Exp = {
  count?: InputMaybe<Triples_Aggregate_Bool_Exp_Count>
}

export type Triples_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Triples_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
  filter?: InputMaybe<Triples_Bool_Exp>
  predicate: Int_Comparison_Exp
}

/** aggregate fields of "triple" */
export type Triples_Aggregate_Fields = {
  __typename?: 'triples_aggregate_fields'
  avg?: Maybe<Triples_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Triples_Max_Fields>
  min?: Maybe<Triples_Min_Fields>
  stddev?: Maybe<Triples_Stddev_Fields>
  stddev_pop?: Maybe<Triples_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Triples_Stddev_Samp_Fields>
  sum?: Maybe<Triples_Sum_Fields>
  var_pop?: Maybe<Triples_Var_Pop_Fields>
  var_samp?: Maybe<Triples_Var_Samp_Fields>
  variance?: Maybe<Triples_Variance_Fields>
}

/** aggregate fields of "triple" */
export type Triples_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Triples_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** order by aggregate values of table "triple" */
export type Triples_Aggregate_Order_By = {
  avg?: InputMaybe<Triples_Avg_Order_By>
  count?: InputMaybe<Order_By>
  max?: InputMaybe<Triples_Max_Order_By>
  min?: InputMaybe<Triples_Min_Order_By>
  stddev?: InputMaybe<Triples_Stddev_Order_By>
  stddev_pop?: InputMaybe<Triples_Stddev_Pop_Order_By>
  stddev_samp?: InputMaybe<Triples_Stddev_Samp_Order_By>
  sum?: InputMaybe<Triples_Sum_Order_By>
  var_pop?: InputMaybe<Triples_Var_Pop_Order_By>
  var_samp?: InputMaybe<Triples_Var_Samp_Order_By>
  variance?: InputMaybe<Triples_Variance_Order_By>
}

/** aggregate avg on columns */
export type Triples_Avg_Fields = {
  __typename?: 'triples_avg_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  counter_term_id?: Maybe<Scalars['Float']['output']>
  object_id?: Maybe<Scalars['Float']['output']>
  predicate_id?: Maybe<Scalars['Float']['output']>
  subject_id?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by avg() on columns of table "triple" */
export type Triples_Avg_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  counter_term_id?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  subject_id?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** Boolean expression to filter rows from the table "triple". All fields are combined with a logical 'AND'. */
export type Triples_Bool_Exp = {
  _and?: InputMaybe<Array<Triples_Bool_Exp>>
  _not?: InputMaybe<Triples_Bool_Exp>
  _or?: InputMaybe<Array<Triples_Bool_Exp>>
  block_number?: InputMaybe<Numeric_Comparison_Exp>
  block_timestamp?: InputMaybe<Bigint_Comparison_Exp>
  counter_positions?: InputMaybe<Positions_Bool_Exp>
  counter_positions_aggregate?: InputMaybe<Positions_Aggregate_Bool_Exp>
  counter_term?: InputMaybe<Terms_Bool_Exp>
  counter_term_id?: InputMaybe<Numeric_Comparison_Exp>
  creator?: InputMaybe<Accounts_Bool_Exp>
  creator_id?: InputMaybe<String_Comparison_Exp>
  object?: InputMaybe<Atoms_Bool_Exp>
  object_id?: InputMaybe<Numeric_Comparison_Exp>
  positions?: InputMaybe<Positions_Bool_Exp>
  positions_aggregate?: InputMaybe<Positions_Aggregate_Bool_Exp>
  predicate?: InputMaybe<Atoms_Bool_Exp>
  predicate_id?: InputMaybe<Numeric_Comparison_Exp>
  subject?: InputMaybe<Atoms_Bool_Exp>
  subject_id?: InputMaybe<Numeric_Comparison_Exp>
  term?: InputMaybe<Terms_Bool_Exp>
  term_id?: InputMaybe<Numeric_Comparison_Exp>
  transaction_hash?: InputMaybe<String_Comparison_Exp>
}

/** aggregate max on columns */
export type Triples_Max_Fields = {
  __typename?: 'triples_max_fields'
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  counter_term_id?: Maybe<Scalars['numeric']['output']>
  creator_id?: Maybe<Scalars['String']['output']>
  object_id?: Maybe<Scalars['numeric']['output']>
  predicate_id?: Maybe<Scalars['numeric']['output']>
  subject_id?: Maybe<Scalars['numeric']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
  transaction_hash?: Maybe<Scalars['String']['output']>
}

/** order by max() on columns of table "triple" */
export type Triples_Max_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  counter_term_id?: InputMaybe<Order_By>
  creator_id?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  subject_id?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
}

/** aggregate min on columns */
export type Triples_Min_Fields = {
  __typename?: 'triples_min_fields'
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  counter_term_id?: Maybe<Scalars['numeric']['output']>
  creator_id?: Maybe<Scalars['String']['output']>
  object_id?: Maybe<Scalars['numeric']['output']>
  predicate_id?: Maybe<Scalars['numeric']['output']>
  subject_id?: Maybe<Scalars['numeric']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
  transaction_hash?: Maybe<Scalars['String']['output']>
}

/** order by min() on columns of table "triple" */
export type Triples_Min_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  counter_term_id?: InputMaybe<Order_By>
  creator_id?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  subject_id?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
}

/** Ordering options when selecting data from "triple". */
export type Triples_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  counter_positions_aggregate?: InputMaybe<Positions_Aggregate_Order_By>
  counter_term?: InputMaybe<Terms_Order_By>
  counter_term_id?: InputMaybe<Order_By>
  creator?: InputMaybe<Accounts_Order_By>
  creator_id?: InputMaybe<Order_By>
  object?: InputMaybe<Atoms_Order_By>
  object_id?: InputMaybe<Order_By>
  positions_aggregate?: InputMaybe<Positions_Aggregate_Order_By>
  predicate?: InputMaybe<Atoms_Order_By>
  predicate_id?: InputMaybe<Order_By>
  subject?: InputMaybe<Atoms_Order_By>
  subject_id?: InputMaybe<Order_By>
  term?: InputMaybe<Terms_Order_By>
  term_id?: InputMaybe<Order_By>
  transaction_hash?: InputMaybe<Order_By>
}

/** select columns of table "triple" */
export enum Triples_Select_Column {
  /** column name */
  BlockNumber = 'block_number',
  /** column name */
  BlockTimestamp = 'block_timestamp',
  /** column name */
  CounterTermId = 'counter_term_id',
  /** column name */
  CreatorId = 'creator_id',
  /** column name */
  ObjectId = 'object_id',
  /** column name */
  PredicateId = 'predicate_id',
  /** column name */
  SubjectId = 'subject_id',
  /** column name */
  TermId = 'term_id',
  /** column name */
  TransactionHash = 'transaction_hash',
}

/** aggregate stddev on columns */
export type Triples_Stddev_Fields = {
  __typename?: 'triples_stddev_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  counter_term_id?: Maybe<Scalars['Float']['output']>
  object_id?: Maybe<Scalars['Float']['output']>
  predicate_id?: Maybe<Scalars['Float']['output']>
  subject_id?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev() on columns of table "triple" */
export type Triples_Stddev_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  counter_term_id?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  subject_id?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate stddev_pop on columns */
export type Triples_Stddev_Pop_Fields = {
  __typename?: 'triples_stddev_pop_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  counter_term_id?: Maybe<Scalars['Float']['output']>
  object_id?: Maybe<Scalars['Float']['output']>
  predicate_id?: Maybe<Scalars['Float']['output']>
  subject_id?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_pop() on columns of table "triple" */
export type Triples_Stddev_Pop_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  counter_term_id?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  subject_id?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate stddev_samp on columns */
export type Triples_Stddev_Samp_Fields = {
  __typename?: 'triples_stddev_samp_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  counter_term_id?: Maybe<Scalars['Float']['output']>
  object_id?: Maybe<Scalars['Float']['output']>
  predicate_id?: Maybe<Scalars['Float']['output']>
  subject_id?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_samp() on columns of table "triple" */
export type Triples_Stddev_Samp_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  counter_term_id?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  subject_id?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** Streaming cursor of the table "triples" */
export type Triples_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Triples_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Triples_Stream_Cursor_Value_Input = {
  block_number?: InputMaybe<Scalars['numeric']['input']>
  block_timestamp?: InputMaybe<Scalars['bigint']['input']>
  counter_term_id?: InputMaybe<Scalars['numeric']['input']>
  creator_id?: InputMaybe<Scalars['String']['input']>
  object_id?: InputMaybe<Scalars['numeric']['input']>
  predicate_id?: InputMaybe<Scalars['numeric']['input']>
  subject_id?: InputMaybe<Scalars['numeric']['input']>
  term_id?: InputMaybe<Scalars['numeric']['input']>
  transaction_hash?: InputMaybe<Scalars['String']['input']>
}

/** aggregate sum on columns */
export type Triples_Sum_Fields = {
  __typename?: 'triples_sum_fields'
  block_number?: Maybe<Scalars['numeric']['output']>
  block_timestamp?: Maybe<Scalars['bigint']['output']>
  counter_term_id?: Maybe<Scalars['numeric']['output']>
  object_id?: Maybe<Scalars['numeric']['output']>
  predicate_id?: Maybe<Scalars['numeric']['output']>
  subject_id?: Maybe<Scalars['numeric']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
}

/** order by sum() on columns of table "triple" */
export type Triples_Sum_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  counter_term_id?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  subject_id?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate var_pop on columns */
export type Triples_Var_Pop_Fields = {
  __typename?: 'triples_var_pop_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  counter_term_id?: Maybe<Scalars['Float']['output']>
  object_id?: Maybe<Scalars['Float']['output']>
  predicate_id?: Maybe<Scalars['Float']['output']>
  subject_id?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by var_pop() on columns of table "triple" */
export type Triples_Var_Pop_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  counter_term_id?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  subject_id?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate var_samp on columns */
export type Triples_Var_Samp_Fields = {
  __typename?: 'triples_var_samp_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  counter_term_id?: Maybe<Scalars['Float']['output']>
  object_id?: Maybe<Scalars['Float']['output']>
  predicate_id?: Maybe<Scalars['Float']['output']>
  subject_id?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by var_samp() on columns of table "triple" */
export type Triples_Var_Samp_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  counter_term_id?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  subject_id?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** aggregate variance on columns */
export type Triples_Variance_Fields = {
  __typename?: 'triples_variance_fields'
  block_number?: Maybe<Scalars['Float']['output']>
  block_timestamp?: Maybe<Scalars['Float']['output']>
  counter_term_id?: Maybe<Scalars['Float']['output']>
  object_id?: Maybe<Scalars['Float']['output']>
  predicate_id?: Maybe<Scalars['Float']['output']>
  subject_id?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
}

/** order by variance() on columns of table "triple" */
export type Triples_Variance_Order_By = {
  block_number?: InputMaybe<Order_By>
  block_timestamp?: InputMaybe<Order_By>
  counter_term_id?: InputMaybe<Order_By>
  object_id?: InputMaybe<Order_By>
  predicate_id?: InputMaybe<Order_By>
  subject_id?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
}

/** columns and relationships of "vault" */
export type Vaults = {
  __typename?: 'vaults'
  current_share_price: Scalars['numeric']['output']
  curve_id: Scalars['numeric']['output']
  /** An array relationship */
  deposits: Array<Deposits>
  /** An aggregate relationship */
  deposits_aggregate: Deposits_Aggregate
  market_cap?: Maybe<Scalars['numeric']['output']>
  position_count: Scalars['Int']['output']
  /** An array relationship */
  positions: Array<Positions>
  /** An aggregate relationship */
  positions_aggregate: Positions_Aggregate
  /** An array relationship */
  redemptions: Array<Redemptions>
  /** An aggregate relationship */
  redemptions_aggregate: Redemptions_Aggregate
  /** An array relationship */
  share_price_changes: Array<Share_Price_Changes>
  /** An aggregate relationship */
  share_price_changes_aggregate: Share_Price_Changes_Aggregate
  /** An array relationship */
  signals: Array<Signals>
  /** An aggregate relationship */
  signals_aggregate: Signals_Aggregate
  /** An object relationship */
  term: Terms
  term_id: Scalars['numeric']['output']
  total_assets?: Maybe<Scalars['numeric']['output']>
  total_shares: Scalars['numeric']['output']
}

/** columns and relationships of "vault" */
export type VaultsDepositsArgs = {
  distinct_on?: InputMaybe<Array<Deposits_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Deposits_Order_By>>
  where?: InputMaybe<Deposits_Bool_Exp>
}

/** columns and relationships of "vault" */
export type VaultsDeposits_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Deposits_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Deposits_Order_By>>
  where?: InputMaybe<Deposits_Bool_Exp>
}

/** columns and relationships of "vault" */
export type VaultsPositionsArgs = {
  distinct_on?: InputMaybe<Array<Positions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Positions_Order_By>>
  where?: InputMaybe<Positions_Bool_Exp>
}

/** columns and relationships of "vault" */
export type VaultsPositions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Positions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Positions_Order_By>>
  where?: InputMaybe<Positions_Bool_Exp>
}

/** columns and relationships of "vault" */
export type VaultsRedemptionsArgs = {
  distinct_on?: InputMaybe<Array<Redemptions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Redemptions_Order_By>>
  where?: InputMaybe<Redemptions_Bool_Exp>
}

/** columns and relationships of "vault" */
export type VaultsRedemptions_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Redemptions_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Redemptions_Order_By>>
  where?: InputMaybe<Redemptions_Bool_Exp>
}

/** columns and relationships of "vault" */
export type VaultsShare_Price_ChangesArgs = {
  distinct_on?: InputMaybe<Array<Share_Price_Changes_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Share_Price_Changes_Order_By>>
  where?: InputMaybe<Share_Price_Changes_Bool_Exp>
}

/** columns and relationships of "vault" */
export type VaultsShare_Price_Changes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Share_Price_Changes_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Share_Price_Changes_Order_By>>
  where?: InputMaybe<Share_Price_Changes_Bool_Exp>
}

/** columns and relationships of "vault" */
export type VaultsSignalsArgs = {
  distinct_on?: InputMaybe<Array<Signals_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Signals_Order_By>>
  where?: InputMaybe<Signals_Bool_Exp>
}

/** columns and relationships of "vault" */
export type VaultsSignals_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Signals_Select_Column>>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  order_by?: InputMaybe<Array<Signals_Order_By>>
  where?: InputMaybe<Signals_Bool_Exp>
}

/** aggregated selection of "vault" */
export type Vaults_Aggregate = {
  __typename?: 'vaults_aggregate'
  aggregate?: Maybe<Vaults_Aggregate_Fields>
  nodes: Array<Vaults>
}

export type Vaults_Aggregate_Bool_Exp = {
  count?: InputMaybe<Vaults_Aggregate_Bool_Exp_Count>
}

export type Vaults_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Vaults_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
  filter?: InputMaybe<Vaults_Bool_Exp>
  predicate: Int_Comparison_Exp
}

/** aggregate fields of "vault" */
export type Vaults_Aggregate_Fields = {
  __typename?: 'vaults_aggregate_fields'
  avg?: Maybe<Vaults_Avg_Fields>
  count: Scalars['Int']['output']
  max?: Maybe<Vaults_Max_Fields>
  min?: Maybe<Vaults_Min_Fields>
  stddev?: Maybe<Vaults_Stddev_Fields>
  stddev_pop?: Maybe<Vaults_Stddev_Pop_Fields>
  stddev_samp?: Maybe<Vaults_Stddev_Samp_Fields>
  sum?: Maybe<Vaults_Sum_Fields>
  var_pop?: Maybe<Vaults_Var_Pop_Fields>
  var_samp?: Maybe<Vaults_Var_Samp_Fields>
  variance?: Maybe<Vaults_Variance_Fields>
}

/** aggregate fields of "vault" */
export type Vaults_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Vaults_Select_Column>>
  distinct?: InputMaybe<Scalars['Boolean']['input']>
}

/** order by aggregate values of table "vault" */
export type Vaults_Aggregate_Order_By = {
  avg?: InputMaybe<Vaults_Avg_Order_By>
  count?: InputMaybe<Order_By>
  max?: InputMaybe<Vaults_Max_Order_By>
  min?: InputMaybe<Vaults_Min_Order_By>
  stddev?: InputMaybe<Vaults_Stddev_Order_By>
  stddev_pop?: InputMaybe<Vaults_Stddev_Pop_Order_By>
  stddev_samp?: InputMaybe<Vaults_Stddev_Samp_Order_By>
  sum?: InputMaybe<Vaults_Sum_Order_By>
  var_pop?: InputMaybe<Vaults_Var_Pop_Order_By>
  var_samp?: InputMaybe<Vaults_Var_Samp_Order_By>
  variance?: InputMaybe<Vaults_Variance_Order_By>
}

/** aggregate avg on columns */
export type Vaults_Avg_Fields = {
  __typename?: 'vaults_avg_fields'
  current_share_price?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  market_cap?: Maybe<Scalars['Float']['output']>
  position_count?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_shares?: Maybe<Scalars['Float']['output']>
}

/** order by avg() on columns of table "vault" */
export type Vaults_Avg_Order_By = {
  current_share_price?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  market_cap?: InputMaybe<Order_By>
  position_count?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** Boolean expression to filter rows from the table "vault". All fields are combined with a logical 'AND'. */
export type Vaults_Bool_Exp = {
  _and?: InputMaybe<Array<Vaults_Bool_Exp>>
  _not?: InputMaybe<Vaults_Bool_Exp>
  _or?: InputMaybe<Array<Vaults_Bool_Exp>>
  current_share_price?: InputMaybe<Numeric_Comparison_Exp>
  curve_id?: InputMaybe<Numeric_Comparison_Exp>
  deposits?: InputMaybe<Deposits_Bool_Exp>
  deposits_aggregate?: InputMaybe<Deposits_Aggregate_Bool_Exp>
  market_cap?: InputMaybe<Numeric_Comparison_Exp>
  position_count?: InputMaybe<Int_Comparison_Exp>
  positions?: InputMaybe<Positions_Bool_Exp>
  positions_aggregate?: InputMaybe<Positions_Aggregate_Bool_Exp>
  redemptions?: InputMaybe<Redemptions_Bool_Exp>
  redemptions_aggregate?: InputMaybe<Redemptions_Aggregate_Bool_Exp>
  share_price_changes?: InputMaybe<Share_Price_Changes_Bool_Exp>
  share_price_changes_aggregate?: InputMaybe<Share_Price_Changes_Aggregate_Bool_Exp>
  signals?: InputMaybe<Signals_Bool_Exp>
  signals_aggregate?: InputMaybe<Signals_Aggregate_Bool_Exp>
  term?: InputMaybe<Terms_Bool_Exp>
  term_id?: InputMaybe<Numeric_Comparison_Exp>
  total_assets?: InputMaybe<Numeric_Comparison_Exp>
  total_shares?: InputMaybe<Numeric_Comparison_Exp>
}

/** aggregate max on columns */
export type Vaults_Max_Fields = {
  __typename?: 'vaults_max_fields'
  current_share_price?: Maybe<Scalars['numeric']['output']>
  curve_id?: Maybe<Scalars['numeric']['output']>
  market_cap?: Maybe<Scalars['numeric']['output']>
  position_count?: Maybe<Scalars['Int']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
  total_assets?: Maybe<Scalars['numeric']['output']>
  total_shares?: Maybe<Scalars['numeric']['output']>
}

/** order by max() on columns of table "vault" */
export type Vaults_Max_Order_By = {
  current_share_price?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  market_cap?: InputMaybe<Order_By>
  position_count?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** aggregate min on columns */
export type Vaults_Min_Fields = {
  __typename?: 'vaults_min_fields'
  current_share_price?: Maybe<Scalars['numeric']['output']>
  curve_id?: Maybe<Scalars['numeric']['output']>
  market_cap?: Maybe<Scalars['numeric']['output']>
  position_count?: Maybe<Scalars['Int']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
  total_assets?: Maybe<Scalars['numeric']['output']>
  total_shares?: Maybe<Scalars['numeric']['output']>
}

/** order by min() on columns of table "vault" */
export type Vaults_Min_Order_By = {
  current_share_price?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  market_cap?: InputMaybe<Order_By>
  position_count?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** Ordering options when selecting data from "vault". */
export type Vaults_Order_By = {
  current_share_price?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  deposits_aggregate?: InputMaybe<Deposits_Aggregate_Order_By>
  market_cap?: InputMaybe<Order_By>
  position_count?: InputMaybe<Order_By>
  positions_aggregate?: InputMaybe<Positions_Aggregate_Order_By>
  redemptions_aggregate?: InputMaybe<Redemptions_Aggregate_Order_By>
  share_price_changes_aggregate?: InputMaybe<Share_Price_Changes_Aggregate_Order_By>
  signals_aggregate?: InputMaybe<Signals_Aggregate_Order_By>
  term?: InputMaybe<Terms_Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** select columns of table "vault" */
export enum Vaults_Select_Column {
  /** column name */
  CurrentSharePrice = 'current_share_price',
  /** column name */
  CurveId = 'curve_id',
  /** column name */
  MarketCap = 'market_cap',
  /** column name */
  PositionCount = 'position_count',
  /** column name */
  TermId = 'term_id',
  /** column name */
  TotalAssets = 'total_assets',
  /** column name */
  TotalShares = 'total_shares',
}

/** aggregate stddev on columns */
export type Vaults_Stddev_Fields = {
  __typename?: 'vaults_stddev_fields'
  current_share_price?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  market_cap?: Maybe<Scalars['Float']['output']>
  position_count?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_shares?: Maybe<Scalars['Float']['output']>
}

/** order by stddev() on columns of table "vault" */
export type Vaults_Stddev_Order_By = {
  current_share_price?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  market_cap?: InputMaybe<Order_By>
  position_count?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** aggregate stddev_pop on columns */
export type Vaults_Stddev_Pop_Fields = {
  __typename?: 'vaults_stddev_pop_fields'
  current_share_price?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  market_cap?: Maybe<Scalars['Float']['output']>
  position_count?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_shares?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_pop() on columns of table "vault" */
export type Vaults_Stddev_Pop_Order_By = {
  current_share_price?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  market_cap?: InputMaybe<Order_By>
  position_count?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** aggregate stddev_samp on columns */
export type Vaults_Stddev_Samp_Fields = {
  __typename?: 'vaults_stddev_samp_fields'
  current_share_price?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  market_cap?: Maybe<Scalars['Float']['output']>
  position_count?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_shares?: Maybe<Scalars['Float']['output']>
}

/** order by stddev_samp() on columns of table "vault" */
export type Vaults_Stddev_Samp_Order_By = {
  current_share_price?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  market_cap?: InputMaybe<Order_By>
  position_count?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** Streaming cursor of the table "vaults" */
export type Vaults_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Vaults_Stream_Cursor_Value_Input
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>
}

/** Initial value of the column from where the streaming should start */
export type Vaults_Stream_Cursor_Value_Input = {
  current_share_price?: InputMaybe<Scalars['numeric']['input']>
  curve_id?: InputMaybe<Scalars['numeric']['input']>
  market_cap?: InputMaybe<Scalars['numeric']['input']>
  position_count?: InputMaybe<Scalars['Int']['input']>
  term_id?: InputMaybe<Scalars['numeric']['input']>
  total_assets?: InputMaybe<Scalars['numeric']['input']>
  total_shares?: InputMaybe<Scalars['numeric']['input']>
}

/** aggregate sum on columns */
export type Vaults_Sum_Fields = {
  __typename?: 'vaults_sum_fields'
  current_share_price?: Maybe<Scalars['numeric']['output']>
  curve_id?: Maybe<Scalars['numeric']['output']>
  market_cap?: Maybe<Scalars['numeric']['output']>
  position_count?: Maybe<Scalars['Int']['output']>
  term_id?: Maybe<Scalars['numeric']['output']>
  total_assets?: Maybe<Scalars['numeric']['output']>
  total_shares?: Maybe<Scalars['numeric']['output']>
}

/** order by sum() on columns of table "vault" */
export type Vaults_Sum_Order_By = {
  current_share_price?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  market_cap?: InputMaybe<Order_By>
  position_count?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** aggregate var_pop on columns */
export type Vaults_Var_Pop_Fields = {
  __typename?: 'vaults_var_pop_fields'
  current_share_price?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  market_cap?: Maybe<Scalars['Float']['output']>
  position_count?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_shares?: Maybe<Scalars['Float']['output']>
}

/** order by var_pop() on columns of table "vault" */
export type Vaults_Var_Pop_Order_By = {
  current_share_price?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  market_cap?: InputMaybe<Order_By>
  position_count?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** aggregate var_samp on columns */
export type Vaults_Var_Samp_Fields = {
  __typename?: 'vaults_var_samp_fields'
  current_share_price?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  market_cap?: Maybe<Scalars['Float']['output']>
  position_count?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_shares?: Maybe<Scalars['Float']['output']>
}

/** order by var_samp() on columns of table "vault" */
export type Vaults_Var_Samp_Order_By = {
  current_share_price?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  market_cap?: InputMaybe<Order_By>
  position_count?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

/** aggregate variance on columns */
export type Vaults_Variance_Fields = {
  __typename?: 'vaults_variance_fields'
  current_share_price?: Maybe<Scalars['Float']['output']>
  curve_id?: Maybe<Scalars['Float']['output']>
  market_cap?: Maybe<Scalars['Float']['output']>
  position_count?: Maybe<Scalars['Float']['output']>
  term_id?: Maybe<Scalars['Float']['output']>
  total_assets?: Maybe<Scalars['Float']['output']>
  total_shares?: Maybe<Scalars['Float']['output']>
}

/** order by variance() on columns of table "vault" */
export type Vaults_Variance_Order_By = {
  current_share_price?: InputMaybe<Order_By>
  curve_id?: InputMaybe<Order_By>
  market_cap?: InputMaybe<Order_By>
  position_count?: InputMaybe<Order_By>
  term_id?: InputMaybe<Order_By>
  total_assets?: InputMaybe<Order_By>
  total_shares?: InputMaybe<Order_By>
}

export type AccountMetadataFragment = {
  __typename?: 'accounts'
  label: string
  image?: string | null
  id: string
  atom_id?: any | null
  type: any
}

export type AccountClaimsAggregateFragment = {
  __typename?: 'accounts'
  claims_aggregate: {
    __typename?: 'claims_aggregate'
    aggregate?: { __typename?: 'claims_aggregate_fields'; count: number } | null
    nodes: Array<{
      __typename?: 'claims'
      id: string
      position: { __typename?: 'positions'; shares: any }
    }>
  }
}

export type AccountClaimsFragment = {
  __typename?: 'accounts'
  claims: Array<{
    __typename?: 'claims'
    id: string
    position: { __typename?: 'positions'; shares: any }
  }>
}

export type AccountPositionsAggregateFragment = {
  __typename?: 'accounts'
  positions_aggregate: {
    __typename?: 'positions_aggregate'
    aggregate?: {
      __typename?: 'positions_aggregate_fields'
      count: number
    } | null
    nodes: Array<{
      __typename?: 'positions'
      id: string
      shares: any
      vault?: {
        __typename?: 'vaults'
        term_id: any
        total_shares: any
        current_share_price: any
        term: {
          __typename?: 'terms'
          atom?: {
            __typename?: 'atoms'
            term_id: any
            label?: string | null
          } | null
          triple?: { __typename?: 'triples'; term_id: any } | null
        }
      } | null
    }>
  }
}

export type AccountPositionsFragment = {
  __typename?: 'accounts'
  positions: Array<{
    __typename?: 'positions'
    id: string
    shares: any
    vault?: {
      __typename?: 'vaults'
      term_id: any
      total_shares: any
      current_share_price: any
      term: {
        __typename?: 'terms'
        atom?: {
          __typename?: 'atoms'
          term_id: any
          label?: string | null
        } | null
        triple?: { __typename?: 'triples'; term_id: any } | null
      }
    } | null
  }>
}

export type AccountAtomsFragment = {
  __typename?: 'accounts'
  atoms: Array<{
    __typename?: 'atoms'
    term_id: any
    label?: string | null
    data?: string | null
    term: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        total_shares: any
        positions_aggregate: {
          __typename?: 'positions_aggregate'
          nodes: Array<{
            __typename?: 'positions'
            shares: any
            account?: { __typename?: 'accounts'; id: string } | null
          }>
        }
      }>
    }
  }>
}

export type AccountAtomsAggregateFragment = {
  __typename?: 'accounts'
  atoms_aggregate: {
    __typename?: 'atoms_aggregate'
    aggregate?: {
      __typename?: 'atoms_aggregate_fields'
      count: number
      sum?: { __typename?: 'atoms_sum_fields'; term_id?: any | null } | null
    } | null
    nodes: Array<{
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      data?: string | null
      term: {
        __typename?: 'terms'
        vaults: Array<{
          __typename?: 'vaults'
          total_shares: any
          positions_aggregate: {
            __typename?: 'positions_aggregate'
            nodes: Array<{
              __typename?: 'positions'
              shares: any
              account?: { __typename?: 'accounts'; id: string } | null
            }>
          }
        }>
      }
    }>
  }
}

export type AccountTriplesFragment = {
  __typename?: 'accounts'
  triples_aggregate: {
    __typename?: 'triples_aggregate'
    aggregate?: {
      __typename?: 'triples_aggregate_fields'
      count: number
    } | null
    nodes: Array<{
      __typename?: 'triples'
      term_id: any
      subject: { __typename?: 'atoms'; term_id: any; label?: string | null }
      predicate: { __typename?: 'atoms'; term_id: any; label?: string | null }
      object: { __typename?: 'atoms'; term_id: any; label?: string | null }
    }>
  }
}

export type AccountTriplesAggregateFragment = {
  __typename?: 'accounts'
  triples_aggregate: {
    __typename?: 'triples_aggregate'
    aggregate?: {
      __typename?: 'triples_aggregate_fields'
      count: number
    } | null
    nodes: Array<{
      __typename?: 'triples'
      term_id: any
      subject: { __typename?: 'atoms'; term_id: any; label?: string | null }
      predicate: { __typename?: 'atoms'; term_id: any; label?: string | null }
      object: { __typename?: 'atoms'; term_id: any; label?: string | null }
    }>
  }
}

export type AtomValueFragment = {
  __typename?: 'atoms'
  value?: {
    __typename?: 'atom_values'
    person?: {
      __typename?: 'persons'
      name?: string | null
      image?: string | null
      description?: string | null
      url?: string | null
    } | null
    thing?: {
      __typename?: 'things'
      name?: string | null
      image?: string | null
      description?: string | null
      url?: string | null
    } | null
    organization?: {
      __typename?: 'organizations'
      name?: string | null
      image?: string | null
      description?: string | null
      url?: string | null
    } | null
  } | null
}

export type AtomMetadataFragment = {
  __typename?: 'atoms'
  term_id: any
  data?: string | null
  image?: string | null
  label?: string | null
  emoji?: string | null
  type: any
  wallet_id: string
  creator: {
    __typename?: 'accounts'
    id: string
    label: string
    image?: string | null
  }
  value?: {
    __typename?: 'atom_values'
    person?: {
      __typename?: 'persons'
      name?: string | null
      image?: string | null
      description?: string | null
      url?: string | null
    } | null
    thing?: {
      __typename?: 'things'
      name?: string | null
      image?: string | null
      description?: string | null
      url?: string | null
    } | null
    organization?: {
      __typename?: 'organizations'
      name?: string | null
      image?: string | null
      description?: string | null
      url?: string | null
    } | null
  } | null
}

export type AtomTxnFragment = {
  __typename?: 'atoms'
  block_number: any
  block_timestamp: any
  transaction_hash: string
  creator_id: string
}

export type AtomVaultDetailsFragment = {
  __typename?: 'atoms'
  term_id: any
  wallet_id: string
  term: {
    __typename?: 'terms'
    vaults: Array<{
      __typename?: 'vaults'
      position_count: number
      total_shares: any
      current_share_price: any
      positions_aggregate: {
        __typename?: 'positions_aggregate'
        aggregate?: {
          __typename?: 'positions_aggregate_fields'
          count: number
          sum?: {
            __typename?: 'positions_sum_fields'
            shares?: any | null
          } | null
        } | null
      }
      positions: Array<{
        __typename?: 'positions'
        id: string
        shares: any
        account?: { __typename?: 'accounts'; label: string; id: string } | null
      }>
    }>
    positions_aggregate: {
      __typename?: 'positions_aggregate'
      aggregate?: {
        __typename?: 'positions_aggregate_fields'
        count: number
      } | null
    }
  }
}

export type AtomTripleFragment = {
  __typename?: 'atoms'
  as_subject_triples: Array<{
    __typename?: 'triples'
    term_id: any
    object: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
    }
    predicate: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
    }
  }>
  as_predicate_triples: Array<{
    __typename?: 'triples'
    term_id: any
    subject: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
    }
    object: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
    }
  }>
  as_object_triples: Array<{
    __typename?: 'triples'
    term_id: any
    subject: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
    }
    predicate: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
    }
  }>
}

export type AtomVaultDetailsWithPositionsFragment = {
  __typename?: 'atoms'
  term: {
    __typename?: 'terms'
    vaults: Array<{
      __typename?: 'vaults'
      total_shares: any
      current_share_price: any
      positions_aggregate: {
        __typename?: 'positions_aggregate'
        aggregate?: {
          __typename?: 'positions_aggregate_fields'
          sum?: {
            __typename?: 'positions_sum_fields'
            shares?: any | null
          } | null
        } | null
        nodes: Array<{
          __typename?: 'positions'
          shares: any
          account?: { __typename?: 'accounts'; id: string } | null
        }>
      }
    }>
  }
}

export type DepositEventFragmentFragment = {
  __typename?: 'events'
  deposit?: {
    __typename?: 'deposits'
    term_id: any
    curve_id: any
    sender_assets_after_total_fees: any
    shares_for_receiver: any
    receiver: { __typename?: 'accounts'; id: string }
    sender?: { __typename?: 'accounts'; id: string } | null
  } | null
}

export type EventDetailsFragment = {
  __typename?: 'events'
  block_number: any
  block_timestamp: any
  type: any
  transaction_hash: string
  atom_id?: any | null
  triple_id?: any | null
  deposit_id?: string | null
  redemption_id?: string | null
  atom?: {
    __typename?: 'atoms'
    term_id: any
    data?: string | null
    image?: string | null
    label?: string | null
    emoji?: string | null
    type: any
    wallet_id: string
    term: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        total_shares: any
        position_count: number
        positions: Array<{
          __typename?: 'positions'
          account_id: string
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
            image?: string | null
          } | null
        }>
      }>
    }
    creator: {
      __typename?: 'accounts'
      id: string
      label: string
      image?: string | null
    }
    value?: {
      __typename?: 'atom_values'
      person?: {
        __typename?: 'persons'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      thing?: {
        __typename?: 'things'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      organization?: {
        __typename?: 'organizations'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
    } | null
  } | null
  triple?: {
    __typename?: 'triples'
    term_id: any
    subject_id: any
    predicate_id: any
    object_id: any
    term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        total_shares: any
        position_count: number
        current_share_price: any
        positions: Array<{
          __typename?: 'positions'
          account_id: string
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
            image?: string | null
          } | null
          vault?: {
            __typename?: 'vaults'
            term_id: any
            total_shares: any
            current_share_price: any
          } | null
        }>
        allPositions: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
      }>
    } | null
    counter_term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        total_shares: any
        position_count: number
        current_share_price: any
        positions: Array<{
          __typename?: 'positions'
          account_id: string
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
            image?: string | null
          } | null
          vault?: {
            __typename?: 'vaults'
            term_id: any
            total_shares: any
            current_share_price: any
          } | null
        }>
        allPositions: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
      }>
    } | null
    subject: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    predicate: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    object: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
  } | null
  deposit?: {
    __typename?: 'deposits'
    term_id: any
    curve_id: any
    sender_assets_after_total_fees: any
    shares_for_receiver: any
    receiver: { __typename?: 'accounts'; id: string }
    sender?: { __typename?: 'accounts'; id: string } | null
  } | null
  redemption?: {
    __typename?: 'redemptions'
    term_id: any
    curve_id: any
    receiver_id: string
    shares_redeemed_by_sender: any
    assets_for_receiver: any
  } | null
}

export type EventDetailsSubscriptionFragment = {
  __typename?: 'events'
  block_number: any
  block_timestamp: any
  type: any
  transaction_hash: string
  atom_id?: any | null
  triple_id?: any | null
  deposit_id?: string | null
  redemption_id?: string | null
  atom?: {
    __typename?: 'atoms'
    term_id: any
    data?: string | null
    image?: string | null
    label?: string | null
    emoji?: string | null
    type: any
    wallet_id: string
    term: {
      __typename?: 'terms'
      id: any
      total_market_cap?: any | null
      vaults: Array<{ __typename?: 'vaults'; position_count: number }>
      positions: Array<{
        __typename?: 'positions'
        account_id: string
        shares: any
        account?: {
          __typename?: 'accounts'
          id: string
          label: string
          image?: string | null
        } | null
      }>
    }
    creator: {
      __typename?: 'accounts'
      id: string
      label: string
      image?: string | null
    }
    value?: {
      __typename?: 'atom_values'
      person?: {
        __typename?: 'persons'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      thing?: {
        __typename?: 'things'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      organization?: {
        __typename?: 'organizations'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
    } | null
  } | null
  triple?: {
    __typename?: 'triples'
    term_id: any
    counter_term_id: any
    creator_id: string
    subject_id: any
    predicate_id: any
    object_id: any
    positions_aggregate: {
      __typename?: 'positions_aggregate'
      aggregate?: {
        __typename?: 'positions_aggregate_fields'
        count: number
      } | null
    }
    creator?: {
      __typename?: 'accounts'
      image?: string | null
      label: string
      id: string
    } | null
    subject: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
    }
    predicate: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
    }
    object: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
    }
    term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        term_id: any
        curve_id: any
        current_share_price: any
        total_shares: any
        term: {
          __typename?: 'terms'
          atom?: {
            __typename?: 'atoms'
            term_id: any
            label?: string | null
          } | null
          triple?: {
            __typename?: 'triples'
            term_id: any
            subject: {
              __typename?: 'atoms'
              term_id: any
              label?: string | null
            }
            predicate: {
              __typename?: 'atoms'
              term_id: any
              label?: string | null
            }
            object: {
              __typename?: 'atoms'
              term_id: any
              label?: string | null
            }
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
          } | null
          vault?: {
            __typename?: 'vaults'
            term_id: any
            total_shares: any
            current_share_price: any
          } | null
        }>
      }>
    } | null
    counter_term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        term_id: any
        curve_id: any
        current_share_price: any
        total_shares: any
        term: {
          __typename?: 'terms'
          atom?: {
            __typename?: 'atoms'
            term_id: any
            label?: string | null
          } | null
          triple?: {
            __typename?: 'triples'
            term_id: any
            subject: {
              __typename?: 'atoms'
              term_id: any
              label?: string | null
            }
            predicate: {
              __typename?: 'atoms'
              term_id: any
              label?: string | null
            }
            object: {
              __typename?: 'atoms'
              term_id: any
              label?: string | null
            }
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
          } | null
          vault?: {
            __typename?: 'vaults'
            term_id: any
            total_shares: any
            current_share_price: any
          } | null
        }>
      }>
    } | null
  } | null
  deposit?: {
    __typename?: 'deposits'
    term_id: any
    curve_id: any
    sender_assets_after_total_fees: any
    shares_for_receiver: any
    receiver: { __typename?: 'accounts'; id: string }
    sender?: { __typename?: 'accounts'; id: string } | null
  } | null
  redemption?: {
    __typename?: 'redemptions'
    term_id: any
    curve_id: any
    receiver_id: string
    shares_redeemed_by_sender: any
    assets_for_receiver: any
  } | null
}

export type FollowMetadataFragment = {
  __typename?: 'triples'
  term_id: any
  subject: { __typename?: 'atoms'; term_id: any; label?: string | null }
  predicate: { __typename?: 'atoms'; term_id: any; label?: string | null }
  object: { __typename?: 'atoms'; term_id: any; label?: string | null }
  term?: {
    __typename?: 'terms'
    vaults: Array<{
      __typename?: 'vaults'
      term_id: any
      total_shares: any
      current_share_price: any
      positions_aggregate: {
        __typename?: 'positions_aggregate'
        aggregate?: {
          __typename?: 'positions_aggregate_fields'
          count: number
          sum?: {
            __typename?: 'positions_sum_fields'
            shares?: any | null
          } | null
        } | null
      }
      positions: Array<{
        __typename?: 'positions'
        shares: any
        account?: { __typename?: 'accounts'; id: string; label: string } | null
      }>
    }>
  } | null
}

export type FollowAggregateFragment = {
  __typename?: 'triples_aggregate'
  aggregate?: { __typename?: 'triples_aggregate_fields'; count: number } | null
}

export type PositionDetailsFragment = {
  __typename?: 'positions'
  id: string
  shares: any
  term_id: any
  curve_id: any
  account?: {
    __typename?: 'accounts'
    id: string
    label: string
    image?: string | null
  } | null
  vault?: {
    __typename?: 'vaults'
    term_id: any
    term: {
      __typename?: 'terms'
      atom?: {
        __typename?: 'atoms'
        term_id: any
        label?: string | null
        image?: string | null
      } | null
      triple?: {
        __typename?: 'triples'
        term_id: any
        term?: {
          __typename?: 'terms'
          vaults: Array<{
            __typename?: 'vaults'
            term_id: any
            position_count: number
            positions_aggregate: {
              __typename?: 'positions_aggregate'
              aggregate?: {
                __typename?: 'positions_aggregate_fields'
                sum?: {
                  __typename?: 'positions_sum_fields'
                  shares?: any | null
                } | null
              } | null
            }
          }>
        } | null
        counter_term?: {
          __typename?: 'terms'
          vaults: Array<{
            __typename?: 'vaults'
            term_id: any
            position_count: number
            positions_aggregate: {
              __typename?: 'positions_aggregate'
              aggregate?: {
                __typename?: 'positions_aggregate_fields'
                sum?: {
                  __typename?: 'positions_sum_fields'
                  shares?: any | null
                } | null
              } | null
            }
          }>
        } | null
        subject: {
          __typename?: 'atoms'
          data?: string | null
          term_id: any
          label?: string | null
          image?: string | null
          emoji?: string | null
          type: any
          creator: {
            __typename?: 'accounts'
            label: string
            image?: string | null
            id: string
            atom_id?: any | null
            type: any
          }
          value?: {
            __typename?: 'atom_values'
            person?: {
              __typename?: 'persons'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            thing?: {
              __typename?: 'things'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            organization?: {
              __typename?: 'organizations'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
          } | null
        }
        predicate: {
          __typename?: 'atoms'
          data?: string | null
          term_id: any
          label?: string | null
          image?: string | null
          emoji?: string | null
          type: any
          creator: {
            __typename?: 'accounts'
            label: string
            image?: string | null
            id: string
            atom_id?: any | null
            type: any
          }
          value?: {
            __typename?: 'atom_values'
            person?: {
              __typename?: 'persons'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            thing?: {
              __typename?: 'things'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            organization?: {
              __typename?: 'organizations'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
          } | null
        }
        object: {
          __typename?: 'atoms'
          data?: string | null
          term_id: any
          label?: string | null
          image?: string | null
          emoji?: string | null
          type: any
          creator: {
            __typename?: 'accounts'
            label: string
            image?: string | null
            id: string
            atom_id?: any | null
            type: any
          }
          value?: {
            __typename?: 'atom_values'
            person?: {
              __typename?: 'persons'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            thing?: {
              __typename?: 'things'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            organization?: {
              __typename?: 'organizations'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
          } | null
        }
      } | null
    }
  } | null
}

export type PositionFieldsFragment = {
  __typename?: 'positions'
  shares: any
  account?: { __typename?: 'accounts'; id: string; label: string } | null
  vault?: {
    __typename?: 'vaults'
    term_id: any
    total_shares: any
    current_share_price: any
  } | null
}

export type PositionAggregateFieldsFragment = {
  __typename?: 'positions_aggregate'
  aggregate?: {
    __typename?: 'positions_aggregate_fields'
    count: number
    sum?: { __typename?: 'positions_sum_fields'; shares?: any | null } | null
  } | null
}

export type RedemptionEventFragmentFragment = {
  __typename?: 'events'
  redemption?: {
    __typename?: 'redemptions'
    term_id: any
    curve_id: any
    receiver_id: string
    shares_redeemed_by_sender: any
    assets_for_receiver: any
  } | null
}

export type StatDetailsFragment = {
  __typename?: 'stats'
  contract_balance?: any | null
  total_accounts?: number | null
  total_fees?: any | null
  total_atoms?: number | null
  total_triples?: number | null
  total_positions?: number | null
  total_signals?: number | null
}

export type TripleMetadataFragment = {
  __typename?: 'triples'
  term_id: any
  subject_id: any
  predicate_id: any
  object_id: any
  subject: {
    __typename?: 'atoms'
    data?: string | null
    term_id: any
    image?: string | null
    label?: string | null
    emoji?: string | null
    type: any
    creator: {
      __typename?: 'accounts'
      label: string
      image?: string | null
      id: string
      atom_id?: any | null
      type: any
    }
    value?: {
      __typename?: 'atom_values'
      person?: {
        __typename?: 'persons'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      thing?: {
        __typename?: 'things'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      organization?: {
        __typename?: 'organizations'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
    } | null
  }
  predicate: {
    __typename?: 'atoms'
    data?: string | null
    term_id: any
    image?: string | null
    label?: string | null
    emoji?: string | null
    type: any
    creator: {
      __typename?: 'accounts'
      label: string
      image?: string | null
      id: string
      atom_id?: any | null
      type: any
    }
    value?: {
      __typename?: 'atom_values'
      person?: {
        __typename?: 'persons'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      thing?: {
        __typename?: 'things'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      organization?: {
        __typename?: 'organizations'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
    } | null
  }
  object: {
    __typename?: 'atoms'
    data?: string | null
    term_id: any
    image?: string | null
    label?: string | null
    emoji?: string | null
    type: any
    creator: {
      __typename?: 'accounts'
      label: string
      image?: string | null
      id: string
      atom_id?: any | null
      type: any
    }
    value?: {
      __typename?: 'atom_values'
      person?: {
        __typename?: 'persons'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      thing?: {
        __typename?: 'things'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      organization?: {
        __typename?: 'organizations'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
    } | null
  }
  term?: {
    __typename?: 'terms'
    vaults: Array<{
      __typename?: 'vaults'
      total_shares: any
      current_share_price: any
      allPositions: {
        __typename?: 'positions_aggregate'
        aggregate?: {
          __typename?: 'positions_aggregate_fields'
          count: number
          sum?: {
            __typename?: 'positions_sum_fields'
            shares?: any | null
          } | null
        } | null
      }
      positions: Array<{
        __typename?: 'positions'
        shares: any
        account?: { __typename?: 'accounts'; id: string; label: string } | null
        vault?: {
          __typename?: 'vaults'
          term_id: any
          total_shares: any
          current_share_price: any
        } | null
      }>
    }>
  } | null
  counter_term?: {
    __typename?: 'terms'
    vaults: Array<{
      __typename?: 'vaults'
      total_shares: any
      current_share_price: any
      allPositions: {
        __typename?: 'positions_aggregate'
        aggregate?: {
          __typename?: 'positions_aggregate_fields'
          count: number
          sum?: {
            __typename?: 'positions_sum_fields'
            shares?: any | null
          } | null
        } | null
      }
      positions: Array<{
        __typename?: 'positions'
        shares: any
        account?: { __typename?: 'accounts'; id: string; label: string } | null
        vault?: {
          __typename?: 'vaults'
          term_id: any
          total_shares: any
          current_share_price: any
        } | null
      }>
    }>
  } | null
}

export type TripleTxnFragment = {
  __typename?: 'triples'
  block_number: any
  block_timestamp: any
  transaction_hash: string
  creator_id: string
}

export type TripleVaultDetailsFragment = {
  __typename?: 'triples'
  term_id: any
  counter_term_id: any
  term?: {
    __typename?: 'terms'
    vaults: Array<{
      __typename?: 'vaults'
      positions: Array<{
        __typename?: 'positions'
        id: string
        shares: any
        term_id: any
        curve_id: any
        account?: {
          __typename?: 'accounts'
          id: string
          label: string
          image?: string | null
        } | null
        vault?: {
          __typename?: 'vaults'
          term_id: any
          term: {
            __typename?: 'terms'
            atom?: {
              __typename?: 'atoms'
              term_id: any
              label?: string | null
              image?: string | null
            } | null
            triple?: {
              __typename?: 'triples'
              term_id: any
              term?: {
                __typename?: 'terms'
                vaults: Array<{
                  __typename?: 'vaults'
                  term_id: any
                  position_count: number
                  positions_aggregate: {
                    __typename?: 'positions_aggregate'
                    aggregate?: {
                      __typename?: 'positions_aggregate_fields'
                      sum?: {
                        __typename?: 'positions_sum_fields'
                        shares?: any | null
                      } | null
                    } | null
                  }
                }>
              } | null
              counter_term?: {
                __typename?: 'terms'
                vaults: Array<{
                  __typename?: 'vaults'
                  term_id: any
                  position_count: number
                  positions_aggregate: {
                    __typename?: 'positions_aggregate'
                    aggregate?: {
                      __typename?: 'positions_aggregate_fields'
                      sum?: {
                        __typename?: 'positions_sum_fields'
                        shares?: any | null
                      } | null
                    } | null
                  }
                }>
              } | null
              subject: {
                __typename?: 'atoms'
                data?: string | null
                term_id: any
                label?: string | null
                image?: string | null
                emoji?: string | null
                type: any
                creator: {
                  __typename?: 'accounts'
                  label: string
                  image?: string | null
                  id: string
                  atom_id?: any | null
                  type: any
                }
                value?: {
                  __typename?: 'atom_values'
                  person?: {
                    __typename?: 'persons'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                  thing?: {
                    __typename?: 'things'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                  organization?: {
                    __typename?: 'organizations'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                } | null
              }
              predicate: {
                __typename?: 'atoms'
                data?: string | null
                term_id: any
                label?: string | null
                image?: string | null
                emoji?: string | null
                type: any
                creator: {
                  __typename?: 'accounts'
                  label: string
                  image?: string | null
                  id: string
                  atom_id?: any | null
                  type: any
                }
                value?: {
                  __typename?: 'atom_values'
                  person?: {
                    __typename?: 'persons'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                  thing?: {
                    __typename?: 'things'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                  organization?: {
                    __typename?: 'organizations'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                } | null
              }
              object: {
                __typename?: 'atoms'
                data?: string | null
                term_id: any
                label?: string | null
                image?: string | null
                emoji?: string | null
                type: any
                creator: {
                  __typename?: 'accounts'
                  label: string
                  image?: string | null
                  id: string
                  atom_id?: any | null
                  type: any
                }
                value?: {
                  __typename?: 'atom_values'
                  person?: {
                    __typename?: 'persons'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                  thing?: {
                    __typename?: 'things'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                  organization?: {
                    __typename?: 'organizations'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                } | null
              }
            } | null
          }
        } | null
      }>
    }>
  } | null
  counter_term?: {
    __typename?: 'terms'
    vaults: Array<{
      __typename?: 'vaults'
      positions: Array<{
        __typename?: 'positions'
        id: string
        shares: any
        term_id: any
        curve_id: any
        account?: {
          __typename?: 'accounts'
          id: string
          label: string
          image?: string | null
        } | null
        vault?: {
          __typename?: 'vaults'
          term_id: any
          term: {
            __typename?: 'terms'
            atom?: {
              __typename?: 'atoms'
              term_id: any
              label?: string | null
              image?: string | null
            } | null
            triple?: {
              __typename?: 'triples'
              term_id: any
              term?: {
                __typename?: 'terms'
                vaults: Array<{
                  __typename?: 'vaults'
                  term_id: any
                  position_count: number
                  positions_aggregate: {
                    __typename?: 'positions_aggregate'
                    aggregate?: {
                      __typename?: 'positions_aggregate_fields'
                      sum?: {
                        __typename?: 'positions_sum_fields'
                        shares?: any | null
                      } | null
                    } | null
                  }
                }>
              } | null
              counter_term?: {
                __typename?: 'terms'
                vaults: Array<{
                  __typename?: 'vaults'
                  term_id: any
                  position_count: number
                  positions_aggregate: {
                    __typename?: 'positions_aggregate'
                    aggregate?: {
                      __typename?: 'positions_aggregate_fields'
                      sum?: {
                        __typename?: 'positions_sum_fields'
                        shares?: any | null
                      } | null
                    } | null
                  }
                }>
              } | null
              subject: {
                __typename?: 'atoms'
                data?: string | null
                term_id: any
                label?: string | null
                image?: string | null
                emoji?: string | null
                type: any
                creator: {
                  __typename?: 'accounts'
                  label: string
                  image?: string | null
                  id: string
                  atom_id?: any | null
                  type: any
                }
                value?: {
                  __typename?: 'atom_values'
                  person?: {
                    __typename?: 'persons'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                  thing?: {
                    __typename?: 'things'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                  organization?: {
                    __typename?: 'organizations'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                } | null
              }
              predicate: {
                __typename?: 'atoms'
                data?: string | null
                term_id: any
                label?: string | null
                image?: string | null
                emoji?: string | null
                type: any
                creator: {
                  __typename?: 'accounts'
                  label: string
                  image?: string | null
                  id: string
                  atom_id?: any | null
                  type: any
                }
                value?: {
                  __typename?: 'atom_values'
                  person?: {
                    __typename?: 'persons'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                  thing?: {
                    __typename?: 'things'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                  organization?: {
                    __typename?: 'organizations'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                } | null
              }
              object: {
                __typename?: 'atoms'
                data?: string | null
                term_id: any
                label?: string | null
                image?: string | null
                emoji?: string | null
                type: any
                creator: {
                  __typename?: 'accounts'
                  label: string
                  image?: string | null
                  id: string
                  atom_id?: any | null
                  type: any
                }
                value?: {
                  __typename?: 'atom_values'
                  person?: {
                    __typename?: 'persons'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                  thing?: {
                    __typename?: 'things'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                  organization?: {
                    __typename?: 'organizations'
                    name?: string | null
                    image?: string | null
                    description?: string | null
                    url?: string | null
                  } | null
                } | null
              }
            } | null
          }
        } | null
      }>
    }>
  } | null
}

export type TripleVaultCouterVaultDetailsWithPositionsFragment = {
  __typename?: 'triples'
  term_id: any
  counter_term_id: any
  term?: {
    __typename?: 'terms'
    vaults: Array<{
      __typename?: 'vaults'
      term_id: any
      curve_id: any
      current_share_price: any
      total_shares: any
      term: {
        __typename?: 'terms'
        atom?: {
          __typename?: 'atoms'
          term_id: any
          label?: string | null
        } | null
        triple?: {
          __typename?: 'triples'
          term_id: any
          subject: { __typename?: 'atoms'; term_id: any; label?: string | null }
          predicate: {
            __typename?: 'atoms'
            term_id: any
            label?: string | null
          }
          object: { __typename?: 'atoms'; term_id: any; label?: string | null }
        } | null
      }
      positions: Array<{
        __typename?: 'positions'
        shares: any
        account?: { __typename?: 'accounts'; id: string; label: string } | null
        vault?: {
          __typename?: 'vaults'
          term_id: any
          total_shares: any
          current_share_price: any
        } | null
      }>
    }>
  } | null
  counter_term?: {
    __typename?: 'terms'
    vaults: Array<{
      __typename?: 'vaults'
      term_id: any
      curve_id: any
      current_share_price: any
      total_shares: any
      term: {
        __typename?: 'terms'
        atom?: {
          __typename?: 'atoms'
          term_id: any
          label?: string | null
        } | null
        triple?: {
          __typename?: 'triples'
          term_id: any
          subject: { __typename?: 'atoms'; term_id: any; label?: string | null }
          predicate: {
            __typename?: 'atoms'
            term_id: any
            label?: string | null
          }
          object: { __typename?: 'atoms'; term_id: any; label?: string | null }
        } | null
      }
      positions: Array<{
        __typename?: 'positions'
        shares: any
        account?: { __typename?: 'accounts'; id: string; label: string } | null
        vault?: {
          __typename?: 'vaults'
          term_id: any
          total_shares: any
          current_share_price: any
        } | null
      }>
    }>
  } | null
}

export type TripleMetadataSubscriptionFragment = {
  __typename?: 'triples'
  term_id: any
  creator_id: string
  subject_id: any
  predicate_id: any
  object_id: any
  creator?: {
    __typename?: 'accounts'
    image?: string | null
    label: string
    id: string
  } | null
  subject: {
    __typename?: 'atoms'
    data?: string | null
    term_id: any
    image?: string | null
    label?: string | null
    emoji?: string | null
    type: any
    creator: {
      __typename?: 'accounts'
      label: string
      image?: string | null
      id: string
      atom_id?: any | null
      type: any
    }
  }
  predicate: {
    __typename?: 'atoms'
    data?: string | null
    term_id: any
    image?: string | null
    label?: string | null
    emoji?: string | null
    type: any
    creator: {
      __typename?: 'accounts'
      label: string
      image?: string | null
      id: string
      atom_id?: any | null
      type: any
    }
  }
  object: {
    __typename?: 'atoms'
    data?: string | null
    term_id: any
    image?: string | null
    label?: string | null
    emoji?: string | null
    type: any
    creator: {
      __typename?: 'accounts'
      label: string
      image?: string | null
      id: string
      atom_id?: any | null
      type: any
    }
  }
}

export type VaultBasicDetailsFragment = {
  __typename?: 'vaults'
  term_id: any
  curve_id: any
  current_share_price: any
  total_shares: any
  term: {
    __typename?: 'terms'
    atom?: { __typename?: 'atoms'; term_id: any; label?: string | null } | null
    triple?: {
      __typename?: 'triples'
      term_id: any
      subject: { __typename?: 'atoms'; term_id: any; label?: string | null }
      predicate: { __typename?: 'atoms'; term_id: any; label?: string | null }
      object: { __typename?: 'atoms'; term_id: any; label?: string | null }
    } | null
  }
}

export type VaultPositionsAggregateFragment = {
  __typename?: 'vaults'
  positions_aggregate: {
    __typename?: 'positions_aggregate'
    aggregate?: {
      __typename?: 'positions_aggregate_fields'
      count: number
      sum?: { __typename?: 'positions_sum_fields'; shares?: any | null } | null
    } | null
  }
}

export type VaultFilteredPositionsFragment = {
  __typename?: 'vaults'
  positions: Array<{
    __typename?: 'positions'
    shares: any
    account?: { __typename?: 'accounts'; id: string; label: string } | null
    vault?: {
      __typename?: 'vaults'
      term_id: any
      total_shares: any
      current_share_price: any
    } | null
  }>
}

export type VaultUnfilteredPositionsFragment = {
  __typename?: 'vaults'
  positions: Array<{
    __typename?: 'positions'
    shares: any
    account?: { __typename?: 'accounts'; id: string; label: string } | null
    vault?: {
      __typename?: 'vaults'
      term_id: any
      total_shares: any
      current_share_price: any
    } | null
  }>
}

export type VaultDetailsFragment = {
  __typename?: 'vaults'
  term_id: any
  curve_id: any
  current_share_price: any
  total_shares: any
  term: {
    __typename?: 'terms'
    atom?: { __typename?: 'atoms'; term_id: any; label?: string | null } | null
    triple?: {
      __typename?: 'triples'
      term_id: any
      subject: { __typename?: 'atoms'; term_id: any; label?: string | null }
      predicate: { __typename?: 'atoms'; term_id: any; label?: string | null }
      object: { __typename?: 'atoms'; term_id: any; label?: string | null }
    } | null
  }
}

export type VaultDetailsWithFilteredPositionsFragment = {
  __typename?: 'vaults'
  term_id: any
  curve_id: any
  current_share_price: any
  total_shares: any
  term: {
    __typename?: 'terms'
    atom?: { __typename?: 'atoms'; term_id: any; label?: string | null } | null
    triple?: {
      __typename?: 'triples'
      term_id: any
      subject: { __typename?: 'atoms'; term_id: any; label?: string | null }
      predicate: { __typename?: 'atoms'; term_id: any; label?: string | null }
      object: { __typename?: 'atoms'; term_id: any; label?: string | null }
    } | null
  }
  positions: Array<{
    __typename?: 'positions'
    shares: any
    account?: { __typename?: 'accounts'; id: string; label: string } | null
    vault?: {
      __typename?: 'vaults'
      term_id: any
      total_shares: any
      current_share_price: any
    } | null
  }>
}

export type VaultFieldsForTripleFragment = {
  __typename?: 'vaults'
  total_shares: any
  current_share_price: any
  positions_aggregate: {
    __typename?: 'positions_aggregate'
    aggregate?: {
      __typename?: 'positions_aggregate_fields'
      count: number
      sum?: { __typename?: 'positions_sum_fields'; shares?: any | null } | null
    } | null
  }
  positions: Array<{
    __typename?: 'positions'
    shares: any
    account?: { __typename?: 'accounts'; id: string; label: string } | null
    vault?: {
      __typename?: 'vaults'
      term_id: any
      total_shares: any
      current_share_price: any
    } | null
  }>
}

export type PinPersonMutationVariables = Exact<{
  name: Scalars['String']['input']
  description?: InputMaybe<Scalars['String']['input']>
  image?: InputMaybe<Scalars['String']['input']>
  url?: InputMaybe<Scalars['String']['input']>
  email?: InputMaybe<Scalars['String']['input']>
  identifier?: InputMaybe<Scalars['String']['input']>
}>

export type PinPersonMutation = {
  __typename?: 'mutation_root'
  pinPerson?: { __typename?: 'PinOutput'; uri?: string | null } | null
}

export type PinThingMutationVariables = Exact<{
  name: Scalars['String']['input']
  description?: InputMaybe<Scalars['String']['input']>
  image?: InputMaybe<Scalars['String']['input']>
  url?: InputMaybe<Scalars['String']['input']>
}>

export type PinThingMutation = {
  __typename?: 'mutation_root'
  pinThing?: { __typename?: 'PinOutput'; uri?: string | null } | null
}

export type GetAccountsQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Accounts_Order_By> | Accounts_Order_By>
  where?: InputMaybe<Accounts_Bool_Exp>
  claimsLimit?: InputMaybe<Scalars['Int']['input']>
  claimsOffset?: InputMaybe<Scalars['Int']['input']>
  claimsWhere?: InputMaybe<Claims_Bool_Exp>
  positionsLimit?: InputMaybe<Scalars['Int']['input']>
  positionsOffset?: InputMaybe<Scalars['Int']['input']>
  positionsWhere?: InputMaybe<Positions_Bool_Exp>
}>

export type GetAccountsQuery = {
  __typename?: 'query_root'
  accounts: Array<{
    __typename?: 'accounts'
    label: string
    image?: string | null
    id: string
    atom_id?: any | null
    type: any
    atom?: {
      __typename?: 'atoms'
      term_id: any
      wallet_id: string
      term: {
        __typename?: 'terms'
        vaults: Array<{
          __typename?: 'vaults'
          position_count: number
          total_shares: any
          positions_aggregate: {
            __typename?: 'positions_aggregate'
            aggregate?: {
              __typename?: 'positions_aggregate_fields'
              count: number
              sum?: {
                __typename?: 'positions_sum_fields'
                shares?: any | null
              } | null
            } | null
          }
          positions: Array<{
            __typename?: 'positions'
            id: string
            shares: any
            account?: {
              __typename?: 'accounts'
              label: string
              id: string
            } | null
          }>
        }>
      }
    } | null
    claims: Array<{
      __typename?: 'claims'
      id: string
      position: { __typename?: 'positions'; shares: any }
    }>
    positions: Array<{
      __typename?: 'positions'
      id: string
      shares: any
      vault?: {
        __typename?: 'vaults'
        term_id: any
        total_shares: any
        current_share_price: any
        term: {
          __typename?: 'terms'
          atom?: {
            __typename?: 'atoms'
            term_id: any
            label?: string | null
          } | null
          triple?: { __typename?: 'triples'; term_id: any } | null
        }
      } | null
    }>
  }>
}

export type GetAccountsWithAggregatesQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Accounts_Order_By> | Accounts_Order_By>
  where?: InputMaybe<Accounts_Bool_Exp>
  claimsLimit?: InputMaybe<Scalars['Int']['input']>
  claimsOffset?: InputMaybe<Scalars['Int']['input']>
  claimsWhere?: InputMaybe<Claims_Bool_Exp>
  positionsLimit?: InputMaybe<Scalars['Int']['input']>
  positionsOffset?: InputMaybe<Scalars['Int']['input']>
  positionsWhere?: InputMaybe<Positions_Bool_Exp>
  atomsWhere?: InputMaybe<Atoms_Bool_Exp>
  atomsOrderBy?: InputMaybe<Array<Atoms_Order_By> | Atoms_Order_By>
  atomsLimit?: InputMaybe<Scalars['Int']['input']>
  atomsOffset?: InputMaybe<Scalars['Int']['input']>
}>

export type GetAccountsWithAggregatesQuery = {
  __typename?: 'query_root'
  accounts_aggregate: {
    __typename?: 'accounts_aggregate'
    aggregate?: {
      __typename?: 'accounts_aggregate_fields'
      count: number
    } | null
    nodes: Array<{
      __typename?: 'accounts'
      label: string
      image?: string | null
      id: string
      atom_id?: any | null
      type: any
      claims: Array<{
        __typename?: 'claims'
        id: string
        position: { __typename?: 'positions'; shares: any }
      }>
      positions: Array<{
        __typename?: 'positions'
        id: string
        shares: any
        vault?: {
          __typename?: 'vaults'
          term_id: any
          total_shares: any
          current_share_price: any
          term: {
            __typename?: 'terms'
            atom?: {
              __typename?: 'atoms'
              term_id: any
              label?: string | null
            } | null
            triple?: { __typename?: 'triples'; term_id: any } | null
          }
        } | null
      }>
    }>
  }
}

export type GetAccountsCountQueryVariables = Exact<{
  where?: InputMaybe<Accounts_Bool_Exp>
}>

export type GetAccountsCountQuery = {
  __typename?: 'query_root'
  accounts_aggregate: {
    __typename?: 'accounts_aggregate'
    aggregate?: {
      __typename?: 'accounts_aggregate_fields'
      count: number
    } | null
  }
}

export type GetAccountQueryVariables = Exact<{
  address: Scalars['String']['input']
  claimsLimit?: InputMaybe<Scalars['Int']['input']>
  claimsOffset?: InputMaybe<Scalars['Int']['input']>
  claimsWhere?: InputMaybe<Claims_Bool_Exp>
  positionsLimit?: InputMaybe<Scalars['Int']['input']>
  positionsOffset?: InputMaybe<Scalars['Int']['input']>
  positionsWhere?: InputMaybe<Positions_Bool_Exp>
  atomsWhere?: InputMaybe<Atoms_Bool_Exp>
  atomsOrderBy?: InputMaybe<Array<Atoms_Order_By> | Atoms_Order_By>
  atomsLimit?: InputMaybe<Scalars['Int']['input']>
  atomsOffset?: InputMaybe<Scalars['Int']['input']>
  triplesWhere?: InputMaybe<Triples_Bool_Exp>
  triplesOrderBy?: InputMaybe<Array<Triples_Order_By> | Triples_Order_By>
  triplesLimit?: InputMaybe<Scalars['Int']['input']>
  triplesOffset?: InputMaybe<Scalars['Int']['input']>
}>

export type GetAccountQuery = {
  __typename?: 'query_root'
  account?: {
    __typename?: 'accounts'
    label: string
    image?: string | null
    id: string
    atom_id?: any | null
    type: any
    atom?: {
      __typename?: 'atoms'
      term_id: any
      data?: string | null
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      wallet_id: string
      creator: {
        __typename?: 'accounts'
        id: string
        label: string
        image?: string | null
      }
      term: {
        __typename?: 'terms'
        vaults: Array<{
          __typename?: 'vaults'
          position_count: number
          total_shares: any
          current_share_price: any
          positions_aggregate: {
            __typename?: 'positions_aggregate'
            aggregate?: {
              __typename?: 'positions_aggregate_fields'
              count: number
              sum?: {
                __typename?: 'positions_sum_fields'
                shares?: any | null
              } | null
            } | null
          }
          positions: Array<{
            __typename?: 'positions'
            id: string
            shares: any
            account?: {
              __typename?: 'accounts'
              label: string
              id: string
            } | null
          }>
        }>
        positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
          } | null
        }
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    } | null
    claims: Array<{
      __typename?: 'claims'
      id: string
      position: { __typename?: 'positions'; shares: any }
    }>
    positions: Array<{
      __typename?: 'positions'
      id: string
      shares: any
      vault?: {
        __typename?: 'vaults'
        term_id: any
        total_shares: any
        current_share_price: any
        term: {
          __typename?: 'terms'
          atom?: {
            __typename?: 'atoms'
            term_id: any
            label?: string | null
          } | null
          triple?: { __typename?: 'triples'; term_id: any } | null
        }
      } | null
    }>
    atoms: Array<{
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      data?: string | null
      term: {
        __typename?: 'terms'
        vaults: Array<{
          __typename?: 'vaults'
          total_shares: any
          positions_aggregate: {
            __typename?: 'positions_aggregate'
            nodes: Array<{
              __typename?: 'positions'
              shares: any
              account?: { __typename?: 'accounts'; id: string } | null
            }>
          }
        }>
      }
    }>
    triples_aggregate: {
      __typename?: 'triples_aggregate'
      aggregate?: {
        __typename?: 'triples_aggregate_fields'
        count: number
      } | null
      nodes: Array<{
        __typename?: 'triples'
        term_id: any
        subject: { __typename?: 'atoms'; term_id: any; label?: string | null }
        predicate: { __typename?: 'atoms'; term_id: any; label?: string | null }
        object: { __typename?: 'atoms'; term_id: any; label?: string | null }
      }>
    }
  } | null
  chainlink_prices: Array<{ __typename?: 'chainlink_prices'; usd?: any | null }>
}

export type GetAccountWithPaginatedRelationsQueryVariables = Exact<{
  address: Scalars['String']['input']
  claimsLimit?: InputMaybe<Scalars['Int']['input']>
  claimsOffset?: InputMaybe<Scalars['Int']['input']>
  claimsWhere?: InputMaybe<Claims_Bool_Exp>
  positionsLimit?: InputMaybe<Scalars['Int']['input']>
  positionsOffset?: InputMaybe<Scalars['Int']['input']>
  positionsWhere?: InputMaybe<Positions_Bool_Exp>
  atomsLimit?: InputMaybe<Scalars['Int']['input']>
  atomsOffset?: InputMaybe<Scalars['Int']['input']>
  atomsWhere?: InputMaybe<Atoms_Bool_Exp>
  atomsOrderBy?: InputMaybe<Array<Atoms_Order_By> | Atoms_Order_By>
  triplesLimit?: InputMaybe<Scalars['Int']['input']>
  triplesOffset?: InputMaybe<Scalars['Int']['input']>
  triplesWhere?: InputMaybe<Triples_Bool_Exp>
  triplesOrderBy?: InputMaybe<Array<Triples_Order_By> | Triples_Order_By>
}>

export type GetAccountWithPaginatedRelationsQuery = {
  __typename?: 'query_root'
  account?: {
    __typename?: 'accounts'
    label: string
    image?: string | null
    id: string
    atom_id?: any | null
    type: any
    claims: Array<{
      __typename?: 'claims'
      id: string
      position: { __typename?: 'positions'; shares: any }
    }>
    positions: Array<{
      __typename?: 'positions'
      id: string
      shares: any
      vault?: {
        __typename?: 'vaults'
        term_id: any
        total_shares: any
        current_share_price: any
        term: {
          __typename?: 'terms'
          atom?: {
            __typename?: 'atoms'
            term_id: any
            label?: string | null
          } | null
          triple?: { __typename?: 'triples'; term_id: any } | null
        }
      } | null
    }>
    atoms: Array<{
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      data?: string | null
      term: {
        __typename?: 'terms'
        vaults: Array<{
          __typename?: 'vaults'
          total_shares: any
          positions_aggregate: {
            __typename?: 'positions_aggregate'
            nodes: Array<{
              __typename?: 'positions'
              shares: any
              account?: { __typename?: 'accounts'; id: string } | null
            }>
          }
        }>
      }
    }>
    triples_aggregate: {
      __typename?: 'triples_aggregate'
      aggregate?: {
        __typename?: 'triples_aggregate_fields'
        count: number
      } | null
      nodes: Array<{
        __typename?: 'triples'
        term_id: any
        subject: { __typename?: 'atoms'; term_id: any; label?: string | null }
        predicate: { __typename?: 'atoms'; term_id: any; label?: string | null }
        object: { __typename?: 'atoms'; term_id: any; label?: string | null }
      }>
    }
  } | null
}

export type GetAccountWithAggregatesQueryVariables = Exact<{
  address: Scalars['String']['input']
  claimsLimit?: InputMaybe<Scalars['Int']['input']>
  claimsOffset?: InputMaybe<Scalars['Int']['input']>
  claimsWhere?: InputMaybe<Claims_Bool_Exp>
  positionsLimit?: InputMaybe<Scalars['Int']['input']>
  positionsOffset?: InputMaybe<Scalars['Int']['input']>
  positionsWhere?: InputMaybe<Positions_Bool_Exp>
  atomsWhere?: InputMaybe<Atoms_Bool_Exp>
  atomsOrderBy?: InputMaybe<Array<Atoms_Order_By> | Atoms_Order_By>
  atomsLimit?: InputMaybe<Scalars['Int']['input']>
  atomsOffset?: InputMaybe<Scalars['Int']['input']>
  triplesWhere?: InputMaybe<Triples_Bool_Exp>
  triplesOrderBy?: InputMaybe<Array<Triples_Order_By> | Triples_Order_By>
  triplesLimit?: InputMaybe<Scalars['Int']['input']>
  triplesOffset?: InputMaybe<Scalars['Int']['input']>
}>

export type GetAccountWithAggregatesQuery = {
  __typename?: 'query_root'
  account?: {
    __typename?: 'accounts'
    label: string
    image?: string | null
    id: string
    atom_id?: any | null
    type: any
    claims_aggregate: {
      __typename?: 'claims_aggregate'
      aggregate?: {
        __typename?: 'claims_aggregate_fields'
        count: number
      } | null
      nodes: Array<{
        __typename?: 'claims'
        id: string
        position: { __typename?: 'positions'; shares: any }
      }>
    }
    positions_aggregate: {
      __typename?: 'positions_aggregate'
      aggregate?: {
        __typename?: 'positions_aggregate_fields'
        count: number
      } | null
      nodes: Array<{
        __typename?: 'positions'
        id: string
        shares: any
        vault?: {
          __typename?: 'vaults'
          term_id: any
          total_shares: any
          current_share_price: any
          term: {
            __typename?: 'terms'
            atom?: {
              __typename?: 'atoms'
              term_id: any
              label?: string | null
            } | null
            triple?: { __typename?: 'triples'; term_id: any } | null
          }
        } | null
      }>
    }
    atoms_aggregate: {
      __typename?: 'atoms_aggregate'
      aggregate?: {
        __typename?: 'atoms_aggregate_fields'
        count: number
        sum?: { __typename?: 'atoms_sum_fields'; term_id?: any | null } | null
      } | null
      nodes: Array<{
        __typename?: 'atoms'
        term_id: any
        label?: string | null
        data?: string | null
        term: {
          __typename?: 'terms'
          vaults: Array<{
            __typename?: 'vaults'
            total_shares: any
            positions_aggregate: {
              __typename?: 'positions_aggregate'
              nodes: Array<{
                __typename?: 'positions'
                shares: any
                account?: { __typename?: 'accounts'; id: string } | null
              }>
            }
          }>
        }
      }>
    }
    triples_aggregate: {
      __typename?: 'triples_aggregate'
      aggregate?: {
        __typename?: 'triples_aggregate_fields'
        count: number
      } | null
      nodes: Array<{
        __typename?: 'triples'
        term_id: any
        subject: { __typename?: 'atoms'; term_id: any; label?: string | null }
        predicate: { __typename?: 'atoms'; term_id: any; label?: string | null }
        object: { __typename?: 'atoms'; term_id: any; label?: string | null }
      }>
    }
  } | null
}

export type GetAtomsQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Atoms_Order_By> | Atoms_Order_By>
  where?: InputMaybe<Atoms_Bool_Exp>
}>

export type GetAtomsQuery = {
  __typename?: 'query_root'
  total: {
    __typename?: 'atoms_aggregate'
    aggregate?: { __typename?: 'atoms_aggregate_fields'; count: number } | null
  }
  atoms: Array<{
    __typename?: 'atoms'
    term_id: any
    data?: string | null
    image?: string | null
    label?: string | null
    emoji?: string | null
    type: any
    wallet_id: string
    block_number: any
    block_timestamp: any
    transaction_hash: string
    creator_id: string
    creator: {
      __typename?: 'accounts'
      id: string
      label: string
      image?: string | null
      atom_id?: any | null
      type: any
    }
    term: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        position_count: number
        total_shares: any
        current_share_price: any
        positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          id: string
          shares: any
          account?: {
            __typename?: 'accounts'
            label: string
            id: string
          } | null
        }>
      }>
      positions_aggregate: {
        __typename?: 'positions_aggregate'
        aggregate?: {
          __typename?: 'positions_aggregate_fields'
          count: number
        } | null
      }
    }
    as_subject_triples: Array<{
      __typename?: 'triples'
      term_id: any
      object: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
      predicate: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
    }>
    as_predicate_triples: Array<{
      __typename?: 'triples'
      term_id: any
      subject: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
      object: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
    }>
    as_object_triples: Array<{
      __typename?: 'triples'
      term_id: any
      subject: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
      predicate: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
    }>
    value?: {
      __typename?: 'atom_values'
      person?: {
        __typename?: 'persons'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      thing?: {
        __typename?: 'things'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      organization?: {
        __typename?: 'organizations'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
    } | null
  }>
}

export type GetAtomsWithPositionsQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Atoms_Order_By> | Atoms_Order_By>
  where?: InputMaybe<Atoms_Bool_Exp>
  address?: InputMaybe<Scalars['String']['input']>
}>

export type GetAtomsWithPositionsQuery = {
  __typename?: 'query_root'
  total: {
    __typename?: 'atoms_aggregate'
    aggregate?: { __typename?: 'atoms_aggregate_fields'; count: number } | null
  }
  atoms: Array<{
    __typename?: 'atoms'
    term_id: any
    data?: string | null
    image?: string | null
    label?: string | null
    emoji?: string | null
    type: any
    wallet_id: string
    block_number: any
    block_timestamp: any
    transaction_hash: string
    creator_id: string
    term: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        position_count: number
        total_shares: any
        current_share_price: any
        total: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          id: string
          shares: any
          account?: {
            __typename?: 'accounts'
            label: string
            id: string
          } | null
        }>
      }>
    }
    creator: {
      __typename?: 'accounts'
      id: string
      label: string
      image?: string | null
      atom_id?: any | null
      type: any
    }
    as_subject_triples_aggregate: {
      __typename?: 'triples_aggregate'
      nodes: Array<{
        __typename?: 'triples'
        predicate: { __typename?: 'atoms'; label?: string | null; term_id: any }
        object: { __typename?: 'atoms'; label?: string | null; term_id: any }
      }>
    }
    value?: {
      __typename?: 'atom_values'
      person?: {
        __typename?: 'persons'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      thing?: {
        __typename?: 'things'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      organization?: {
        __typename?: 'organizations'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
    } | null
  }>
}

export type GetAtomsWithAggregatesQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Atoms_Order_By> | Atoms_Order_By>
  where?: InputMaybe<Atoms_Bool_Exp>
}>

export type GetAtomsWithAggregatesQuery = {
  __typename?: 'query_root'
  atoms_aggregate: {
    __typename?: 'atoms_aggregate'
    aggregate?: { __typename?: 'atoms_aggregate_fields'; count: number } | null
    nodes: Array<{
      __typename?: 'atoms'
      term_id: any
      data?: string | null
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      wallet_id: string
      block_number: any
      block_timestamp: any
      transaction_hash: string
      creator_id: string
      creator: {
        __typename?: 'accounts'
        id: string
        label: string
        image?: string | null
        atom_id?: any | null
        type: any
      }
      term: {
        __typename?: 'terms'
        vaults: Array<{
          __typename?: 'vaults'
          position_count: number
          total_shares: any
          current_share_price: any
          positions_aggregate: {
            __typename?: 'positions_aggregate'
            aggregate?: {
              __typename?: 'positions_aggregate_fields'
              count: number
              sum?: {
                __typename?: 'positions_sum_fields'
                shares?: any | null
              } | null
            } | null
          }
          positions: Array<{
            __typename?: 'positions'
            id: string
            shares: any
            account?: {
              __typename?: 'accounts'
              label: string
              id: string
            } | null
          }>
        }>
        positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
          } | null
        }
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }>
  }
}

export type GetAtomsCountQueryVariables = Exact<{
  where?: InputMaybe<Atoms_Bool_Exp>
}>

export type GetAtomsCountQuery = {
  __typename?: 'query_root'
  atoms_aggregate: {
    __typename?: 'atoms_aggregate'
    aggregate?: { __typename?: 'atoms_aggregate_fields'; count: number } | null
  }
}

export type GetAtomQueryVariables = Exact<{
  term_id: Scalars['numeric']['input']
}>

export type GetAtomQuery = {
  __typename?: 'query_root'
  atom?: {
    __typename?: 'atoms'
    term_id: any
    data?: string | null
    image?: string | null
    label?: string | null
    emoji?: string | null
    type: any
    wallet_id: string
    block_number: any
    block_timestamp: any
    transaction_hash: string
    creator_id: string
    creator: {
      __typename?: 'accounts'
      id: string
      label: string
      image?: string | null
      atom_id?: any | null
      type: any
    }
    term: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        position_count: number
        total_shares: any
        current_share_price: any
        positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          id: string
          shares: any
          account?: {
            __typename?: 'accounts'
            label: string
            id: string
          } | null
        }>
      }>
      positions_aggregate: {
        __typename?: 'positions_aggregate'
        aggregate?: {
          __typename?: 'positions_aggregate_fields'
          count: number
        } | null
      }
    }
    as_subject_triples: Array<{
      __typename?: 'triples'
      term_id: any
      object: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
      predicate: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
    }>
    as_predicate_triples: Array<{
      __typename?: 'triples'
      term_id: any
      subject: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
      object: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
    }>
    as_object_triples: Array<{
      __typename?: 'triples'
      term_id: any
      subject: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
      predicate: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
    }>
    value?: {
      __typename?: 'atom_values'
      person?: {
        __typename?: 'persons'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      thing?: {
        __typename?: 'things'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      organization?: {
        __typename?: 'organizations'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
    } | null
  } | null
}

export type GetAtomByDataQueryVariables = Exact<{
  data: Scalars['String']['input']
}>

export type GetAtomByDataQuery = {
  __typename?: 'query_root'
  atoms: Array<{
    __typename?: 'atoms'
    term_id: any
    data?: string | null
    image?: string | null
    label?: string | null
    emoji?: string | null
    type: any
    wallet_id: string
    block_number: any
    block_timestamp: any
    transaction_hash: string
    creator_id: string
    creator: {
      __typename?: 'accounts'
      id: string
      label: string
      image?: string | null
      atom_id?: any | null
      type: any
    }
    term: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        position_count: number
        total_shares: any
        current_share_price: any
        positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          id: string
          shares: any
          account?: {
            __typename?: 'accounts'
            label: string
            id: string
          } | null
        }>
      }>
      positions_aggregate: {
        __typename?: 'positions_aggregate'
        aggregate?: {
          __typename?: 'positions_aggregate_fields'
          count: number
        } | null
      }
    }
    as_subject_triples: Array<{
      __typename?: 'triples'
      term_id: any
      object: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
      predicate: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
    }>
    as_predicate_triples: Array<{
      __typename?: 'triples'
      term_id: any
      subject: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
      object: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
    }>
    as_object_triples: Array<{
      __typename?: 'triples'
      term_id: any
      subject: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
      predicate: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
    }>
    value?: {
      __typename?: 'atom_values'
      person?: {
        __typename?: 'persons'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      thing?: {
        __typename?: 'things'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
      organization?: {
        __typename?: 'organizations'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
    } | null
  }>
}

export type GetVerifiedAtomDetailsQueryVariables = Exact<{
  id: Scalars['numeric']['input']
  userPositionAddress: Scalars['String']['input']
}>

export type GetVerifiedAtomDetailsQuery = {
  __typename?: 'query_root'
  atom?: {
    __typename?: 'atoms'
    term_id: any
    label?: string | null
    wallet_id: string
    image?: string | null
    type: any
    block_timestamp: any
    data?: string | null
    creator: { __typename?: 'accounts'; id: string }
    value?: {
      __typename?: 'atom_values'
      thing?: {
        __typename?: 'things'
        name?: string | null
        description?: string | null
        url?: string | null
      } | null
    } | null
    term: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        current_share_price: any
        total_shares: any
        position_count: number
        userPosition: Array<{
          __typename?: 'positions'
          shares: any
          account_id: string
        }>
      }>
    }
    tags: {
      __typename?: 'triples_aggregate'
      nodes: Array<{
        __typename?: 'triples'
        predicate_id: any
        object: {
          __typename?: 'atoms'
          label?: string | null
          term: {
            __typename?: 'terms'
            vaults: Array<{ __typename?: 'vaults'; term_id: any }>
          }
        }
      }>
      aggregate?: {
        __typename?: 'triples_aggregate_fields'
        count: number
      } | null
    }
    verificationTriple: {
      __typename?: 'triples_aggregate'
      nodes: Array<{
        __typename?: 'triples'
        term_id: any
        predicate_id: any
        object_id: any
        term?: {
          __typename?: 'terms'
          vaults: Array<{
            __typename?: 'vaults'
            term_id: any
            positions: Array<{
              __typename?: 'positions'
              id: string
              shares: any
              account_id: string
              account?: { __typename?: 'accounts'; id: string } | null
            }>
          }>
        } | null
      }>
    }
  } | null
}

export type GetAtomDetailsQueryVariables = Exact<{
  id: Scalars['numeric']['input']
  userPositionAddress: Scalars['String']['input']
}>

export type GetAtomDetailsQuery = {
  __typename?: 'query_root'
  atom?: {
    __typename?: 'atoms'
    term_id: any
    label?: string | null
    wallet_id: string
    image?: string | null
    type: any
    block_timestamp: any
    data?: string | null
    creator: { __typename?: 'accounts'; id: string }
    value?: {
      __typename?: 'atom_values'
      thing?: {
        __typename?: 'things'
        name?: string | null
        description?: string | null
        url?: string | null
      } | null
    } | null
    term: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        current_share_price: any
        total_shares: any
        position_count: number
        userPosition: Array<{
          __typename?: 'positions'
          shares: any
          account_id: string
        }>
      }>
    }
    tags: {
      __typename?: 'triples_aggregate'
      nodes: Array<{
        __typename?: 'triples'
        predicate_id: any
        object: {
          __typename?: 'atoms'
          label?: string | null
          term: {
            __typename?: 'terms'
            vaults: Array<{ __typename?: 'vaults'; term_id: any }>
          }
        }
      }>
      aggregate?: {
        __typename?: 'triples_aggregate_fields'
        count: number
      } | null
    }
  } | null
}

export type GetAtomsByCreatorQueryVariables = Exact<{
  address: Scalars['String']['input']
}>

export type GetAtomsByCreatorQuery = {
  __typename?: 'query_root'
  atoms: Array<{
    __typename?: 'atoms'
    term_id: any
    data?: string | null
    image?: string | null
    label?: string | null
    type: any
    block_number: any
    block_timestamp: any
    transaction_hash: string
    creator_id: string
    value?: {
      __typename?: 'atom_values'
      thing?: {
        __typename?: 'things'
        name?: string | null
        image?: string | null
        description?: string | null
        url?: string | null
      } | null
    } | null
    term: {
      __typename?: 'terms'
      total_market_cap?: any | null
      vaults: Array<{ __typename?: 'vaults'; position_count: number }>
    }
    as_subject_triples_aggregate: {
      __typename?: 'triples_aggregate'
      nodes: Array<{
        __typename?: 'triples'
        predicate: { __typename?: 'atoms'; label?: string | null; term_id: any }
        object: { __typename?: 'atoms'; label?: string | null; term_id: any }
      }>
    }
  }>
}

export type GetClaimsByAddressQueryVariables = Exact<{
  address?: InputMaybe<Scalars['String']['input']>
}>

export type GetClaimsByAddressQuery = {
  __typename?: 'query_root'
  claims_aggregate: {
    __typename?: 'claims_aggregate'
    aggregate?: { __typename?: 'claims_aggregate_fields'; count: number } | null
    nodes: Array<{
      __typename?: 'claims'
      account?: { __typename?: 'accounts'; label: string } | null
      position: {
        __typename?: 'positions'
        shares: any
        term: {
          __typename?: 'terms'
          triple?: {
            __typename?: 'triples'
            term_id: any
            counter_term_id: any
            subject: { __typename?: 'atoms'; label?: string | null }
            predicate: { __typename?: 'atoms'; label?: string | null }
            object: { __typename?: 'atoms'; label?: string | null }
          } | null
        }
      }
    }>
  }
}

export type GetClaimsByUriQueryVariables = Exact<{
  address?: InputMaybe<Scalars['String']['input']>
  uri?: InputMaybe<Scalars['String']['input']>
}>

export type GetClaimsByUriQuery = {
  __typename?: 'query_root'
  atoms: Array<{
    __typename?: 'atoms'
    term_id: any
    label?: string | null
    image?: string | null
    as_subject_triples_aggregate: {
      __typename?: 'triples_aggregate'
      aggregate?: {
        __typename?: 'triples_aggregate_fields'
        count: number
      } | null
      nodes: Array<{
        __typename?: 'triples'
        term_id: any
        predicate: {
          __typename?: 'atoms'
          label?: string | null
          image?: string | null
          type: any
          term_id: any
        }
        object: {
          __typename?: 'atoms'
          label?: string | null
          image?: string | null
          type: any
          term_id: any
        }
        positions: Array<{ __typename?: 'positions'; shares: any }>
        positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
          } | null
        }
        counter_positions: Array<{ __typename?: 'positions'; shares: any }>
        counter_positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
          } | null
        }
        creator?: {
          __typename?: 'accounts'
          label: string
          id: string
          type: any
        } | null
      }>
    }
    as_object_triples_aggregate: {
      __typename?: 'triples_aggregate'
      aggregate?: {
        __typename?: 'triples_aggregate_fields'
        count: number
      } | null
      nodes: Array<{
        __typename?: 'triples'
        term_id: any
        predicate: {
          __typename?: 'atoms'
          label?: string | null
          image?: string | null
          type: any
          term_id: any
        }
        subject: {
          __typename?: 'atoms'
          label?: string | null
          image?: string | null
          type: any
          term_id: any
        }
        object: {
          __typename?: 'atoms'
          label?: string | null
          image?: string | null
          type: any
          term_id: any
        }
        positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
          } | null
        }
        positions: Array<{ __typename?: 'positions'; shares: any }>
        counter_positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
          } | null
        }
        counter_positions: Array<{ __typename?: 'positions'; shares: any }>
        creator?: {
          __typename?: 'accounts'
          label: string
          id: string
          type: any
        } | null
      }>
    }
    as_predicate_triples_aggregate: {
      __typename?: 'triples_aggregate'
      aggregate?: {
        __typename?: 'triples_aggregate_fields'
        count: number
      } | null
      nodes: Array<{
        __typename?: 'triples'
        term_id: any
        predicate: {
          __typename?: 'atoms'
          image?: string | null
          label?: string | null
          type: any
          term_id: any
        }
        subject: {
          __typename?: 'atoms'
          label?: string | null
          image?: string | null
          type: any
          term_id: any
        }
        object: {
          __typename?: 'atoms'
          label?: string | null
          image?: string | null
          type: any
          term_id: any
        }
        positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
          } | null
        }
        positions: Array<{ __typename?: 'positions'; shares: any }>
        counter_positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
          } | null
        }
        counter_positions: Array<{ __typename?: 'positions'; shares: any }>
        creator?: {
          __typename?: 'accounts'
          label: string
          id: string
          type: any
        } | null
      }>
    }
    positions_aggregate: {
      __typename?: 'positions_aggregate'
      aggregate?: {
        __typename?: 'positions_aggregate_fields'
        count: number
      } | null
    }
    value?: {
      __typename?: 'atom_values'
      thing?: {
        __typename?: 'things'
        description?: string | null
        url?: string | null
      } | null
    } | null
  }>
}

export type GetEventsQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Events_Order_By> | Events_Order_By>
  where?: InputMaybe<Events_Bool_Exp>
  addresses?: InputMaybe<
    Array<Scalars['String']['input']> | Scalars['String']['input']
  >
}>

export type GetEventsQuery = {
  __typename?: 'query_root'
  total: {
    __typename?: 'events_aggregate'
    aggregate?: { __typename?: 'events_aggregate_fields'; count: number } | null
  }
  events: Array<{
    __typename?: 'events'
    id: string
    block_number: any
    block_timestamp: any
    type: any
    transaction_hash: string
    atom_id?: any | null
    triple_id?: any | null
    deposit_id?: string | null
    redemption_id?: string | null
    atom?: {
      __typename?: 'atoms'
      term_id: any
      data?: string | null
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      wallet_id: string
      term: {
        __typename?: 'terms'
        vaults: Array<{
          __typename?: 'vaults'
          total_shares: any
          position_count: number
          positions: Array<{
            __typename?: 'positions'
            account_id: string
            shares: any
            account?: {
              __typename?: 'accounts'
              id: string
              label: string
              image?: string | null
            } | null
          }>
        }>
      }
      creator: {
        __typename?: 'accounts'
        id: string
        label: string
        image?: string | null
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    } | null
    triple?: {
      __typename?: 'triples'
      term_id: any
      creator?: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      } | null
      subject: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
        value?: {
          __typename?: 'atom_values'
          person?: {
            __typename?: 'persons'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
          thing?: {
            __typename?: 'things'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
          organization?: {
            __typename?: 'organizations'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
        } | null
      }
      predicate: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
        value?: {
          __typename?: 'atom_values'
          person?: {
            __typename?: 'persons'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
          thing?: {
            __typename?: 'things'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
          organization?: {
            __typename?: 'organizations'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
        } | null
      }
      object: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
        value?: {
          __typename?: 'atom_values'
          person?: {
            __typename?: 'persons'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
          thing?: {
            __typename?: 'things'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
          organization?: {
            __typename?: 'organizations'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
        } | null
      }
      term?: {
        __typename?: 'terms'
        vaults: Array<{
          __typename?: 'vaults'
          total_shares: any
          position_count: number
          positions: Array<{
            __typename?: 'positions'
            account_id: string
            shares: any
            account?: {
              __typename?: 'accounts'
              id: string
              label: string
              image?: string | null
            } | null
          }>
        }>
      } | null
      counter_term?: {
        __typename?: 'terms'
        vaults: Array<{
          __typename?: 'vaults'
          total_shares: any
          position_count: number
          positions: Array<{
            __typename?: 'positions'
            account_id: string
            shares: any
            account?: {
              __typename?: 'accounts'
              id: string
              label: string
              image?: string | null
            } | null
          }>
        }>
      } | null
    } | null
    deposit?: {
      __typename?: 'deposits'
      sender_id: string
      shares_for_receiver: any
      sender_assets_after_total_fees: any
      sender?: { __typename?: 'accounts'; id: string } | null
      vault?: {
        __typename?: 'vaults'
        total_shares: any
        position_count: number
        positions: Array<{
          __typename?: 'positions'
          account_id: string
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
            image?: string | null
          } | null
        }>
      } | null
    } | null
    redemption?: {
      __typename?: 'redemptions'
      sender_id: string
      sender?: { __typename?: 'accounts'; id: string } | null
    } | null
  }>
}

export type GetEventsWithAggregatesQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Events_Order_By> | Events_Order_By>
  where?: InputMaybe<Events_Bool_Exp>
  addresses?: InputMaybe<
    Array<Scalars['String']['input']> | Scalars['String']['input']
  >
}>

export type GetEventsWithAggregatesQuery = {
  __typename?: 'query_root'
  events_aggregate: {
    __typename?: 'events_aggregate'
    aggregate?: {
      __typename?: 'events_aggregate_fields'
      count: number
      max?: {
        __typename?: 'events_max_fields'
        block_timestamp?: any | null
        block_number?: any | null
      } | null
      min?: {
        __typename?: 'events_min_fields'
        block_timestamp?: any | null
        block_number?: any | null
      } | null
    } | null
    nodes: Array<{
      __typename?: 'events'
      block_number: any
      block_timestamp: any
      type: any
      transaction_hash: string
      atom_id?: any | null
      triple_id?: any | null
      deposit_id?: string | null
      redemption_id?: string | null
      atom?: {
        __typename?: 'atoms'
        term_id: any
        data?: string | null
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        wallet_id: string
        term: {
          __typename?: 'terms'
          vaults: Array<{
            __typename?: 'vaults'
            total_shares: any
            position_count: number
            positions: Array<{
              __typename?: 'positions'
              account_id: string
              shares: any
              account?: {
                __typename?: 'accounts'
                id: string
                label: string
                image?: string | null
              } | null
            }>
          }>
        }
        creator: {
          __typename?: 'accounts'
          id: string
          label: string
          image?: string | null
        }
        value?: {
          __typename?: 'atom_values'
          person?: {
            __typename?: 'persons'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
          thing?: {
            __typename?: 'things'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
          organization?: {
            __typename?: 'organizations'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
        } | null
      } | null
      triple?: {
        __typename?: 'triples'
        term_id: any
        subject_id: any
        predicate_id: any
        object_id: any
        term?: {
          __typename?: 'terms'
          vaults: Array<{
            __typename?: 'vaults'
            total_shares: any
            position_count: number
            current_share_price: any
            positions: Array<{
              __typename?: 'positions'
              account_id: string
              shares: any
              account?: {
                __typename?: 'accounts'
                id: string
                label: string
                image?: string | null
              } | null
              vault?: {
                __typename?: 'vaults'
                term_id: any
                total_shares: any
                current_share_price: any
              } | null
            }>
            allPositions: {
              __typename?: 'positions_aggregate'
              aggregate?: {
                __typename?: 'positions_aggregate_fields'
                count: number
                sum?: {
                  __typename?: 'positions_sum_fields'
                  shares?: any | null
                } | null
              } | null
            }
          }>
        } | null
        counter_term?: {
          __typename?: 'terms'
          vaults: Array<{
            __typename?: 'vaults'
            total_shares: any
            position_count: number
            current_share_price: any
            positions: Array<{
              __typename?: 'positions'
              account_id: string
              shares: any
              account?: {
                __typename?: 'accounts'
                id: string
                label: string
                image?: string | null
              } | null
              vault?: {
                __typename?: 'vaults'
                term_id: any
                total_shares: any
                current_share_price: any
              } | null
            }>
            allPositions: {
              __typename?: 'positions_aggregate'
              aggregate?: {
                __typename?: 'positions_aggregate_fields'
                count: number
                sum?: {
                  __typename?: 'positions_sum_fields'
                  shares?: any | null
                } | null
              } | null
            }
          }>
        } | null
        subject: {
          __typename?: 'atoms'
          data?: string | null
          term_id: any
          image?: string | null
          label?: string | null
          emoji?: string | null
          type: any
          creator: {
            __typename?: 'accounts'
            label: string
            image?: string | null
            id: string
            atom_id?: any | null
            type: any
          }
          value?: {
            __typename?: 'atom_values'
            person?: {
              __typename?: 'persons'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            thing?: {
              __typename?: 'things'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            organization?: {
              __typename?: 'organizations'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
          } | null
        }
        predicate: {
          __typename?: 'atoms'
          data?: string | null
          term_id: any
          image?: string | null
          label?: string | null
          emoji?: string | null
          type: any
          creator: {
            __typename?: 'accounts'
            label: string
            image?: string | null
            id: string
            atom_id?: any | null
            type: any
          }
          value?: {
            __typename?: 'atom_values'
            person?: {
              __typename?: 'persons'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            thing?: {
              __typename?: 'things'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            organization?: {
              __typename?: 'organizations'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
          } | null
        }
        object: {
          __typename?: 'atoms'
          data?: string | null
          term_id: any
          image?: string | null
          label?: string | null
          emoji?: string | null
          type: any
          creator: {
            __typename?: 'accounts'
            label: string
            image?: string | null
            id: string
            atom_id?: any | null
            type: any
          }
          value?: {
            __typename?: 'atom_values'
            person?: {
              __typename?: 'persons'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            thing?: {
              __typename?: 'things'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            organization?: {
              __typename?: 'organizations'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
          } | null
        }
      } | null
      deposit?: {
        __typename?: 'deposits'
        term_id: any
        curve_id: any
        sender_assets_after_total_fees: any
        shares_for_receiver: any
        receiver: { __typename?: 'accounts'; id: string }
        sender?: { __typename?: 'accounts'; id: string } | null
      } | null
      redemption?: {
        __typename?: 'redemptions'
        term_id: any
        curve_id: any
        receiver_id: string
        shares_redeemed_by_sender: any
        assets_for_receiver: any
      } | null
    }>
  }
}

export type GetEventsCountQueryVariables = Exact<{
  where?: InputMaybe<Events_Bool_Exp>
}>

export type GetEventsCountQuery = {
  __typename?: 'query_root'
  events_aggregate: {
    __typename?: 'events_aggregate'
    aggregate?: { __typename?: 'events_aggregate_fields'; count: number } | null
  }
}

export type GetEventsDataQueryVariables = Exact<{
  where?: InputMaybe<Events_Bool_Exp>
}>

export type GetEventsDataQuery = {
  __typename?: 'query_root'
  events_aggregate: {
    __typename?: 'events_aggregate'
    aggregate?: {
      __typename?: 'events_aggregate_fields'
      count: number
      max?: {
        __typename?: 'events_max_fields'
        block_timestamp?: any | null
        block_number?: any | null
      } | null
      min?: {
        __typename?: 'events_min_fields'
        block_timestamp?: any | null
        block_number?: any | null
      } | null
      avg?: {
        __typename?: 'events_avg_fields'
        block_number?: number | null
      } | null
    } | null
  }
}

export type GetDebugEventsQueryVariables = Exact<{
  addresses?: InputMaybe<
    Array<Scalars['String']['input']> | Scalars['String']['input']
  >
}>

export type GetDebugEventsQuery = {
  __typename?: 'query_root'
  debug_events: Array<{
    __typename?: 'events'
    id: string
    atom?: {
      __typename?: 'atoms'
      term: {
        __typename?: 'terms'
        positions: Array<{
          __typename?: 'positions'
          account_id: string
          shares: any
        }>
      }
    } | null
  }>
}

export type GetFollowingPositionsQueryVariables = Exact<{
  subjectId: Scalars['numeric']['input']
  predicateId: Scalars['numeric']['input']
  address: Scalars['String']['input']
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  positionsOrderBy?: InputMaybe<Array<Positions_Order_By> | Positions_Order_By>
}>

export type GetFollowingPositionsQuery = {
  __typename?: 'query_root'
  triples_aggregate: {
    __typename?: 'triples_aggregate'
    aggregate?: {
      __typename?: 'triples_aggregate_fields'
      count: number
    } | null
  }
  triples: Array<{
    __typename?: 'triples'
    term_id: any
    subject: {
      __typename?: 'atoms'
      term_id: any
      data?: string | null
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      wallet_id: string
      creator: {
        __typename?: 'accounts'
        id: string
        label: string
        image?: string | null
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    predicate: {
      __typename?: 'atoms'
      term_id: any
      data?: string | null
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      wallet_id: string
      creator: {
        __typename?: 'accounts'
        id: string
        label: string
        image?: string | null
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    object: {
      __typename?: 'atoms'
      term_id: any
      data?: string | null
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      wallet_id: string
      creator: {
        __typename?: 'accounts'
        id: string
        label: string
        image?: string | null
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        total_shares: any
        current_share_price: any
        positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          account_id: string
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
          } | null
        }>
      }>
    } | null
  }>
}

export type GetFollowerPositionsQueryVariables = Exact<{
  subjectId: Scalars['numeric']['input']
  predicateId: Scalars['numeric']['input']
  objectId: Scalars['numeric']['input']
  positionsLimit?: InputMaybe<Scalars['Int']['input']>
  positionsOffset?: InputMaybe<Scalars['Int']['input']>
  positionsOrderBy?: InputMaybe<Array<Positions_Order_By> | Positions_Order_By>
  positionsWhere?: InputMaybe<Positions_Bool_Exp>
}>

export type GetFollowerPositionsQuery = {
  __typename?: 'query_root'
  triples: Array<{
    __typename?: 'triples'
    term_id: any
    subject: {
      __typename?: 'atoms'
      term_id: any
      data?: string | null
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      wallet_id: string
      creator: {
        __typename?: 'accounts'
        id: string
        label: string
        image?: string | null
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    predicate: {
      __typename?: 'atoms'
      term_id: any
      data?: string | null
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      wallet_id: string
      creator: {
        __typename?: 'accounts'
        id: string
        label: string
        image?: string | null
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    object: {
      __typename?: 'atoms'
      term_id: any
      data?: string | null
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      wallet_id: string
      creator: {
        __typename?: 'accounts'
        id: string
        label: string
        image?: string | null
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        total_shares: any
        current_share_price: any
        positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
            image?: string | null
          } | null
        }>
      }>
    } | null
  }>
}

export type GetConnectionsQueryVariables = Exact<{
  subjectId: Scalars['numeric']['input']
  predicateId: Scalars['numeric']['input']
  objectId: Scalars['numeric']['input']
  addresses?: InputMaybe<
    Array<Scalars['String']['input']> | Scalars['String']['input']
  >
  positionsLimit?: InputMaybe<Scalars['Int']['input']>
  positionsOffset?: InputMaybe<Scalars['Int']['input']>
  positionsOrderBy?: InputMaybe<Array<Positions_Order_By> | Positions_Order_By>
  positionsWhere?: InputMaybe<Positions_Bool_Exp>
}>

export type GetConnectionsQuery = {
  __typename?: 'query_root'
  following_count: {
    __typename?: 'triples_aggregate'
    aggregate?: {
      __typename?: 'triples_aggregate_fields'
      count: number
    } | null
  }
  following: Array<{
    __typename?: 'triples'
    term_id: any
    subject: { __typename?: 'atoms'; term_id: any; label?: string | null }
    predicate: { __typename?: 'atoms'; term_id: any; label?: string | null }
    object: { __typename?: 'atoms'; term_id: any; label?: string | null }
    term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        term_id: any
        total_shares: any
        current_share_price: any
        positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
          } | null
        }>
      }>
    } | null
  }>
  followers_count: {
    __typename?: 'triples_aggregate'
    aggregate?: {
      __typename?: 'triples_aggregate_fields'
      count: number
    } | null
  }
  followers: Array<{
    __typename?: 'triples'
    term_id: any
    subject: { __typename?: 'atoms'; term_id: any; label?: string | null }
    predicate: { __typename?: 'atoms'; term_id: any; label?: string | null }
    object: { __typename?: 'atoms'; term_id: any; label?: string | null }
    term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        term_id: any
        total_shares: any
        current_share_price: any
        positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
          } | null
        }>
      }>
    } | null
  }>
}

export type GetConnectionsCountQueryVariables = Exact<{
  subjectId: Scalars['numeric']['input']
  predicateId: Scalars['numeric']['input']
  objectId: Scalars['numeric']['input']
  address: Scalars['String']['input']
}>

export type GetConnectionsCountQuery = {
  __typename?: 'query_root'
  following_count: {
    __typename?: 'triples_aggregate'
    aggregate?: {
      __typename?: 'triples_aggregate_fields'
      count: number
    } | null
  }
  followers_count: Array<{
    __typename?: 'triples'
    term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
      }>
    } | null
  }>
}

export type GetFollowingsFromAddressQueryVariables = Exact<{
  address: Scalars['String']['input']
}>

export type GetFollowingsFromAddressQuery = {
  __typename?: 'query_root'
  following: Array<{
    __typename?: 'accounts'
    id: string
    image?: string | null
    label: string
    type: any
    triples: Array<{
      __typename?: 'triples'
      term_id: any
      counter_term_id: any
      creator?: {
        __typename?: 'accounts'
        label: string
        id: string
        type: any
      } | null
      subject: {
        __typename?: 'atoms'
        term_id: any
        label?: string | null
        image?: string | null
        type: any
      }
      predicate: {
        __typename?: 'atoms'
        term_id: any
        label?: string | null
        image?: string | null
        type: any
      }
      object: {
        __typename?: 'atoms'
        term_id: any
        label?: string | null
        image?: string | null
        type: any
      }
      term?: {
        __typename?: 'terms'
        id: any
        positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          shares: any
          account?: { __typename?: 'accounts'; id: string } | null
        }>
      } | null
      counter_term?: {
        __typename?: 'terms'
        id: any
        positions_aggregate: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          shares: any
          account?: { __typename?: 'accounts'; id: string } | null
        }>
      } | null
    }>
    positions_aggregate: {
      __typename?: 'positions_aggregate'
      aggregate?: {
        __typename?: 'positions_aggregate_fields'
        count: number
      } | null
      nodes: Array<{
        __typename?: 'positions'
        shares: any
        term: {
          __typename?: 'terms'
          id: any
          triple?: {
            __typename?: 'triples'
            term_id: any
            object: {
              __typename?: 'atoms'
              term_id: any
              type: any
              image?: string | null
              label?: string | null
            }
            predicate: {
              __typename?: 'atoms'
              term_id: any
              type: any
              image?: string | null
              label?: string | null
            }
            subject: {
              __typename?: 'atoms'
              term_id: any
              type: any
              image?: string | null
              label?: string | null
            }
            counter_term?: {
              __typename?: 'terms'
              id: any
              positions_aggregate: {
                __typename?: 'positions_aggregate'
                aggregate?: {
                  __typename?: 'positions_aggregate_fields'
                  count: number
                } | null
              }
              positions: Array<{
                __typename?: 'positions'
                shares: any
                account?: { __typename?: 'accounts'; id: string } | null
              }>
            } | null
            term?: {
              __typename?: 'terms'
              id: any
              positions_aggregate: {
                __typename?: 'positions_aggregate'
                aggregate?: {
                  __typename?: 'positions_aggregate_fields'
                  count: number
                } | null
              }
              positions: Array<{
                __typename?: 'positions'
                shares: any
                account?: { __typename?: 'accounts'; id: string } | null
              }>
            } | null
          } | null
        }
      }>
    }
  }>
}

export type GetFollowersFromAddressQueryVariables = Exact<{
  address: Scalars['String']['input']
}>

export type GetFollowersFromAddressQuery = {
  __typename?: 'query_root'
  triples: Array<{
    __typename?: 'triples'
    term_id: any
    predicate: { __typename?: 'atoms'; label?: string | null }
    object: { __typename?: 'atoms'; term_id: any }
    term?: {
      __typename?: 'terms'
      id: any
      positions: Array<{
        __typename?: 'positions'
        shares: any
        account?: {
          __typename?: 'accounts'
          id: string
          label: string
          image?: string | null
        } | null
      }>
    } | null
    counter_term?: {
      __typename?: 'terms'
      id: any
      positions: Array<{
        __typename?: 'positions'
        shares: any
        account?: {
          __typename?: 'accounts'
          id: string
          label: string
          image?: string | null
        } | null
      }>
    } | null
  }>
}

export type GetFollowingsTriplesQueryVariables = Exact<{
  accountId: Scalars['String']['input']
}>

export type GetFollowingsTriplesQuery = {
  __typename?: 'query_root'
  triples: Array<{
    __typename?: 'triples'
    term_id: any
    object: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      type: any
      image?: string | null
      accounts: Array<{ __typename?: 'accounts'; id: string }>
    }
  }>
}

export type GetAccountByIdQueryVariables = Exact<{
  id: Scalars['String']['input']
}>

export type GetAccountByIdQuery = {
  __typename?: 'query_root'
  account?: {
    __typename?: 'accounts'
    id: string
    label: string
    image?: string | null
  } | null
}

export type GetPersonsByIdentifierQueryVariables = Exact<{
  identifier: Scalars['String']['input']
}>

export type GetPersonsByIdentifierQuery = {
  __typename?: 'query_root'
  persons: Array<{
    __typename?: 'persons'
    id: any
    name?: string | null
    image?: string | null
    description?: string | null
    email?: string | null
    url?: string | null
    identifier?: string | null
  }>
}

export type GetListsQueryVariables = Exact<{
  where?: InputMaybe<Predicate_Objects_Bool_Exp>
}>

export type GetListsQuery = {
  __typename?: 'query_root'
  predicate_objects_aggregate: {
    __typename?: 'predicate_objects_aggregate'
    aggregate?: {
      __typename?: 'predicate_objects_aggregate_fields'
      count: number
    } | null
  }
  predicate_objects: Array<{
    __typename?: 'predicate_objects'
    id: string
    claim_count: number
    triple_count: number
    object: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      image?: string | null
    }
  }>
}

export type GetListItemsQueryVariables = Exact<{
  predicateId?: InputMaybe<Scalars['numeric']['input']>
  objectId?: InputMaybe<Scalars['numeric']['input']>
}>

export type GetListItemsQuery = {
  __typename?: 'query_root'
  triples_aggregate: {
    __typename?: 'triples_aggregate'
    aggregate?: {
      __typename?: 'triples_aggregate_fields'
      count: number
    } | null
    nodes: Array<{
      __typename?: 'triples'
      term_id: any
      counter_term_id: any
      term?: {
        __typename?: 'terms'
        vaults: Array<{
          __typename?: 'vaults'
          positions: Array<{
            __typename?: 'positions'
            id: string
            shares: any
            term_id: any
            curve_id: any
            account?: {
              __typename?: 'accounts'
              id: string
              label: string
              image?: string | null
            } | null
            vault?: {
              __typename?: 'vaults'
              term_id: any
              term: {
                __typename?: 'terms'
                atom?: {
                  __typename?: 'atoms'
                  term_id: any
                  label?: string | null
                  image?: string | null
                } | null
                triple?: {
                  __typename?: 'triples'
                  term_id: any
                  term?: {
                    __typename?: 'terms'
                    vaults: Array<{
                      __typename?: 'vaults'
                      term_id: any
                      position_count: number
                      positions_aggregate: {
                        __typename?: 'positions_aggregate'
                        aggregate?: {
                          __typename?: 'positions_aggregate_fields'
                          sum?: {
                            __typename?: 'positions_sum_fields'
                            shares?: any | null
                          } | null
                        } | null
                      }
                    }>
                  } | null
                  counter_term?: {
                    __typename?: 'terms'
                    vaults: Array<{
                      __typename?: 'vaults'
                      term_id: any
                      position_count: number
                      positions_aggregate: {
                        __typename?: 'positions_aggregate'
                        aggregate?: {
                          __typename?: 'positions_aggregate_fields'
                          sum?: {
                            __typename?: 'positions_sum_fields'
                            shares?: any | null
                          } | null
                        } | null
                      }
                    }>
                  } | null
                  subject: {
                    __typename?: 'atoms'
                    data?: string | null
                    term_id: any
                    label?: string | null
                    image?: string | null
                    emoji?: string | null
                    type: any
                    creator: {
                      __typename?: 'accounts'
                      label: string
                      image?: string | null
                      id: string
                      atom_id?: any | null
                      type: any
                    }
                    value?: {
                      __typename?: 'atom_values'
                      person?: {
                        __typename?: 'persons'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      thing?: {
                        __typename?: 'things'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      organization?: {
                        __typename?: 'organizations'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                    } | null
                  }
                  predicate: {
                    __typename?: 'atoms'
                    data?: string | null
                    term_id: any
                    label?: string | null
                    image?: string | null
                    emoji?: string | null
                    type: any
                    creator: {
                      __typename?: 'accounts'
                      label: string
                      image?: string | null
                      id: string
                      atom_id?: any | null
                      type: any
                    }
                    value?: {
                      __typename?: 'atom_values'
                      person?: {
                        __typename?: 'persons'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      thing?: {
                        __typename?: 'things'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      organization?: {
                        __typename?: 'organizations'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                    } | null
                  }
                  object: {
                    __typename?: 'atoms'
                    data?: string | null
                    term_id: any
                    label?: string | null
                    image?: string | null
                    emoji?: string | null
                    type: any
                    creator: {
                      __typename?: 'accounts'
                      label: string
                      image?: string | null
                      id: string
                      atom_id?: any | null
                      type: any
                    }
                    value?: {
                      __typename?: 'atom_values'
                      person?: {
                        __typename?: 'persons'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      thing?: {
                        __typename?: 'things'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      organization?: {
                        __typename?: 'organizations'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                    } | null
                  }
                } | null
              }
            } | null
          }>
        }>
      } | null
      counter_term?: {
        __typename?: 'terms'
        vaults: Array<{
          __typename?: 'vaults'
          positions: Array<{
            __typename?: 'positions'
            id: string
            shares: any
            term_id: any
            curve_id: any
            account?: {
              __typename?: 'accounts'
              id: string
              label: string
              image?: string | null
            } | null
            vault?: {
              __typename?: 'vaults'
              term_id: any
              term: {
                __typename?: 'terms'
                atom?: {
                  __typename?: 'atoms'
                  term_id: any
                  label?: string | null
                  image?: string | null
                } | null
                triple?: {
                  __typename?: 'triples'
                  term_id: any
                  term?: {
                    __typename?: 'terms'
                    vaults: Array<{
                      __typename?: 'vaults'
                      term_id: any
                      position_count: number
                      positions_aggregate: {
                        __typename?: 'positions_aggregate'
                        aggregate?: {
                          __typename?: 'positions_aggregate_fields'
                          sum?: {
                            __typename?: 'positions_sum_fields'
                            shares?: any | null
                          } | null
                        } | null
                      }
                    }>
                  } | null
                  counter_term?: {
                    __typename?: 'terms'
                    vaults: Array<{
                      __typename?: 'vaults'
                      term_id: any
                      position_count: number
                      positions_aggregate: {
                        __typename?: 'positions_aggregate'
                        aggregate?: {
                          __typename?: 'positions_aggregate_fields'
                          sum?: {
                            __typename?: 'positions_sum_fields'
                            shares?: any | null
                          } | null
                        } | null
                      }
                    }>
                  } | null
                  subject: {
                    __typename?: 'atoms'
                    data?: string | null
                    term_id: any
                    label?: string | null
                    image?: string | null
                    emoji?: string | null
                    type: any
                    creator: {
                      __typename?: 'accounts'
                      label: string
                      image?: string | null
                      id: string
                      atom_id?: any | null
                      type: any
                    }
                    value?: {
                      __typename?: 'atom_values'
                      person?: {
                        __typename?: 'persons'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      thing?: {
                        __typename?: 'things'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      organization?: {
                        __typename?: 'organizations'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                    } | null
                  }
                  predicate: {
                    __typename?: 'atoms'
                    data?: string | null
                    term_id: any
                    label?: string | null
                    image?: string | null
                    emoji?: string | null
                    type: any
                    creator: {
                      __typename?: 'accounts'
                      label: string
                      image?: string | null
                      id: string
                      atom_id?: any | null
                      type: any
                    }
                    value?: {
                      __typename?: 'atom_values'
                      person?: {
                        __typename?: 'persons'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      thing?: {
                        __typename?: 'things'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      organization?: {
                        __typename?: 'organizations'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                    } | null
                  }
                  object: {
                    __typename?: 'atoms'
                    data?: string | null
                    term_id: any
                    label?: string | null
                    image?: string | null
                    emoji?: string | null
                    type: any
                    creator: {
                      __typename?: 'accounts'
                      label: string
                      image?: string | null
                      id: string
                      atom_id?: any | null
                      type: any
                    }
                    value?: {
                      __typename?: 'atom_values'
                      person?: {
                        __typename?: 'persons'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      thing?: {
                        __typename?: 'things'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      organization?: {
                        __typename?: 'organizations'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                    } | null
                  }
                } | null
              }
            } | null
          }>
        }>
      } | null
    }>
  }
}

export type GetListDetailsQueryVariables = Exact<{
  globalWhere?: InputMaybe<Triples_Bool_Exp>
  tagPredicateId?: InputMaybe<Scalars['numeric']['input']>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Triples_Order_By> | Triples_Order_By>
}>

export type GetListDetailsQuery = {
  __typename?: 'query_root'
  globalTriplesAggregate: {
    __typename?: 'triples_aggregate'
    aggregate?: {
      __typename?: 'triples_aggregate_fields'
      count: number
    } | null
  }
  globalTriples: Array<{
    __typename?: 'triples'
    term_id: any
    counter_term_id: any
    subject: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      wallet_id: string
      image?: string | null
      type: any
      tags: {
        __typename?: 'triples_aggregate'
        nodes: Array<{
          __typename?: 'triples'
          object: {
            __typename?: 'atoms'
            label?: string | null
            term_id: any
            taggedIdentities: {
              __typename?: 'triples_aggregate'
              nodes: Array<{
                __typename?: 'triples'
                term_id: any
                subject: {
                  __typename?: 'atoms'
                  label?: string | null
                  term_id: any
                }
              }>
              aggregate?: {
                __typename?: 'triples_aggregate_fields'
                count: number
              } | null
            }
          }
        }>
        aggregate?: {
          __typename?: 'triples_aggregate_fields'
          count: number
        } | null
      }
    }
    object: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      wallet_id: string
      image?: string | null
      type: any
    }
    predicate: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      wallet_id: string
      image?: string | null
      type: any
    }
    term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        current_share_price: any
        position_count: number
        total_shares: any
      }>
    } | null
    counter_term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        current_share_price: any
        position_count: number
        total_shares: any
      }>
    } | null
  }>
}

export type GetListDetailsWithPositionQueryVariables = Exact<{
  globalWhere?: InputMaybe<Triples_Bool_Exp>
  tagPredicateId?: InputMaybe<Scalars['numeric']['input']>
  address?: InputMaybe<Scalars['String']['input']>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Triples_Order_By> | Triples_Order_By>
}>

export type GetListDetailsWithPositionQuery = {
  __typename?: 'query_root'
  globalTriplesAggregate: {
    __typename?: 'triples_aggregate'
    aggregate?: {
      __typename?: 'triples_aggregate_fields'
      count: number
    } | null
  }
  globalTriples: Array<{
    __typename?: 'triples'
    term_id: any
    counter_term_id: any
    subject: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      wallet_id: string
      image?: string | null
      type: any
      tags: {
        __typename?: 'triples_aggregate'
        nodes: Array<{
          __typename?: 'triples'
          object: {
            __typename?: 'atoms'
            label?: string | null
            term_id: any
            taggedIdentities: {
              __typename?: 'triples_aggregate'
              nodes: Array<{
                __typename?: 'triples'
                term_id: any
                subject: {
                  __typename?: 'atoms'
                  label?: string | null
                  term_id: any
                }
              }>
              aggregate?: {
                __typename?: 'triples_aggregate_fields'
                count: number
              } | null
            }
          }
        }>
        aggregate?: {
          __typename?: 'triples_aggregate_fields'
          count: number
        } | null
      }
    }
    object: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      wallet_id: string
      image?: string | null
      type: any
    }
    predicate: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      wallet_id: string
      image?: string | null
      type: any
    }
    term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        current_share_price: any
        position_count: number
        total_shares: any
      }>
      positions: Array<{
        __typename?: 'positions'
        shares: any
        account?: {
          __typename?: 'accounts'
          id: string
          label: string
          image?: string | null
        } | null
      }>
    } | null
    counter_term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        current_share_price: any
        position_count: number
        total_shares: any
      }>
      positions: Array<{
        __typename?: 'positions'
        shares: any
        account?: {
          __typename?: 'accounts'
          id: string
          label: string
          image?: string | null
        } | null
      }>
    } | null
  }>
}

export type GetListDetailsWithUserQueryVariables = Exact<{
  globalWhere?: InputMaybe<Triples_Bool_Exp>
  userWhere?: InputMaybe<Triples_Bool_Exp>
  tagPredicateId?: InputMaybe<Scalars['numeric']['input']>
  address?: InputMaybe<Scalars['String']['input']>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Triples_Order_By> | Triples_Order_By>
}>

export type GetListDetailsWithUserQuery = {
  __typename?: 'query_root'
  globalTriplesAggregate: {
    __typename?: 'triples_aggregate'
    aggregate?: {
      __typename?: 'triples_aggregate_fields'
      count: number
    } | null
  }
  globalTriples: Array<{
    __typename?: 'triples'
    term_id: any
    counter_term_id: any
    subject: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      wallet_id: string
      image?: string | null
      type: any
      tags: {
        __typename?: 'triples_aggregate'
        nodes: Array<{
          __typename?: 'triples'
          object: {
            __typename?: 'atoms'
            label?: string | null
            term_id: any
            taggedIdentities: {
              __typename?: 'triples_aggregate'
              nodes: Array<{
                __typename?: 'triples'
                term_id: any
                subject: {
                  __typename?: 'atoms'
                  label?: string | null
                  term_id: any
                }
              }>
              aggregate?: {
                __typename?: 'triples_aggregate_fields'
                count: number
              } | null
            }
          }
        }>
        aggregate?: {
          __typename?: 'triples_aggregate_fields'
          count: number
        } | null
      }
    }
    object: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      wallet_id: string
      image?: string | null
      type: any
    }
    predicate: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      wallet_id: string
      image?: string | null
      type: any
    }
    term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        current_share_price: any
        position_count: number
        total_shares: any
      }>
      positions: Array<{
        __typename?: 'positions'
        shares: any
        account?: {
          __typename?: 'accounts'
          id: string
          label: string
          image?: string | null
        } | null
      }>
    } | null
    counter_term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        current_share_price: any
        position_count: number
        total_shares: any
      }>
      positions: Array<{
        __typename?: 'positions'
        shares: any
        account?: {
          __typename?: 'accounts'
          id: string
          label: string
          image?: string | null
        } | null
      }>
    } | null
  }>
  userTriplesAggregate: {
    __typename?: 'triples_aggregate'
    aggregate?: {
      __typename?: 'triples_aggregate_fields'
      count: number
    } | null
  }
  userTriples: Array<{
    __typename?: 'triples'
    term_id: any
    counter_term_id: any
    subject: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      wallet_id: string
      image?: string | null
      type: any
      tags: {
        __typename?: 'triples_aggregate'
        nodes: Array<{
          __typename?: 'triples'
          object: {
            __typename?: 'atoms'
            label?: string | null
            term_id: any
            taggedIdentities: {
              __typename?: 'triples_aggregate'
              nodes: Array<{
                __typename?: 'triples'
                term_id: any
                subject: {
                  __typename?: 'atoms'
                  label?: string | null
                  term_id: any
                }
              }>
              aggregate?: {
                __typename?: 'triples_aggregate_fields'
                count: number
              } | null
            }
          }
        }>
        aggregate?: {
          __typename?: 'triples_aggregate_fields'
          count: number
        } | null
      }
    }
    object: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      wallet_id: string
      image?: string | null
      type: any
    }
    predicate: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      wallet_id: string
      image?: string | null
      type: any
    }
    term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        current_share_price: any
        position_count: number
        total_shares: any
      }>
      positions: Array<{
        __typename?: 'positions'
        shares: any
        account?: {
          __typename?: 'accounts'
          id: string
          label: string
          image?: string | null
        } | null
      }>
    } | null
    counter_term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        current_share_price: any
        position_count: number
        total_shares: any
      }>
      positions: Array<{
        __typename?: 'positions'
        shares: any
        account?: {
          __typename?: 'accounts'
          id: string
          label: string
          image?: string | null
        } | null
      }>
    } | null
  }>
}

export type GetFeeTransfersQueryVariables = Exact<{
  address: Scalars['String']['input']
  cutoff_timestamp?: InputMaybe<Scalars['bigint']['input']>
}>

export type GetFeeTransfersQuery = {
  __typename?: 'query_root'
  before_cutoff: {
    __typename?: 'fee_transfers_aggregate'
    aggregate?: {
      __typename?: 'fee_transfers_aggregate_fields'
      sum?: {
        __typename?: 'fee_transfers_sum_fields'
        amount?: any | null
      } | null
    } | null
  }
  after_cutoff: {
    __typename?: 'fee_transfers_aggregate'
    aggregate?: {
      __typename?: 'fee_transfers_aggregate_fields'
      sum?: {
        __typename?: 'fee_transfers_sum_fields'
        amount?: any | null
      } | null
    } | null
  }
}

export type GetPositionsQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Positions_Order_By> | Positions_Order_By>
  where?: InputMaybe<Positions_Bool_Exp>
}>

export type GetPositionsQuery = {
  __typename?: 'query_root'
  total: {
    __typename?: 'positions_aggregate'
    aggregate?: {
      __typename?: 'positions_aggregate_fields'
      count: number
      sum?: { __typename?: 'positions_sum_fields'; shares?: any | null } | null
    } | null
  }
  positions: Array<{
    __typename?: 'positions'
    id: string
    shares: any
    term_id: any
    curve_id: any
    account?: {
      __typename?: 'accounts'
      id: string
      label: string
      image?: string | null
    } | null
    vault?: {
      __typename?: 'vaults'
      term_id: any
      term: {
        __typename?: 'terms'
        atom?: {
          __typename?: 'atoms'
          term_id: any
          label?: string | null
          image?: string | null
        } | null
        triple?: {
          __typename?: 'triples'
          term_id: any
          term?: {
            __typename?: 'terms'
            vaults: Array<{
              __typename?: 'vaults'
              term_id: any
              position_count: number
              positions_aggregate: {
                __typename?: 'positions_aggregate'
                aggregate?: {
                  __typename?: 'positions_aggregate_fields'
                  sum?: {
                    __typename?: 'positions_sum_fields'
                    shares?: any | null
                  } | null
                } | null
              }
            }>
          } | null
          counter_term?: {
            __typename?: 'terms'
            vaults: Array<{
              __typename?: 'vaults'
              term_id: any
              position_count: number
              positions_aggregate: {
                __typename?: 'positions_aggregate'
                aggregate?: {
                  __typename?: 'positions_aggregate_fields'
                  sum?: {
                    __typename?: 'positions_sum_fields'
                    shares?: any | null
                  } | null
                } | null
              }
            }>
          } | null
          subject: {
            __typename?: 'atoms'
            data?: string | null
            term_id: any
            label?: string | null
            image?: string | null
            emoji?: string | null
            type: any
            creator: {
              __typename?: 'accounts'
              label: string
              image?: string | null
              id: string
              atom_id?: any | null
              type: any
            }
            value?: {
              __typename?: 'atom_values'
              person?: {
                __typename?: 'persons'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              thing?: {
                __typename?: 'things'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              organization?: {
                __typename?: 'organizations'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
            } | null
          }
          predicate: {
            __typename?: 'atoms'
            data?: string | null
            term_id: any
            label?: string | null
            image?: string | null
            emoji?: string | null
            type: any
            creator: {
              __typename?: 'accounts'
              label: string
              image?: string | null
              id: string
              atom_id?: any | null
              type: any
            }
            value?: {
              __typename?: 'atom_values'
              person?: {
                __typename?: 'persons'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              thing?: {
                __typename?: 'things'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              organization?: {
                __typename?: 'organizations'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
            } | null
          }
          object: {
            __typename?: 'atoms'
            data?: string | null
            term_id: any
            label?: string | null
            image?: string | null
            emoji?: string | null
            type: any
            creator: {
              __typename?: 'accounts'
              label: string
              image?: string | null
              id: string
              atom_id?: any | null
              type: any
            }
            value?: {
              __typename?: 'atom_values'
              person?: {
                __typename?: 'persons'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              thing?: {
                __typename?: 'things'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              organization?: {
                __typename?: 'organizations'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
            } | null
          }
        } | null
      }
    } | null
  }>
}

export type GetTriplePositionsByAddressQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Positions_Order_By> | Positions_Order_By>
  where?: InputMaybe<Positions_Bool_Exp>
  address: Scalars['String']['input']
}>

export type GetTriplePositionsByAddressQuery = {
  __typename?: 'query_root'
  total: {
    __typename?: 'positions_aggregate'
    aggregate?: {
      __typename?: 'positions_aggregate_fields'
      count: number
      sum?: { __typename?: 'positions_sum_fields'; shares?: any | null } | null
    } | null
  }
  positions: Array<{
    __typename?: 'positions'
    id: string
    shares: any
    term_id: any
    curve_id: any
    vault?: {
      __typename?: 'vaults'
      term_id: any
      term: {
        __typename?: 'terms'
        triple?: {
          __typename?: 'triples'
          term_id: any
          term?: {
            __typename?: 'terms'
            positions: Array<{
              __typename?: 'positions'
              shares: any
              account?: {
                __typename?: 'accounts'
                id: string
                label: string
                image?: string | null
              } | null
            }>
            vaults: Array<{
              __typename?: 'vaults'
              term_id: any
              position_count: number
              positions_aggregate: {
                __typename?: 'positions_aggregate'
                aggregate?: {
                  __typename?: 'positions_aggregate_fields'
                  sum?: {
                    __typename?: 'positions_sum_fields'
                    shares?: any | null
                  } | null
                } | null
              }
            }>
          } | null
          counter_term?: {
            __typename?: 'terms'
            positions: Array<{
              __typename?: 'positions'
              shares: any
              account?: {
                __typename?: 'accounts'
                id: string
                label: string
                image?: string | null
              } | null
            }>
            vaults: Array<{
              __typename?: 'vaults'
              term_id: any
              position_count: number
              positions_aggregate: {
                __typename?: 'positions_aggregate'
                aggregate?: {
                  __typename?: 'positions_aggregate_fields'
                  sum?: {
                    __typename?: 'positions_sum_fields'
                    shares?: any | null
                  } | null
                } | null
              }
            }>
          } | null
          subject: {
            __typename?: 'atoms'
            data?: string | null
            term_id: any
            label?: string | null
            image?: string | null
            emoji?: string | null
            type: any
            creator: {
              __typename?: 'accounts'
              label: string
              image?: string | null
              id: string
              atom_id?: any | null
              type: any
            }
            value?: {
              __typename?: 'atom_values'
              person?: {
                __typename?: 'persons'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              thing?: {
                __typename?: 'things'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              organization?: {
                __typename?: 'organizations'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
            } | null
          }
          predicate: {
            __typename?: 'atoms'
            data?: string | null
            term_id: any
            label?: string | null
            image?: string | null
            emoji?: string | null
            type: any
            creator: {
              __typename?: 'accounts'
              label: string
              image?: string | null
              id: string
              atom_id?: any | null
              type: any
            }
            value?: {
              __typename?: 'atom_values'
              person?: {
                __typename?: 'persons'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              thing?: {
                __typename?: 'things'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              organization?: {
                __typename?: 'organizations'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
            } | null
          }
          object: {
            __typename?: 'atoms'
            data?: string | null
            term_id: any
            label?: string | null
            image?: string | null
            emoji?: string | null
            type: any
            creator: {
              __typename?: 'accounts'
              label: string
              image?: string | null
              id: string
              atom_id?: any | null
              type: any
            }
            value?: {
              __typename?: 'atom_values'
              person?: {
                __typename?: 'persons'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              thing?: {
                __typename?: 'things'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              organization?: {
                __typename?: 'organizations'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
            } | null
          }
        } | null
        atom?: {
          __typename?: 'atoms'
          term_id: any
          label?: string | null
          image?: string | null
        } | null
      }
    } | null
    account?: {
      __typename?: 'accounts'
      id: string
      label: string
      image?: string | null
    } | null
  }>
}

export type GetPositionsWithAggregatesQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Positions_Order_By> | Positions_Order_By>
  where?: InputMaybe<Positions_Bool_Exp>
}>

export type GetPositionsWithAggregatesQuery = {
  __typename?: 'query_root'
  positions_aggregate: {
    __typename?: 'positions_aggregate'
    aggregate?: {
      __typename?: 'positions_aggregate_fields'
      count: number
    } | null
    nodes: Array<{
      __typename?: 'positions'
      id: string
      shares: any
      term_id: any
      curve_id: any
      account?: {
        __typename?: 'accounts'
        id: string
        label: string
        image?: string | null
      } | null
      vault?: {
        __typename?: 'vaults'
        term_id: any
        term: {
          __typename?: 'terms'
          atom?: {
            __typename?: 'atoms'
            term_id: any
            label?: string | null
            image?: string | null
          } | null
          triple?: {
            __typename?: 'triples'
            term_id: any
            term?: {
              __typename?: 'terms'
              vaults: Array<{
                __typename?: 'vaults'
                term_id: any
                position_count: number
                positions_aggregate: {
                  __typename?: 'positions_aggregate'
                  aggregate?: {
                    __typename?: 'positions_aggregate_fields'
                    sum?: {
                      __typename?: 'positions_sum_fields'
                      shares?: any | null
                    } | null
                  } | null
                }
              }>
            } | null
            counter_term?: {
              __typename?: 'terms'
              vaults: Array<{
                __typename?: 'vaults'
                term_id: any
                position_count: number
                positions_aggregate: {
                  __typename?: 'positions_aggregate'
                  aggregate?: {
                    __typename?: 'positions_aggregate_fields'
                    sum?: {
                      __typename?: 'positions_sum_fields'
                      shares?: any | null
                    } | null
                  } | null
                }
              }>
            } | null
            subject: {
              __typename?: 'atoms'
              data?: string | null
              term_id: any
              label?: string | null
              image?: string | null
              emoji?: string | null
              type: any
              creator: {
                __typename?: 'accounts'
                label: string
                image?: string | null
                id: string
                atom_id?: any | null
                type: any
              }
              value?: {
                __typename?: 'atom_values'
                person?: {
                  __typename?: 'persons'
                  name?: string | null
                  image?: string | null
                  description?: string | null
                  url?: string | null
                } | null
                thing?: {
                  __typename?: 'things'
                  name?: string | null
                  image?: string | null
                  description?: string | null
                  url?: string | null
                } | null
                organization?: {
                  __typename?: 'organizations'
                  name?: string | null
                  image?: string | null
                  description?: string | null
                  url?: string | null
                } | null
              } | null
            }
            predicate: {
              __typename?: 'atoms'
              data?: string | null
              term_id: any
              label?: string | null
              image?: string | null
              emoji?: string | null
              type: any
              creator: {
                __typename?: 'accounts'
                label: string
                image?: string | null
                id: string
                atom_id?: any | null
                type: any
              }
              value?: {
                __typename?: 'atom_values'
                person?: {
                  __typename?: 'persons'
                  name?: string | null
                  image?: string | null
                  description?: string | null
                  url?: string | null
                } | null
                thing?: {
                  __typename?: 'things'
                  name?: string | null
                  image?: string | null
                  description?: string | null
                  url?: string | null
                } | null
                organization?: {
                  __typename?: 'organizations'
                  name?: string | null
                  image?: string | null
                  description?: string | null
                  url?: string | null
                } | null
              } | null
            }
            object: {
              __typename?: 'atoms'
              data?: string | null
              term_id: any
              label?: string | null
              image?: string | null
              emoji?: string | null
              type: any
              creator: {
                __typename?: 'accounts'
                label: string
                image?: string | null
                id: string
                atom_id?: any | null
                type: any
              }
              value?: {
                __typename?: 'atom_values'
                person?: {
                  __typename?: 'persons'
                  name?: string | null
                  image?: string | null
                  description?: string | null
                  url?: string | null
                } | null
                thing?: {
                  __typename?: 'things'
                  name?: string | null
                  image?: string | null
                  description?: string | null
                  url?: string | null
                } | null
                organization?: {
                  __typename?: 'organizations'
                  name?: string | null
                  image?: string | null
                  description?: string | null
                  url?: string | null
                } | null
              } | null
            }
          } | null
        }
      } | null
    }>
  }
}

export type GetPositionsCountQueryVariables = Exact<{
  where?: InputMaybe<Positions_Bool_Exp>
}>

export type GetPositionsCountQuery = {
  __typename?: 'query_root'
  positions_aggregate: {
    __typename?: 'positions_aggregate'
    total?: {
      __typename?: 'positions_aggregate_fields'
      count: number
      sum?: { __typename?: 'positions_sum_fields'; shares?: any | null } | null
    } | null
  }
}

export type GetPositionQueryVariables = Exact<{
  positionId: Scalars['String']['input']
}>

export type GetPositionQuery = {
  __typename?: 'query_root'
  position?: {
    __typename?: 'positions'
    id: string
    shares: any
    term_id: any
    curve_id: any
    account?: {
      __typename?: 'accounts'
      id: string
      label: string
      image?: string | null
    } | null
    vault?: {
      __typename?: 'vaults'
      term_id: any
      term: {
        __typename?: 'terms'
        atom?: {
          __typename?: 'atoms'
          term_id: any
          label?: string | null
          image?: string | null
        } | null
        triple?: {
          __typename?: 'triples'
          term_id: any
          term?: {
            __typename?: 'terms'
            vaults: Array<{
              __typename?: 'vaults'
              term_id: any
              position_count: number
              positions_aggregate: {
                __typename?: 'positions_aggregate'
                aggregate?: {
                  __typename?: 'positions_aggregate_fields'
                  sum?: {
                    __typename?: 'positions_sum_fields'
                    shares?: any | null
                  } | null
                } | null
              }
            }>
          } | null
          counter_term?: {
            __typename?: 'terms'
            vaults: Array<{
              __typename?: 'vaults'
              term_id: any
              position_count: number
              positions_aggregate: {
                __typename?: 'positions_aggregate'
                aggregate?: {
                  __typename?: 'positions_aggregate_fields'
                  sum?: {
                    __typename?: 'positions_sum_fields'
                    shares?: any | null
                  } | null
                } | null
              }
            }>
          } | null
          subject: {
            __typename?: 'atoms'
            data?: string | null
            term_id: any
            label?: string | null
            image?: string | null
            emoji?: string | null
            type: any
            creator: {
              __typename?: 'accounts'
              label: string
              image?: string | null
              id: string
              atom_id?: any | null
              type: any
            }
            value?: {
              __typename?: 'atom_values'
              person?: {
                __typename?: 'persons'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              thing?: {
                __typename?: 'things'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              organization?: {
                __typename?: 'organizations'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
            } | null
          }
          predicate: {
            __typename?: 'atoms'
            data?: string | null
            term_id: any
            label?: string | null
            image?: string | null
            emoji?: string | null
            type: any
            creator: {
              __typename?: 'accounts'
              label: string
              image?: string | null
              id: string
              atom_id?: any | null
              type: any
            }
            value?: {
              __typename?: 'atom_values'
              person?: {
                __typename?: 'persons'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              thing?: {
                __typename?: 'things'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              organization?: {
                __typename?: 'organizations'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
            } | null
          }
          object: {
            __typename?: 'atoms'
            data?: string | null
            term_id: any
            label?: string | null
            image?: string | null
            emoji?: string | null
            type: any
            creator: {
              __typename?: 'accounts'
              label: string
              image?: string | null
              id: string
              atom_id?: any | null
              type: any
            }
            value?: {
              __typename?: 'atom_values'
              person?: {
                __typename?: 'persons'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              thing?: {
                __typename?: 'things'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
              organization?: {
                __typename?: 'organizations'
                name?: string | null
                image?: string | null
                description?: string | null
                url?: string | null
              } | null
            } | null
          }
        } | null
      }
    } | null
  } | null
}

export type GetPositionsCountByTypeQueryVariables = Exact<{
  where?: InputMaybe<Positions_Bool_Exp>
}>

export type GetPositionsCountByTypeQuery = {
  __typename?: 'query_root'
  positions_aggregate: {
    __typename?: 'positions_aggregate'
    total?: {
      __typename?: 'positions_aggregate_fields'
      count: number
      sum?: { __typename?: 'positions_sum_fields'; shares?: any | null } | null
    } | null
  }
  positions: Array<{
    __typename?: 'positions'
    vault?: { __typename?: 'vaults'; term_id: any } | null
  }>
}

export type GetSignalsQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Signals_Order_By> | Signals_Order_By>
  addresses?: InputMaybe<
    Array<Scalars['String']['input']> | Scalars['String']['input']
  >
}>

export type GetSignalsQuery = {
  __typename?: 'query_root'
  total: {
    __typename?: 'events_aggregate'
    aggregate?: { __typename?: 'events_aggregate_fields'; count: number } | null
  }
  signals: Array<{
    __typename?: 'signals'
    id: string
    block_number: any
    block_timestamp: any
    transaction_hash: string
    atom_id?: any | null
    triple_id?: any | null
    deposit_id?: string | null
    redemption_id?: string | null
    term: {
      __typename?: 'terms'
      atom?: {
        __typename?: 'atoms'
        term_id: any
        data?: string | null
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        wallet_id: string
        term: {
          __typename?: 'terms'
          vaults: Array<{
            __typename?: 'vaults'
            total_shares: any
            position_count: number
            positions: Array<{
              __typename?: 'positions'
              account_id: string
              shares: any
              account?: {
                __typename?: 'accounts'
                id: string
                label: string
                image?: string | null
              } | null
            }>
          }>
        }
        creator: {
          __typename?: 'accounts'
          id: string
          label: string
          image?: string | null
        }
        value?: {
          __typename?: 'atom_values'
          person?: {
            __typename?: 'persons'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
          thing?: {
            __typename?: 'things'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
          organization?: {
            __typename?: 'organizations'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
        } | null
      } | null
      triple?: {
        __typename?: 'triples'
        term_id: any
        creator?: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        } | null
        subject: {
          __typename?: 'atoms'
          data?: string | null
          term_id: any
          image?: string | null
          label?: string | null
          emoji?: string | null
          type: any
          creator: {
            __typename?: 'accounts'
            label: string
            image?: string | null
            id: string
            atom_id?: any | null
            type: any
          }
          value?: {
            __typename?: 'atom_values'
            person?: {
              __typename?: 'persons'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            thing?: {
              __typename?: 'things'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            organization?: {
              __typename?: 'organizations'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
          } | null
        }
        predicate: {
          __typename?: 'atoms'
          data?: string | null
          term_id: any
          image?: string | null
          label?: string | null
          emoji?: string | null
          type: any
          creator: {
            __typename?: 'accounts'
            label: string
            image?: string | null
            id: string
            atom_id?: any | null
            type: any
          }
          value?: {
            __typename?: 'atom_values'
            person?: {
              __typename?: 'persons'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            thing?: {
              __typename?: 'things'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            organization?: {
              __typename?: 'organizations'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
          } | null
        }
        object: {
          __typename?: 'atoms'
          data?: string | null
          term_id: any
          image?: string | null
          label?: string | null
          emoji?: string | null
          type: any
          creator: {
            __typename?: 'accounts'
            label: string
            image?: string | null
            id: string
            atom_id?: any | null
            type: any
          }
          value?: {
            __typename?: 'atom_values'
            person?: {
              __typename?: 'persons'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            thing?: {
              __typename?: 'things'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
            organization?: {
              __typename?: 'organizations'
              name?: string | null
              image?: string | null
              description?: string | null
              url?: string | null
            } | null
          } | null
        }
        term?: {
          __typename?: 'terms'
          vaults: Array<{
            __typename?: 'vaults'
            total_shares: any
            position_count: number
            positions: Array<{
              __typename?: 'positions'
              account_id: string
              shares: any
              account?: {
                __typename?: 'accounts'
                id: string
                label: string
                image?: string | null
              } | null
            }>
          }>
        } | null
        counter_term?: {
          __typename?: 'terms'
          vaults: Array<{
            __typename?: 'vaults'
            total_shares: any
            position_count: number
            positions: Array<{
              __typename?: 'positions'
              account_id: string
              shares: any
              account?: {
                __typename?: 'accounts'
                id: string
                label: string
                image?: string | null
              } | null
            }>
          }>
        } | null
      } | null
    }
    deposit?: {
      __typename?: 'deposits'
      sender_id: string
      receiver_id: string
      shares_for_receiver: any
      sender_assets_after_total_fees: any
      sender?: {
        __typename?: 'accounts'
        id: string
        label: string
        image?: string | null
      } | null
      receiver: {
        __typename?: 'accounts'
        id: string
        label: string
        image?: string | null
      }
      vault?: {
        __typename?: 'vaults'
        total_shares: any
        position_count: number
        positions: Array<{
          __typename?: 'positions'
          account_id: string
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
            image?: string | null
          } | null
        }>
      } | null
    } | null
    redemption?: {
      __typename?: 'redemptions'
      sender_id: string
      receiver_id: string
      assets_for_receiver: any
      shares_redeemed_by_sender: any
      sender?: {
        __typename?: 'accounts'
        id: string
        label: string
        image?: string | null
      } | null
      receiver: {
        __typename?: 'accounts'
        id: string
        label: string
        image?: string | null
      }
    } | null
  }>
}

export type AtomMetadataMaybedeletethisFragment = {
  __typename?: 'atoms'
  term_id: any
  data?: string | null
  image?: string | null
  label?: string | null
  emoji?: string | null
  type: any
  wallet_id: string
  creator: {
    __typename?: 'accounts'
    id: string
    label: string
    image?: string | null
  }
  value?: {
    __typename?: 'atom_values'
    person?: {
      __typename?: 'persons'
      name?: string | null
      image?: string | null
      description?: string | null
      url?: string | null
    } | null
    thing?: {
      __typename?: 'things'
      name?: string | null
      image?: string | null
      description?: string | null
      url?: string | null
    } | null
    organization?: {
      __typename?: 'organizations'
      name?: string | null
      image?: string | null
      description?: string | null
      url?: string | null
    } | null
  } | null
}

export type GetStatsQueryVariables = Exact<{ [key: string]: never }>

export type GetStatsQuery = {
  __typename?: 'query_root'
  stats: Array<{
    __typename?: 'stats'
    contract_balance?: any | null
    total_accounts?: number | null
    total_fees?: any | null
    total_atoms?: number | null
    total_triples?: number | null
    total_positions?: number | null
    total_signals?: number | null
  }>
}

export type GetTagsQueryVariables = Exact<{
  subjectId: Scalars['numeric']['input']
  predicateId: Scalars['numeric']['input']
}>

export type GetTagsQuery = {
  __typename?: 'query_root'
  triples: Array<{
    __typename?: 'triples'
    term_id: any
    subject_id: any
    predicate_id: any
    object_id: any
    subject: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    predicate: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    object: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        total_shares: any
        current_share_price: any
        allPositions: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
          } | null
          vault?: {
            __typename?: 'vaults'
            term_id: any
            total_shares: any
            current_share_price: any
          } | null
        }>
      }>
    } | null
    counter_term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        total_shares: any
        current_share_price: any
        allPositions: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
          } | null
          vault?: {
            __typename?: 'vaults'
            term_id: any
            total_shares: any
            current_share_price: any
          } | null
        }>
      }>
    } | null
  }>
}

export type GetTagsCustomQueryVariables = Exact<{
  where?: InputMaybe<Triples_Bool_Exp>
}>

export type GetTagsCustomQuery = {
  __typename?: 'query_root'
  triples: Array<{
    __typename?: 'triples'
    term_id: any
    subject_id: any
    predicate_id: any
    object_id: any
    subject: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    predicate: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    object: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        total_shares: any
        current_share_price: any
        allPositions: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
          } | null
          vault?: {
            __typename?: 'vaults'
            term_id: any
            total_shares: any
            current_share_price: any
          } | null
        }>
      }>
    } | null
    counter_term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        total_shares: any
        current_share_price: any
        allPositions: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
          } | null
          vault?: {
            __typename?: 'vaults'
            term_id: any
            total_shares: any
            current_share_price: any
          } | null
        }>
      }>
    } | null
  }>
}

export type GetListsTagsQueryVariables = Exact<{
  where?: InputMaybe<Atoms_Bool_Exp>
  triplesWhere?: InputMaybe<Triples_Bool_Exp>
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Atoms_Order_By> | Atoms_Order_By>
}>

export type GetListsTagsQuery = {
  __typename?: 'query_root'
  atoms_aggregate: {
    __typename?: 'atoms_aggregate'
    aggregate?: { __typename?: 'atoms_aggregate_fields'; count: number } | null
  }
  atoms: Array<{
    __typename?: 'atoms'
    term_id: any
    label?: string | null
    image?: string | null
    value?: {
      __typename?: 'atom_values'
      thing?: { __typename?: 'things'; description?: string | null } | null
    } | null
    as_object_triples_aggregate: {
      __typename?: 'triples_aggregate'
      aggregate?: {
        __typename?: 'triples_aggregate_fields'
        count: number
      } | null
    }
    as_object_triples: Array<{
      __typename?: 'triples'
      subject: {
        __typename?: 'atoms'
        label?: string | null
        image?: string | null
      }
    }>
  }>
}

export type GetTaggedObjectsQueryVariables = Exact<{
  objectId: Scalars['numeric']['input']
  predicateId: Scalars['numeric']['input']
  address?: InputMaybe<Scalars['String']['input']>
}>

export type GetTaggedObjectsQuery = {
  __typename?: 'query_root'
  triples: Array<{
    __typename?: 'triples'
    term_id: any
    subject: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      image?: string | null
      value?: {
        __typename?: 'atom_values'
        thing?: {
          __typename?: 'things'
          name?: string | null
          description?: string | null
          url?: string | null
        } | null
        person?: { __typename?: 'persons'; description?: string | null } | null
      } | null
      term: {
        __typename?: 'terms'
        vaults: Array<{ __typename?: 'vaults'; position_count: number }>
      }
    }
    term?: {
      __typename?: 'terms'
      id: any
      vaults: Array<{ __typename?: 'vaults'; position_count: number }>
      positions: Array<{ __typename?: 'positions'; shares: any }>
    } | null
    counter_term?: {
      __typename?: 'terms'
      id: any
      vaults: Array<{ __typename?: 'vaults'; position_count: number }>
      positions: Array<{ __typename?: 'positions'; shares: any }>
    } | null
  }>
}

export type GetTriplesByCreatorQueryVariables = Exact<{
  address?: InputMaybe<Scalars['String']['input']>
}>

export type GetTriplesByCreatorQuery = {
  __typename?: 'query_root'
  triples: Array<{
    __typename?: 'triples'
    term_id: any
    creator_id: string
    subject: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      image?: string | null
      type: any
    }
    predicate: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      image?: string | null
      type: any
    }
    object: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      image?: string | null
      type: any
    }
    positions_aggregate: {
      __typename?: 'positions_aggregate'
      aggregate?: {
        __typename?: 'positions_aggregate_fields'
        count: number
      } | null
    }
    counter_positions_aggregate: {
      __typename?: 'positions_aggregate'
      aggregate?: {
        __typename?: 'positions_aggregate_fields'
        count: number
      } | null
    }
  }>
}

export type GetTriplesQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Triples_Order_By> | Triples_Order_By>
  where?: InputMaybe<Triples_Bool_Exp>
}>

export type GetTriplesQuery = {
  __typename?: 'query_root'
  total: {
    __typename?: 'triples_aggregate'
    aggregate?: {
      __typename?: 'triples_aggregate_fields'
      count: number
    } | null
  }
  triples: Array<{
    __typename?: 'triples'
    term_id: any
    subject_id: any
    predicate_id: any
    object_id: any
    block_number: any
    block_timestamp: any
    transaction_hash: string
    creator_id: string
    counter_term_id: any
    creator?: {
      __typename?: 'accounts'
      label: string
      image?: string | null
      id: string
      atom_id?: any | null
      type: any
    } | null
    subject: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    predicate: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    object: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        total_shares: any
        current_share_price: any
        allPositions: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          shares: any
          id: string
          term_id: any
          curve_id: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
            image?: string | null
          } | null
          vault?: {
            __typename?: 'vaults'
            term_id: any
            total_shares: any
            current_share_price: any
            term: {
              __typename?: 'terms'
              atom?: {
                __typename?: 'atoms'
                term_id: any
                label?: string | null
                image?: string | null
              } | null
              triple?: {
                __typename?: 'triples'
                term_id: any
                term?: {
                  __typename?: 'terms'
                  vaults: Array<{
                    __typename?: 'vaults'
                    term_id: any
                    position_count: number
                    positions_aggregate: {
                      __typename?: 'positions_aggregate'
                      aggregate?: {
                        __typename?: 'positions_aggregate_fields'
                        sum?: {
                          __typename?: 'positions_sum_fields'
                          shares?: any | null
                        } | null
                      } | null
                    }
                  }>
                } | null
                counter_term?: {
                  __typename?: 'terms'
                  vaults: Array<{
                    __typename?: 'vaults'
                    term_id: any
                    position_count: number
                    positions_aggregate: {
                      __typename?: 'positions_aggregate'
                      aggregate?: {
                        __typename?: 'positions_aggregate_fields'
                        sum?: {
                          __typename?: 'positions_sum_fields'
                          shares?: any | null
                        } | null
                      } | null
                    }
                  }>
                } | null
                subject: {
                  __typename?: 'atoms'
                  data?: string | null
                  term_id: any
                  label?: string | null
                  image?: string | null
                  emoji?: string | null
                  type: any
                  creator: {
                    __typename?: 'accounts'
                    label: string
                    image?: string | null
                    id: string
                    atom_id?: any | null
                    type: any
                  }
                  value?: {
                    __typename?: 'atom_values'
                    person?: {
                      __typename?: 'persons'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    thing?: {
                      __typename?: 'things'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    organization?: {
                      __typename?: 'organizations'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                  } | null
                }
                predicate: {
                  __typename?: 'atoms'
                  data?: string | null
                  term_id: any
                  label?: string | null
                  image?: string | null
                  emoji?: string | null
                  type: any
                  creator: {
                    __typename?: 'accounts'
                    label: string
                    image?: string | null
                    id: string
                    atom_id?: any | null
                    type: any
                  }
                  value?: {
                    __typename?: 'atom_values'
                    person?: {
                      __typename?: 'persons'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    thing?: {
                      __typename?: 'things'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    organization?: {
                      __typename?: 'organizations'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                  } | null
                }
                object: {
                  __typename?: 'atoms'
                  data?: string | null
                  term_id: any
                  label?: string | null
                  image?: string | null
                  emoji?: string | null
                  type: any
                  creator: {
                    __typename?: 'accounts'
                    label: string
                    image?: string | null
                    id: string
                    atom_id?: any | null
                    type: any
                  }
                  value?: {
                    __typename?: 'atom_values'
                    person?: {
                      __typename?: 'persons'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    thing?: {
                      __typename?: 'things'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    organization?: {
                      __typename?: 'organizations'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                  } | null
                }
              } | null
            }
          } | null
        }>
      }>
    } | null
    counter_term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        total_shares: any
        current_share_price: any
        allPositions: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          shares: any
          id: string
          term_id: any
          curve_id: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
            image?: string | null
          } | null
          vault?: {
            __typename?: 'vaults'
            term_id: any
            total_shares: any
            current_share_price: any
            term: {
              __typename?: 'terms'
              atom?: {
                __typename?: 'atoms'
                term_id: any
                label?: string | null
                image?: string | null
              } | null
              triple?: {
                __typename?: 'triples'
                term_id: any
                term?: {
                  __typename?: 'terms'
                  vaults: Array<{
                    __typename?: 'vaults'
                    term_id: any
                    position_count: number
                    positions_aggregate: {
                      __typename?: 'positions_aggregate'
                      aggregate?: {
                        __typename?: 'positions_aggregate_fields'
                        sum?: {
                          __typename?: 'positions_sum_fields'
                          shares?: any | null
                        } | null
                      } | null
                    }
                  }>
                } | null
                counter_term?: {
                  __typename?: 'terms'
                  vaults: Array<{
                    __typename?: 'vaults'
                    term_id: any
                    position_count: number
                    positions_aggregate: {
                      __typename?: 'positions_aggregate'
                      aggregate?: {
                        __typename?: 'positions_aggregate_fields'
                        sum?: {
                          __typename?: 'positions_sum_fields'
                          shares?: any | null
                        } | null
                      } | null
                    }
                  }>
                } | null
                subject: {
                  __typename?: 'atoms'
                  data?: string | null
                  term_id: any
                  label?: string | null
                  image?: string | null
                  emoji?: string | null
                  type: any
                  creator: {
                    __typename?: 'accounts'
                    label: string
                    image?: string | null
                    id: string
                    atom_id?: any | null
                    type: any
                  }
                  value?: {
                    __typename?: 'atom_values'
                    person?: {
                      __typename?: 'persons'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    thing?: {
                      __typename?: 'things'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    organization?: {
                      __typename?: 'organizations'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                  } | null
                }
                predicate: {
                  __typename?: 'atoms'
                  data?: string | null
                  term_id: any
                  label?: string | null
                  image?: string | null
                  emoji?: string | null
                  type: any
                  creator: {
                    __typename?: 'accounts'
                    label: string
                    image?: string | null
                    id: string
                    atom_id?: any | null
                    type: any
                  }
                  value?: {
                    __typename?: 'atom_values'
                    person?: {
                      __typename?: 'persons'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    thing?: {
                      __typename?: 'things'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    organization?: {
                      __typename?: 'organizations'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                  } | null
                }
                object: {
                  __typename?: 'atoms'
                  data?: string | null
                  term_id: any
                  label?: string | null
                  image?: string | null
                  emoji?: string | null
                  type: any
                  creator: {
                    __typename?: 'accounts'
                    label: string
                    image?: string | null
                    id: string
                    atom_id?: any | null
                    type: any
                  }
                  value?: {
                    __typename?: 'atom_values'
                    person?: {
                      __typename?: 'persons'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    thing?: {
                      __typename?: 'things'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    organization?: {
                      __typename?: 'organizations'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                  } | null
                }
              } | null
            }
          } | null
        }>
      }>
    } | null
  }>
}

export type GetTriplesWithAggregatesQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Triples_Order_By> | Triples_Order_By>
  where?: InputMaybe<Triples_Bool_Exp>
}>

export type GetTriplesWithAggregatesQuery = {
  __typename?: 'query_root'
  triples_aggregate: {
    __typename?: 'triples_aggregate'
    aggregate?: {
      __typename?: 'triples_aggregate_fields'
      count: number
    } | null
    nodes: Array<{
      __typename?: 'triples'
      term_id: any
      subject_id: any
      predicate_id: any
      object_id: any
      block_number: any
      block_timestamp: any
      transaction_hash: string
      creator_id: string
      counter_term_id: any
      creator?: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      } | null
      subject: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
        value?: {
          __typename?: 'atom_values'
          person?: {
            __typename?: 'persons'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
          thing?: {
            __typename?: 'things'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
          organization?: {
            __typename?: 'organizations'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
        } | null
      }
      predicate: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
        value?: {
          __typename?: 'atom_values'
          person?: {
            __typename?: 'persons'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
          thing?: {
            __typename?: 'things'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
          organization?: {
            __typename?: 'organizations'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
        } | null
      }
      object: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
        value?: {
          __typename?: 'atom_values'
          person?: {
            __typename?: 'persons'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
          thing?: {
            __typename?: 'things'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
          organization?: {
            __typename?: 'organizations'
            name?: string | null
            image?: string | null
            description?: string | null
            url?: string | null
          } | null
        } | null
      }
      term?: {
        __typename?: 'terms'
        vaults: Array<{
          __typename?: 'vaults'
          total_shares: any
          current_share_price: any
          allPositions: {
            __typename?: 'positions_aggregate'
            aggregate?: {
              __typename?: 'positions_aggregate_fields'
              count: number
              sum?: {
                __typename?: 'positions_sum_fields'
                shares?: any | null
              } | null
            } | null
          }
          positions: Array<{
            __typename?: 'positions'
            shares: any
            id: string
            term_id: any
            curve_id: any
            account?: {
              __typename?: 'accounts'
              id: string
              label: string
              image?: string | null
            } | null
            vault?: {
              __typename?: 'vaults'
              term_id: any
              total_shares: any
              current_share_price: any
              term: {
                __typename?: 'terms'
                atom?: {
                  __typename?: 'atoms'
                  term_id: any
                  label?: string | null
                  image?: string | null
                } | null
                triple?: {
                  __typename?: 'triples'
                  term_id: any
                  term?: {
                    __typename?: 'terms'
                    vaults: Array<{
                      __typename?: 'vaults'
                      term_id: any
                      position_count: number
                      positions_aggregate: {
                        __typename?: 'positions_aggregate'
                        aggregate?: {
                          __typename?: 'positions_aggregate_fields'
                          sum?: {
                            __typename?: 'positions_sum_fields'
                            shares?: any | null
                          } | null
                        } | null
                      }
                    }>
                  } | null
                  counter_term?: {
                    __typename?: 'terms'
                    vaults: Array<{
                      __typename?: 'vaults'
                      term_id: any
                      position_count: number
                      positions_aggregate: {
                        __typename?: 'positions_aggregate'
                        aggregate?: {
                          __typename?: 'positions_aggregate_fields'
                          sum?: {
                            __typename?: 'positions_sum_fields'
                            shares?: any | null
                          } | null
                        } | null
                      }
                    }>
                  } | null
                  subject: {
                    __typename?: 'atoms'
                    data?: string | null
                    term_id: any
                    label?: string | null
                    image?: string | null
                    emoji?: string | null
                    type: any
                    creator: {
                      __typename?: 'accounts'
                      label: string
                      image?: string | null
                      id: string
                      atom_id?: any | null
                      type: any
                    }
                    value?: {
                      __typename?: 'atom_values'
                      person?: {
                        __typename?: 'persons'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      thing?: {
                        __typename?: 'things'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      organization?: {
                        __typename?: 'organizations'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                    } | null
                  }
                  predicate: {
                    __typename?: 'atoms'
                    data?: string | null
                    term_id: any
                    label?: string | null
                    image?: string | null
                    emoji?: string | null
                    type: any
                    creator: {
                      __typename?: 'accounts'
                      label: string
                      image?: string | null
                      id: string
                      atom_id?: any | null
                      type: any
                    }
                    value?: {
                      __typename?: 'atom_values'
                      person?: {
                        __typename?: 'persons'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      thing?: {
                        __typename?: 'things'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      organization?: {
                        __typename?: 'organizations'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                    } | null
                  }
                  object: {
                    __typename?: 'atoms'
                    data?: string | null
                    term_id: any
                    label?: string | null
                    image?: string | null
                    emoji?: string | null
                    type: any
                    creator: {
                      __typename?: 'accounts'
                      label: string
                      image?: string | null
                      id: string
                      atom_id?: any | null
                      type: any
                    }
                    value?: {
                      __typename?: 'atom_values'
                      person?: {
                        __typename?: 'persons'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      thing?: {
                        __typename?: 'things'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      organization?: {
                        __typename?: 'organizations'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                    } | null
                  }
                } | null
              }
            } | null
          }>
        }>
      } | null
      counter_term?: {
        __typename?: 'terms'
        vaults: Array<{
          __typename?: 'vaults'
          total_shares: any
          current_share_price: any
          allPositions: {
            __typename?: 'positions_aggregate'
            aggregate?: {
              __typename?: 'positions_aggregate_fields'
              count: number
              sum?: {
                __typename?: 'positions_sum_fields'
                shares?: any | null
              } | null
            } | null
          }
          positions: Array<{
            __typename?: 'positions'
            shares: any
            id: string
            term_id: any
            curve_id: any
            account?: {
              __typename?: 'accounts'
              id: string
              label: string
              image?: string | null
            } | null
            vault?: {
              __typename?: 'vaults'
              term_id: any
              total_shares: any
              current_share_price: any
              term: {
                __typename?: 'terms'
                atom?: {
                  __typename?: 'atoms'
                  term_id: any
                  label?: string | null
                  image?: string | null
                } | null
                triple?: {
                  __typename?: 'triples'
                  term_id: any
                  term?: {
                    __typename?: 'terms'
                    vaults: Array<{
                      __typename?: 'vaults'
                      term_id: any
                      position_count: number
                      positions_aggregate: {
                        __typename?: 'positions_aggregate'
                        aggregate?: {
                          __typename?: 'positions_aggregate_fields'
                          sum?: {
                            __typename?: 'positions_sum_fields'
                            shares?: any | null
                          } | null
                        } | null
                      }
                    }>
                  } | null
                  counter_term?: {
                    __typename?: 'terms'
                    vaults: Array<{
                      __typename?: 'vaults'
                      term_id: any
                      position_count: number
                      positions_aggregate: {
                        __typename?: 'positions_aggregate'
                        aggregate?: {
                          __typename?: 'positions_aggregate_fields'
                          sum?: {
                            __typename?: 'positions_sum_fields'
                            shares?: any | null
                          } | null
                        } | null
                      }
                    }>
                  } | null
                  subject: {
                    __typename?: 'atoms'
                    data?: string | null
                    term_id: any
                    label?: string | null
                    image?: string | null
                    emoji?: string | null
                    type: any
                    creator: {
                      __typename?: 'accounts'
                      label: string
                      image?: string | null
                      id: string
                      atom_id?: any | null
                      type: any
                    }
                    value?: {
                      __typename?: 'atom_values'
                      person?: {
                        __typename?: 'persons'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      thing?: {
                        __typename?: 'things'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      organization?: {
                        __typename?: 'organizations'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                    } | null
                  }
                  predicate: {
                    __typename?: 'atoms'
                    data?: string | null
                    term_id: any
                    label?: string | null
                    image?: string | null
                    emoji?: string | null
                    type: any
                    creator: {
                      __typename?: 'accounts'
                      label: string
                      image?: string | null
                      id: string
                      atom_id?: any | null
                      type: any
                    }
                    value?: {
                      __typename?: 'atom_values'
                      person?: {
                        __typename?: 'persons'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      thing?: {
                        __typename?: 'things'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      organization?: {
                        __typename?: 'organizations'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                    } | null
                  }
                  object: {
                    __typename?: 'atoms'
                    data?: string | null
                    term_id: any
                    label?: string | null
                    image?: string | null
                    emoji?: string | null
                    type: any
                    creator: {
                      __typename?: 'accounts'
                      label: string
                      image?: string | null
                      id: string
                      atom_id?: any | null
                      type: any
                    }
                    value?: {
                      __typename?: 'atom_values'
                      person?: {
                        __typename?: 'persons'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      thing?: {
                        __typename?: 'things'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                      organization?: {
                        __typename?: 'organizations'
                        name?: string | null
                        image?: string | null
                        description?: string | null
                        url?: string | null
                      } | null
                    } | null
                  }
                } | null
              }
            } | null
          }>
        }>
      } | null
    }>
  }
}

export type GetTriplesCountQueryVariables = Exact<{
  where?: InputMaybe<Triples_Bool_Exp>
}>

export type GetTriplesCountQuery = {
  __typename?: 'query_root'
  triples_aggregate: {
    __typename?: 'triples_aggregate'
    total?: { __typename?: 'triples_aggregate_fields'; count: number } | null
  }
}

export type GetTripleQueryVariables = Exact<{
  tripleId: Scalars['numeric']['input']
}>

export type GetTripleQuery = {
  __typename?: 'query_root'
  triple?: {
    __typename?: 'triples'
    term_id: any
    subject_id: any
    predicate_id: any
    object_id: any
    block_number: any
    block_timestamp: any
    transaction_hash: string
    creator_id: string
    counter_term_id: any
    creator?: {
      __typename?: 'accounts'
      label: string
      image?: string | null
      id: string
      atom_id?: any | null
      type: any
    } | null
    subject: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    predicate: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    object: {
      __typename?: 'atoms'
      data?: string | null
      term_id: any
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      creator: {
        __typename?: 'accounts'
        label: string
        image?: string | null
        id: string
        atom_id?: any | null
        type: any
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    }
    term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        total_shares: any
        current_share_price: any
        allPositions: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          shares: any
          id: string
          term_id: any
          curve_id: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
            image?: string | null
          } | null
          vault?: {
            __typename?: 'vaults'
            term_id: any
            total_shares: any
            current_share_price: any
            term: {
              __typename?: 'terms'
              atom?: {
                __typename?: 'atoms'
                term_id: any
                label?: string | null
                image?: string | null
              } | null
              triple?: {
                __typename?: 'triples'
                term_id: any
                term?: {
                  __typename?: 'terms'
                  vaults: Array<{
                    __typename?: 'vaults'
                    term_id: any
                    position_count: number
                    positions_aggregate: {
                      __typename?: 'positions_aggregate'
                      aggregate?: {
                        __typename?: 'positions_aggregate_fields'
                        sum?: {
                          __typename?: 'positions_sum_fields'
                          shares?: any | null
                        } | null
                      } | null
                    }
                  }>
                } | null
                counter_term?: {
                  __typename?: 'terms'
                  vaults: Array<{
                    __typename?: 'vaults'
                    term_id: any
                    position_count: number
                    positions_aggregate: {
                      __typename?: 'positions_aggregate'
                      aggregate?: {
                        __typename?: 'positions_aggregate_fields'
                        sum?: {
                          __typename?: 'positions_sum_fields'
                          shares?: any | null
                        } | null
                      } | null
                    }
                  }>
                } | null
                subject: {
                  __typename?: 'atoms'
                  data?: string | null
                  term_id: any
                  label?: string | null
                  image?: string | null
                  emoji?: string | null
                  type: any
                  creator: {
                    __typename?: 'accounts'
                    label: string
                    image?: string | null
                    id: string
                    atom_id?: any | null
                    type: any
                  }
                  value?: {
                    __typename?: 'atom_values'
                    person?: {
                      __typename?: 'persons'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    thing?: {
                      __typename?: 'things'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    organization?: {
                      __typename?: 'organizations'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                  } | null
                }
                predicate: {
                  __typename?: 'atoms'
                  data?: string | null
                  term_id: any
                  label?: string | null
                  image?: string | null
                  emoji?: string | null
                  type: any
                  creator: {
                    __typename?: 'accounts'
                    label: string
                    image?: string | null
                    id: string
                    atom_id?: any | null
                    type: any
                  }
                  value?: {
                    __typename?: 'atom_values'
                    person?: {
                      __typename?: 'persons'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    thing?: {
                      __typename?: 'things'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    organization?: {
                      __typename?: 'organizations'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                  } | null
                }
                object: {
                  __typename?: 'atoms'
                  data?: string | null
                  term_id: any
                  label?: string | null
                  image?: string | null
                  emoji?: string | null
                  type: any
                  creator: {
                    __typename?: 'accounts'
                    label: string
                    image?: string | null
                    id: string
                    atom_id?: any | null
                    type: any
                  }
                  value?: {
                    __typename?: 'atom_values'
                    person?: {
                      __typename?: 'persons'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    thing?: {
                      __typename?: 'things'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    organization?: {
                      __typename?: 'organizations'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                  } | null
                }
              } | null
            }
          } | null
        }>
      }>
    } | null
    counter_term?: {
      __typename?: 'terms'
      vaults: Array<{
        __typename?: 'vaults'
        total_shares: any
        current_share_price: any
        allPositions: {
          __typename?: 'positions_aggregate'
          aggregate?: {
            __typename?: 'positions_aggregate_fields'
            count: number
            sum?: {
              __typename?: 'positions_sum_fields'
              shares?: any | null
            } | null
          } | null
        }
        positions: Array<{
          __typename?: 'positions'
          shares: any
          id: string
          term_id: any
          curve_id: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
            image?: string | null
          } | null
          vault?: {
            __typename?: 'vaults'
            term_id: any
            total_shares: any
            current_share_price: any
            term: {
              __typename?: 'terms'
              atom?: {
                __typename?: 'atoms'
                term_id: any
                label?: string | null
                image?: string | null
              } | null
              triple?: {
                __typename?: 'triples'
                term_id: any
                term?: {
                  __typename?: 'terms'
                  vaults: Array<{
                    __typename?: 'vaults'
                    term_id: any
                    position_count: number
                    positions_aggregate: {
                      __typename?: 'positions_aggregate'
                      aggregate?: {
                        __typename?: 'positions_aggregate_fields'
                        sum?: {
                          __typename?: 'positions_sum_fields'
                          shares?: any | null
                        } | null
                      } | null
                    }
                  }>
                } | null
                counter_term?: {
                  __typename?: 'terms'
                  vaults: Array<{
                    __typename?: 'vaults'
                    term_id: any
                    position_count: number
                    positions_aggregate: {
                      __typename?: 'positions_aggregate'
                      aggregate?: {
                        __typename?: 'positions_aggregate_fields'
                        sum?: {
                          __typename?: 'positions_sum_fields'
                          shares?: any | null
                        } | null
                      } | null
                    }
                  }>
                } | null
                subject: {
                  __typename?: 'atoms'
                  data?: string | null
                  term_id: any
                  label?: string | null
                  image?: string | null
                  emoji?: string | null
                  type: any
                  creator: {
                    __typename?: 'accounts'
                    label: string
                    image?: string | null
                    id: string
                    atom_id?: any | null
                    type: any
                  }
                  value?: {
                    __typename?: 'atom_values'
                    person?: {
                      __typename?: 'persons'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    thing?: {
                      __typename?: 'things'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    organization?: {
                      __typename?: 'organizations'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                  } | null
                }
                predicate: {
                  __typename?: 'atoms'
                  data?: string | null
                  term_id: any
                  label?: string | null
                  image?: string | null
                  emoji?: string | null
                  type: any
                  creator: {
                    __typename?: 'accounts'
                    label: string
                    image?: string | null
                    id: string
                    atom_id?: any | null
                    type: any
                  }
                  value?: {
                    __typename?: 'atom_values'
                    person?: {
                      __typename?: 'persons'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    thing?: {
                      __typename?: 'things'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    organization?: {
                      __typename?: 'organizations'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                  } | null
                }
                object: {
                  __typename?: 'atoms'
                  data?: string | null
                  term_id: any
                  label?: string | null
                  image?: string | null
                  emoji?: string | null
                  type: any
                  creator: {
                    __typename?: 'accounts'
                    label: string
                    image?: string | null
                    id: string
                    atom_id?: any | null
                    type: any
                  }
                  value?: {
                    __typename?: 'atom_values'
                    person?: {
                      __typename?: 'persons'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    thing?: {
                      __typename?: 'things'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                    organization?: {
                      __typename?: 'organizations'
                      name?: string | null
                      image?: string | null
                      description?: string | null
                      url?: string | null
                    } | null
                  } | null
                }
              } | null
            }
          } | null
        }>
      }>
    } | null
  } | null
}

export type GetAtomTriplesWithPositionsQueryVariables = Exact<{
  where?: InputMaybe<Triples_Bool_Exp>
}>

export type GetAtomTriplesWithPositionsQuery = {
  __typename?: 'query_root'
  triples_aggregate: {
    __typename?: 'triples_aggregate'
    aggregate?: {
      __typename?: 'triples_aggregate_fields'
      count: number
    } | null
  }
}

export type GetTriplesWithPositionsQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Triples_Order_By> | Triples_Order_By>
  where?: InputMaybe<Triples_Bool_Exp>
  address?: InputMaybe<Scalars['String']['input']>
}>

export type GetTriplesWithPositionsQuery = {
  __typename?: 'query_root'
  total: {
    __typename?: 'triples_aggregate'
    aggregate?: {
      __typename?: 'triples_aggregate_fields'
      count: number
    } | null
  }
  triples: Array<{
    __typename?: 'triples'
    term_id: any
    counter_term_id: any
    subject: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      image?: string | null
    }
    predicate: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      image?: string | null
    }
    object: {
      __typename?: 'atoms'
      term_id: any
      label?: string | null
      image?: string | null
    }
    term?: {
      __typename?: 'terms'
      positions_aggregate: {
        __typename?: 'positions_aggregate'
        aggregate?: {
          __typename?: 'positions_aggregate_fields'
          count: number
        } | null
      }
      vaults: Array<{
        __typename?: 'vaults'
        total_shares: any
        position_count: number
        positions: Array<{
          __typename?: 'positions'
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
            image?: string | null
          } | null
        }>
      }>
    } | null
    counter_term?: {
      __typename?: 'terms'
      positions_aggregate: {
        __typename?: 'positions_aggregate'
        aggregate?: {
          __typename?: 'positions_aggregate_fields'
          count: number
        } | null
      }
      vaults: Array<{
        __typename?: 'vaults'
        total_shares: any
        position_count: number
        positions: Array<{
          __typename?: 'positions'
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
            image?: string | null
          } | null
        }>
      }>
    } | null
  }>
}

export type GetVaultsQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<Array<Vaults_Order_By> | Vaults_Order_By>
  where?: InputMaybe<Vaults_Bool_Exp>
}>

export type GetVaultsQuery = {
  __typename?: 'query_root'
  vaults_aggregate: {
    __typename?: 'vaults_aggregate'
    aggregate?: { __typename?: 'vaults_aggregate_fields'; count: number } | null
    nodes: Array<{
      __typename?: 'vaults'
      term_id: any
      current_share_price: any
      total_shares: any
      term: {
        __typename?: 'terms'
        atom?: {
          __typename?: 'atoms'
          term_id: any
          label?: string | null
        } | null
        triple?: {
          __typename?: 'triples'
          term_id: any
          subject: { __typename?: 'atoms'; term_id: any; label?: string | null }
          predicate: {
            __typename?: 'atoms'
            term_id: any
            label?: string | null
          }
          object: { __typename?: 'atoms'; term_id: any; label?: string | null }
        } | null
      }
      positions_aggregate: {
        __typename?: 'positions_aggregate'
        nodes: Array<{
          __typename?: 'positions'
          shares: any
          account?: {
            __typename?: 'accounts'
            atom_id?: any | null
            label: string
          } | null
        }>
      }
    }>
  }
}

export type GetVaultQueryVariables = Exact<{
  termId: Scalars['numeric']['input']
  curveId: Scalars['numeric']['input']
}>

export type GetVaultQuery = {
  __typename?: 'query_root'
  vault?: {
    __typename?: 'vaults'
    term_id: any
    curve_id: any
    current_share_price: any
    total_shares: any
    term: {
      __typename?: 'terms'
      atom?: {
        __typename?: 'atoms'
        term_id: any
        label?: string | null
      } | null
      triple?: {
        __typename?: 'triples'
        term_id: any
        subject: { __typename?: 'atoms'; term_id: any; label?: string | null }
        predicate: { __typename?: 'atoms'; term_id: any; label?: string | null }
        object: { __typename?: 'atoms'; term_id: any; label?: string | null }
      } | null
    }
  } | null
}

export type EventsSubscriptionVariables = Exact<{
  addresses: Array<Scalars['String']['input']> | Scalars['String']['input']
  limit: Scalars['Int']['input']
}>

export type EventsSubscription = {
  __typename?: 'subscription_root'
  events: Array<{
    __typename?: 'events'
    block_number: any
    block_timestamp: any
    type: any
    transaction_hash: string
    atom_id?: any | null
    triple_id?: any | null
    deposit_id?: string | null
    redemption_id?: string | null
    atom?: {
      __typename?: 'atoms'
      term_id: any
      data?: string | null
      image?: string | null
      label?: string | null
      emoji?: string | null
      type: any
      wallet_id: string
      term: {
        __typename?: 'terms'
        id: any
        total_market_cap?: any | null
        vaults: Array<{ __typename?: 'vaults'; position_count: number }>
        positions: Array<{
          __typename?: 'positions'
          account_id: string
          shares: any
          account?: {
            __typename?: 'accounts'
            id: string
            label: string
            image?: string | null
          } | null
        }>
      }
      creator: {
        __typename?: 'accounts'
        id: string
        label: string
        image?: string | null
      }
      value?: {
        __typename?: 'atom_values'
        person?: {
          __typename?: 'persons'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        thing?: {
          __typename?: 'things'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
        organization?: {
          __typename?: 'organizations'
          name?: string | null
          image?: string | null
          description?: string | null
          url?: string | null
        } | null
      } | null
    } | null
    triple?: {
      __typename?: 'triples'
      term_id: any
      counter_term_id: any
      creator_id: string
      subject_id: any
      predicate_id: any
      object_id: any
      positions_aggregate: {
        __typename?: 'positions_aggregate'
        aggregate?: {
          __typename?: 'positions_aggregate_fields'
          count: number
        } | null
      }
      creator?: {
        __typename?: 'accounts'
        image?: string | null
        label: string
        id: string
      } | null
      subject: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
      predicate: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
      object: {
        __typename?: 'atoms'
        data?: string | null
        term_id: any
        image?: string | null
        label?: string | null
        emoji?: string | null
        type: any
        creator: {
          __typename?: 'accounts'
          label: string
          image?: string | null
          id: string
          atom_id?: any | null
          type: any
        }
      }
      term?: {
        __typename?: 'terms'
        vaults: Array<{
          __typename?: 'vaults'
          term_id: any
          curve_id: any
          current_share_price: any
          total_shares: any
          term: {
            __typename?: 'terms'
            atom?: {
              __typename?: 'atoms'
              term_id: any
              label?: string | null
            } | null
            triple?: {
              __typename?: 'triples'
              term_id: any
              subject: {
                __typename?: 'atoms'
                term_id: any
                label?: string | null
              }
              predicate: {
                __typename?: 'atoms'
                term_id: any
                label?: string | null
              }
              object: {
                __typename?: 'atoms'
                term_id: any
                label?: string | null
              }
            } | null
          }
          positions: Array<{
            __typename?: 'positions'
            shares: any
            account?: {
              __typename?: 'accounts'
              id: string
              label: string
            } | null
            vault?: {
              __typename?: 'vaults'
              term_id: any
              total_shares: any
              current_share_price: any
            } | null
          }>
        }>
      } | null
      counter_term?: {
        __typename?: 'terms'
        vaults: Array<{
          __typename?: 'vaults'
          term_id: any
          curve_id: any
          current_share_price: any
          total_shares: any
          term: {
            __typename?: 'terms'
            atom?: {
              __typename?: 'atoms'
              term_id: any
              label?: string | null
            } | null
            triple?: {
              __typename?: 'triples'
              term_id: any
              subject: {
                __typename?: 'atoms'
                term_id: any
                label?: string | null
              }
              predicate: {
                __typename?: 'atoms'
                term_id: any
                label?: string | null
              }
              object: {
                __typename?: 'atoms'
                term_id: any
                label?: string | null
              }
            } | null
          }
          positions: Array<{
            __typename?: 'positions'
            shares: any
            account?: {
              __typename?: 'accounts'
              id: string
              label: string
            } | null
            vault?: {
              __typename?: 'vaults'
              term_id: any
              total_shares: any
              current_share_price: any
            } | null
          }>
        }>
      } | null
    } | null
    deposit?: {
      __typename?: 'deposits'
      term_id: any
      curve_id: any
      sender_assets_after_total_fees: any
      shares_for_receiver: any
      receiver: { __typename?: 'accounts'; id: string }
      sender?: { __typename?: 'accounts'; id: string } | null
    } | null
    redemption?: {
      __typename?: 'redemptions'
      term_id: any
      curve_id: any
      receiver_id: string
      shares_redeemed_by_sender: any
      assets_for_receiver: any
    } | null
  }>
}

export const AccountClaimsAggregateFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountClaimsAggregate' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'claims_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'position' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'shares' },
                            value: { kind: 'EnumValue', value: 'desc' },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'position' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const AccountClaimsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountClaims' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'claims' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'position' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'shares' },
                            value: { kind: 'EnumValue', value: 'desc' },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'claimsLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'claimsOffset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'claimsWhere' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'position' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const AccountPositionsAggregateFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountPositionsAggregate' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'shares' },
                      value: { kind: 'EnumValue', value: 'desc' },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vault' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'current_share_price',
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'atom' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'triple' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const AccountPositionsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'shares' },
                      value: { kind: 'EnumValue', value: 'desc' },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'positionsLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'positionsOffset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'positionsWhere' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vault' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'atom' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'triple' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const AccountAtomsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountAtoms' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atoms' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsWhere' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsOrderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsOffset' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'positions_aggregate',
                              },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'address',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'nodes' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'account',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'id',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'shares',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const AccountAtomsAggregateFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountAtomsAggregate' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atoms_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsWhere' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsOrderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsOffset' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'sum' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'vaults' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'curve_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'StringValue',
                                                value: '1',
                                                block: false,
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'total_shares',
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'positions_aggregate',
                                    },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'account_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'Variable',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'address',
                                                      },
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'nodes',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'account',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'id',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'shares',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const AccountTriplesFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountTriples' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesWhere' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesOrderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesOffset' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'subject' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'predicate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'object' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const AccountTriplesAggregateFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountTriplesAggregate' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesWhere' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesOrderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesOffset' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'subject' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'predicate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'object' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const AtomTxnFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomTxn' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'block_number' } },
          { kind: 'Field', name: { kind: 'Name', value: 'block_timestamp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'transaction_hash' } },
          { kind: 'Field', name: { kind: 'Name', value: 'creator_id' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const AtomVaultDetailsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomVaultDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'position_count' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'aggregate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'count' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'sum' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'shares',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'positions_aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const AccountMetadataFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const AtomTripleFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomTriple' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'as_subject_triples' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'as_predicate_triples' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'as_object_triples' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const AtomVaultDetailsWithPositionsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomVaultDetailsWithPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'account_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_in' },
                                        value: {
                                          kind: 'Variable',
                                          name: {
                                            kind: 'Name',
                                            value: 'addresses',
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'aggregate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'sum' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'shares',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'nodes' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                      ],
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const DepositEventFragmentFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'DepositEventFragment' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'events' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'deposit' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'sender_assets_after_total_fees',
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'shares_for_receiver' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'receiver' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sender' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const RedemptionEventFragmentFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'RedemptionEventFragment' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'events' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'redemption' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'receiver_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'shares_redeemed_by_sender' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'assets_for_receiver' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const AtomValueFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const AtomMetadataFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'data' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'AtomValue' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const PositionAggregateFieldsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionAggregateFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions_aggregate' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'aggregate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sum' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const PositionFieldsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'total_shares' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'current_share_price' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const TripleMetadataFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'subject_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'predicate_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'object_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'subject' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'predicate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'object' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'allPositions' },
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: {
                                kind: 'Name',
                                value: 'PositionAggregateFields',
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionFields' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'counter_term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'allPositions' },
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: {
                                kind: 'Name',
                                value: 'PositionAggregateFields',
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionFields' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'total_shares' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'current_share_price' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionAggregateFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions_aggregate' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'aggregate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sum' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const EventDetailsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EventDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'events' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'block_number' } },
          { kind: 'Field', name: { kind: 'Name', value: 'block_timestamp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'transaction_hash' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'triple_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'deposit_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'redemption_id' } },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'DepositEventFragment' },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'RedemptionEventFragment' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atom' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomMetadata' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'image',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triple' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'TripleMetadata' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'image',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'image',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'data' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'AtomValue' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'DepositEventFragment' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'events' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'deposit' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'sender_assets_after_total_fees',
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'shares_for_receiver' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'receiver' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sender' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'total_shares' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'current_share_price' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionAggregateFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions_aggregate' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'aggregate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sum' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'RedemptionEventFragment' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'events' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'redemption' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'receiver_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'shares_redeemed_by_sender' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'assets_for_receiver' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'subject_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'predicate_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'object_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'subject' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'predicate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'object' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'allPositions' },
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: {
                                kind: 'Name',
                                value: 'PositionAggregateFields',
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionFields' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'counter_term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'allPositions' },
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: {
                                kind: 'Name',
                                value: 'PositionAggregateFields',
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionFields' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const TripleMetadataSubscriptionFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleMetadataSubscription' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'creator_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'subject_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'predicate_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'object_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'subject' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'predicate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'object' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const VaultBasicDetailsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultBasicDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'atom' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'triple' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'subject' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'predicate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'object' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'current_share_price' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'total_shares' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const VaultFilteredPositionsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultFilteredPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'account_id' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_in' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'addresses' },
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PositionFields' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'total_shares' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'current_share_price' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const VaultDetailsWithFilteredPositionsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultDetailsWithFilteredPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'VaultBasicDetails' },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'VaultFilteredPositions' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'total_shares' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'current_share_price' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultBasicDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'atom' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'triple' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'subject' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'predicate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'object' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'current_share_price' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'total_shares' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultFilteredPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'account_id' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_in' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'addresses' },
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PositionFields' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const TripleVaultCouterVaultDetailsWithPositionsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: {
        kind: 'Name',
        value: 'TripleVaultCouterVaultDetailsWithPositions',
      },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'counter_term_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: {
                          kind: 'Name',
                          value: 'VaultDetailsWithFilteredPositions',
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'counter_term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: {
                          kind: 'Name',
                          value: 'VaultDetailsWithFilteredPositions',
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'total_shares' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'current_share_price' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultBasicDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'atom' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'triple' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'subject' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'predicate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'object' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'current_share_price' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'total_shares' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultFilteredPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'account_id' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_in' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'addresses' },
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PositionFields' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultDetailsWithFilteredPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'VaultBasicDetails' },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'VaultFilteredPositions' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const EventDetailsSubscriptionFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EventDetailsSubscription' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'events' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'block_number' } },
          { kind: 'Field', name: { kind: 'Name', value: 'block_timestamp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'transaction_hash' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'triple_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'deposit_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'redemption_id' } },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'DepositEventFragment' },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'RedemptionEventFragment' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atom' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomMetadata' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_market_cap' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triple' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'TripleMetadataSubscription' },
                },
                {
                  kind: 'FragmentSpread',
                  name: {
                    kind: 'Name',
                    value: 'TripleVaultCouterVaultDetailsWithPositions',
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_term_id' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'positions_aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'data' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'AtomValue' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'DepositEventFragment' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'events' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'deposit' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'sender_assets_after_total_fees',
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'shares_for_receiver' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'receiver' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sender' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'total_shares' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'current_share_price' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'RedemptionEventFragment' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'events' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'redemption' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'receiver_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'shares_redeemed_by_sender' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'assets_for_receiver' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: {
        kind: 'Name',
        value: 'TripleVaultCouterVaultDetailsWithPositions',
      },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'counter_term_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: {
                          kind: 'Name',
                          value: 'VaultDetailsWithFilteredPositions',
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'counter_term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: {
                          kind: 'Name',
                          value: 'VaultDetailsWithFilteredPositions',
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleMetadataSubscription' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'creator_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'subject_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'predicate_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'object_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'subject' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'predicate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'object' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultBasicDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'atom' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'triple' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'subject' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'predicate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'object' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'current_share_price' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'total_shares' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultFilteredPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'account_id' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_in' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'addresses' },
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PositionFields' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultDetailsWithFilteredPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'VaultBasicDetails' },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'VaultFilteredPositions' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const FollowMetadataFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'FollowMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'subject' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'predicate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'object' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'positionsWhere' },
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'aggregate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'count' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'sum' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'shares',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'limit' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'positionsLimit' },
                            },
                          },
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'offset' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'positionsOffset' },
                            },
                          },
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'order_by' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'positionsOrderBy' },
                            },
                          },
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'positionsWhere' },
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const FollowAggregateFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'FollowAggregate' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples_aggregate' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'aggregate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const StatDetailsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'StatDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'stats' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'contract_balance' } },
          { kind: 'Field', name: { kind: 'Name', value: 'total_accounts' } },
          { kind: 'Field', name: { kind: 'Name', value: 'total_fees' } },
          { kind: 'Field', name: { kind: 'Name', value: 'total_atoms' } },
          { kind: 'Field', name: { kind: 'Name', value: 'total_triples' } },
          { kind: 'Field', name: { kind: 'Name', value: 'total_positions' } },
          { kind: 'Field', name: { kind: 'Name', value: 'total_signals' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const TripleTxnFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleTxn' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'block_number' } },
          { kind: 'Field', name: { kind: 'Name', value: 'block_timestamp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'transaction_hash' } },
          { kind: 'Field', name: { kind: 'Name', value: 'creator_id' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const PositionDetailsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'atom' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'triple' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'counter_term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'subject' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const TripleVaultDetailsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleVaultDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'counter_term_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionDetails' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'counter_term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionDetails' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'atom' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'triple' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'counter_term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'subject' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const VaultUnfilteredPositionsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultUnfilteredPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PositionFields' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'total_shares' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'current_share_price' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const VaultDetailsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'VaultBasicDetails' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultBasicDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'atom' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'triple' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'subject' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'predicate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'object' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'current_share_price' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'total_shares' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const VaultPositionsAggregateFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultPositionsAggregate' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions_aggregate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PositionAggregateFields' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionAggregateFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions_aggregate' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'aggregate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sum' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const VaultFieldsForTripleFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultFieldsForTriple' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'total_shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'current_share_price' },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'VaultPositionsAggregate' },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'VaultFilteredPositions' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'total_shares' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'current_share_price' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionAggregateFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions_aggregate' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'aggregate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sum' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultPositionsAggregate' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions_aggregate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PositionAggregateFields' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultFilteredPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'account_id' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_in' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'addresses' },
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PositionFields' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const AtomMetadataMaybedeletethisFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomMetadataMAYBEDELETETHIS' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'data' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'AtomValue' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const PinPersonDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'pinPerson' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'name' } },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'description' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'image' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'url' } },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'email' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'identifier' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'pinPerson' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'person' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'name' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'name' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'description' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'description' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'image' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'image' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'url' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'url' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'email' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'email' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'identifier' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'identifier' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'uri' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type PinPersonMutationFn = Apollo.MutationFunction<
  PinPersonMutation,
  PinPersonMutationVariables
>

/**
 * __usePinPersonMutation__
 *
 * To run a mutation, you first call `usePinPersonMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `usePinPersonMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [pinPersonMutation, { data, loading, error }] = usePinPersonMutation({
 *   variables: {
 *      name: // value for 'name'
 *      description: // value for 'description'
 *      image: // value for 'image'
 *      url: // value for 'url'
 *      email: // value for 'email'
 *      identifier: // value for 'identifier'
 *   },
 * });
 */
export function usePinPersonMutation(
  baseOptions?: Apollo.MutationHookOptions<
    PinPersonMutation,
    PinPersonMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<PinPersonMutation, PinPersonMutationVariables>(
    PinPersonDocument,
    options,
  )
}
export type PinPersonMutationHookResult = ReturnType<
  typeof usePinPersonMutation
>
export type PinPersonMutationResult = Apollo.MutationResult<PinPersonMutation>
export type PinPersonMutationOptions = Apollo.BaseMutationOptions<
  PinPersonMutation,
  PinPersonMutationVariables
>
export const PinThingDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'pinThing' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'name' } },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'description' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'image' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'url' } },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'pinThing' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'thing' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'description' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'description' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'image' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'image' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'name' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'name' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'url' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'url' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'uri' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type PinThingMutationFn = Apollo.MutationFunction<
  PinThingMutation,
  PinThingMutationVariables
>

/**
 * __usePinThingMutation__
 *
 * To run a mutation, you first call `usePinThingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `usePinThingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [pinThingMutation, { data, loading, error }] = usePinThingMutation({
 *   variables: {
 *      name: // value for 'name'
 *      description: // value for 'description'
 *      image: // value for 'image'
 *      url: // value for 'url'
 *   },
 * });
 */
export function usePinThingMutation(
  baseOptions?: Apollo.MutationHookOptions<
    PinThingMutation,
    PinThingMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<PinThingMutation, PinThingMutationVariables>(
    PinThingDocument,
    options,
  )
}
export type PinThingMutationHookResult = ReturnType<typeof usePinThingMutation>
export type PinThingMutationResult = Apollo.MutationResult<PinThingMutation>
export type PinThingMutationOptions = Apollo.BaseMutationOptions<
  PinThingMutation,
  PinThingMutationVariables
>
export const GetAccountsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAccounts' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'accounts_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'accounts_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'claimsLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'claimsOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'claimsWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'claims_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'positions_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'accounts' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountMetadata' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountClaims' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountPositions' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'atom' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'wallet_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'vaults' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'curve_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'StringValue',
                                                value: '1',
                                                block: false,
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'position_count',
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'total_shares',
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'positions_aggregate',
                                    },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'count',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'sum',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'shares',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'positions' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'account',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'label',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'id',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'shares',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountClaims' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'claims' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'position' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'shares' },
                            value: { kind: 'EnumValue', value: 'desc' },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'claimsLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'claimsOffset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'claimsWhere' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'position' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'shares' },
                      value: { kind: 'EnumValue', value: 'desc' },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'positionsLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'positionsOffset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'positionsWhere' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vault' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'atom' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'triple' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetAccountsQuery__
 *
 * To run a query within a React component, call `useGetAccountsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAccountsQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *      claimsLimit: // value for 'claimsLimit'
 *      claimsOffset: // value for 'claimsOffset'
 *      claimsWhere: // value for 'claimsWhere'
 *      positionsLimit: // value for 'positionsLimit'
 *      positionsOffset: // value for 'positionsOffset'
 *      positionsWhere: // value for 'positionsWhere'
 *   },
 * });
 */
export function useGetAccountsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetAccountsQuery,
    GetAccountsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetAccountsQuery, GetAccountsQueryVariables>(
    GetAccountsDocument,
    options,
  )
}
export function useGetAccountsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAccountsQuery,
    GetAccountsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetAccountsQuery, GetAccountsQueryVariables>(
    GetAccountsDocument,
    options,
  )
}
export function useGetAccountsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetAccountsQuery,
        GetAccountsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetAccountsQuery, GetAccountsQueryVariables>(
    GetAccountsDocument,
    options,
  )
}
export type GetAccountsQueryHookResult = ReturnType<typeof useGetAccountsQuery>
export type GetAccountsLazyQueryHookResult = ReturnType<
  typeof useGetAccountsLazyQuery
>
export type GetAccountsSuspenseQueryHookResult = ReturnType<
  typeof useGetAccountsSuspenseQuery
>
export type GetAccountsQueryResult = Apollo.QueryResult<
  GetAccountsQuery,
  GetAccountsQueryVariables
>
export const GetAccountsWithAggregatesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAccountsWithAggregates' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'accounts_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'accounts_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'claimsLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'claimsOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'claimsWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'claims_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'positions_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'atomsWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'atoms_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'atomsOrderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'atoms_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'atomsLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'atomsOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'accounts_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountClaims' },
                      },
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountPositions' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountClaims' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'claims' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'position' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'shares' },
                            value: { kind: 'EnumValue', value: 'desc' },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'claimsLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'claimsOffset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'claimsWhere' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'position' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'shares' },
                      value: { kind: 'EnumValue', value: 'desc' },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'positionsLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'positionsOffset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'positionsWhere' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vault' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'atom' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'triple' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetAccountsWithAggregatesQuery__
 *
 * To run a query within a React component, call `useGetAccountsWithAggregatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAccountsWithAggregatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAccountsWithAggregatesQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *      claimsLimit: // value for 'claimsLimit'
 *      claimsOffset: // value for 'claimsOffset'
 *      claimsWhere: // value for 'claimsWhere'
 *      positionsLimit: // value for 'positionsLimit'
 *      positionsOffset: // value for 'positionsOffset'
 *      positionsWhere: // value for 'positionsWhere'
 *      atomsWhere: // value for 'atomsWhere'
 *      atomsOrderBy: // value for 'atomsOrderBy'
 *      atomsLimit: // value for 'atomsLimit'
 *      atomsOffset: // value for 'atomsOffset'
 *   },
 * });
 */
export function useGetAccountsWithAggregatesQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetAccountsWithAggregatesQuery,
    GetAccountsWithAggregatesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetAccountsWithAggregatesQuery,
    GetAccountsWithAggregatesQueryVariables
  >(GetAccountsWithAggregatesDocument, options)
}
export function useGetAccountsWithAggregatesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAccountsWithAggregatesQuery,
    GetAccountsWithAggregatesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetAccountsWithAggregatesQuery,
    GetAccountsWithAggregatesQueryVariables
  >(GetAccountsWithAggregatesDocument, options)
}
export function useGetAccountsWithAggregatesSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetAccountsWithAggregatesQuery,
        GetAccountsWithAggregatesQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetAccountsWithAggregatesQuery,
    GetAccountsWithAggregatesQueryVariables
  >(GetAccountsWithAggregatesDocument, options)
}
export type GetAccountsWithAggregatesQueryHookResult = ReturnType<
  typeof useGetAccountsWithAggregatesQuery
>
export type GetAccountsWithAggregatesLazyQueryHookResult = ReturnType<
  typeof useGetAccountsWithAggregatesLazyQuery
>
export type GetAccountsWithAggregatesSuspenseQueryHookResult = ReturnType<
  typeof useGetAccountsWithAggregatesSuspenseQuery
>
export type GetAccountsWithAggregatesQueryResult = Apollo.QueryResult<
  GetAccountsWithAggregatesQuery,
  GetAccountsWithAggregatesQueryVariables
>
export const GetAccountsCountDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAccountsCount' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'accounts_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'accounts_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetAccountsCountQuery__
 *
 * To run a query within a React component, call `useGetAccountsCountQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAccountsCountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAccountsCountQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetAccountsCountQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetAccountsCountQuery,
    GetAccountsCountQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetAccountsCountQuery, GetAccountsCountQueryVariables>(
    GetAccountsCountDocument,
    options,
  )
}
export function useGetAccountsCountLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAccountsCountQuery,
    GetAccountsCountQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetAccountsCountQuery,
    GetAccountsCountQueryVariables
  >(GetAccountsCountDocument, options)
}
export function useGetAccountsCountSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetAccountsCountQuery,
        GetAccountsCountQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetAccountsCountQuery,
    GetAccountsCountQueryVariables
  >(GetAccountsCountDocument, options)
}
export type GetAccountsCountQueryHookResult = ReturnType<
  typeof useGetAccountsCountQuery
>
export type GetAccountsCountLazyQueryHookResult = ReturnType<
  typeof useGetAccountsCountLazyQuery
>
export type GetAccountsCountSuspenseQueryHookResult = ReturnType<
  typeof useGetAccountsCountSuspenseQuery
>
export type GetAccountsCountQueryResult = Apollo.QueryResult<
  GetAccountsCountQuery,
  GetAccountsCountQueryVariables
>
export const GetAccountDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAccount' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'claimsLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'claimsOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'claimsWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'claims_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'positions_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'atomsWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'atoms_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'atomsOrderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'atoms_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'atomsLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'atomsOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'triplesWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'triples_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'triplesOrderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'triples_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'triplesLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'triplesOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'address' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountMetadata' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'atom' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AtomMetadata' },
                      },
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AtomVaultDetails' },
                      },
                    ],
                  },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountClaims' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountPositions' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountAtoms' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountTriples' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'chainlink_prices' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: { kind: 'IntValue', value: '1' },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'id' },
                      value: { kind: 'EnumValue', value: 'desc' },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'usd' } },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountClaims' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'claims' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'position' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'shares' },
                            value: { kind: 'EnumValue', value: 'desc' },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'claimsLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'claimsOffset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'claimsWhere' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'position' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'shares' },
                      value: { kind: 'EnumValue', value: 'desc' },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'positionsLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'positionsOffset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'positionsWhere' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vault' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'atom' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'triple' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountAtoms' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atoms' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsWhere' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsOrderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsOffset' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'positions_aggregate',
                              },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'address',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'nodes' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'account',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'id',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'shares',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountTriples' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesWhere' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesOrderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesOffset' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'subject' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'predicate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'object' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'data' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'AtomValue' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomVaultDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'position_count' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'aggregate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'count' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'sum' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'shares',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'positions_aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetAccountQuery__
 *
 * To run a query within a React component, call `useGetAccountQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAccountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAccountQuery({
 *   variables: {
 *      address: // value for 'address'
 *      claimsLimit: // value for 'claimsLimit'
 *      claimsOffset: // value for 'claimsOffset'
 *      claimsWhere: // value for 'claimsWhere'
 *      positionsLimit: // value for 'positionsLimit'
 *      positionsOffset: // value for 'positionsOffset'
 *      positionsWhere: // value for 'positionsWhere'
 *      atomsWhere: // value for 'atomsWhere'
 *      atomsOrderBy: // value for 'atomsOrderBy'
 *      atomsLimit: // value for 'atomsLimit'
 *      atomsOffset: // value for 'atomsOffset'
 *      triplesWhere: // value for 'triplesWhere'
 *      triplesOrderBy: // value for 'triplesOrderBy'
 *      triplesLimit: // value for 'triplesLimit'
 *      triplesOffset: // value for 'triplesOffset'
 *   },
 * });
 */
export function useGetAccountQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAccountQuery,
    GetAccountQueryVariables
  > &
    (
      | { variables: GetAccountQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetAccountQuery, GetAccountQueryVariables>(
    GetAccountDocument,
    options,
  )
}
export function useGetAccountLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAccountQuery,
    GetAccountQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetAccountQuery, GetAccountQueryVariables>(
    GetAccountDocument,
    options,
  )
}
export function useGetAccountSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetAccountQuery,
        GetAccountQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetAccountQuery, GetAccountQueryVariables>(
    GetAccountDocument,
    options,
  )
}
export type GetAccountQueryHookResult = ReturnType<typeof useGetAccountQuery>
export type GetAccountLazyQueryHookResult = ReturnType<
  typeof useGetAccountLazyQuery
>
export type GetAccountSuspenseQueryHookResult = ReturnType<
  typeof useGetAccountSuspenseQuery
>
export type GetAccountQueryResult = Apollo.QueryResult<
  GetAccountQuery,
  GetAccountQueryVariables
>
export const GetAccountWithPaginatedRelationsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAccountWithPaginatedRelations' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'claimsLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'claimsOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'claimsWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'claims_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'positions_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'atomsLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'atomsOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'atomsWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'atoms_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'atomsOrderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'atoms_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'triplesLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'triplesOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'triplesWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'triples_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'triplesOrderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'triples_order_by' },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'address' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountMetadata' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountClaims' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountPositions' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountAtoms' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountTriples' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountClaims' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'claims' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'position' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'shares' },
                            value: { kind: 'EnumValue', value: 'desc' },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'claimsLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'claimsOffset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'claimsWhere' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'position' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'shares' },
                      value: { kind: 'EnumValue', value: 'desc' },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'positionsLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'positionsOffset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'positionsWhere' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vault' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'atom' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'triple' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountAtoms' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atoms' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsWhere' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsOrderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsOffset' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'positions_aggregate',
                              },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'address',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'nodes' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'account',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'id',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'shares',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountTriples' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesWhere' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesOrderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesOffset' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'subject' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'predicate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'object' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetAccountWithPaginatedRelationsQuery__
 *
 * To run a query within a React component, call `useGetAccountWithPaginatedRelationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAccountWithPaginatedRelationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAccountWithPaginatedRelationsQuery({
 *   variables: {
 *      address: // value for 'address'
 *      claimsLimit: // value for 'claimsLimit'
 *      claimsOffset: // value for 'claimsOffset'
 *      claimsWhere: // value for 'claimsWhere'
 *      positionsLimit: // value for 'positionsLimit'
 *      positionsOffset: // value for 'positionsOffset'
 *      positionsWhere: // value for 'positionsWhere'
 *      atomsLimit: // value for 'atomsLimit'
 *      atomsOffset: // value for 'atomsOffset'
 *      atomsWhere: // value for 'atomsWhere'
 *      atomsOrderBy: // value for 'atomsOrderBy'
 *      triplesLimit: // value for 'triplesLimit'
 *      triplesOffset: // value for 'triplesOffset'
 *      triplesWhere: // value for 'triplesWhere'
 *      triplesOrderBy: // value for 'triplesOrderBy'
 *   },
 * });
 */
export function useGetAccountWithPaginatedRelationsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAccountWithPaginatedRelationsQuery,
    GetAccountWithPaginatedRelationsQueryVariables
  > &
    (
      | {
          variables: GetAccountWithPaginatedRelationsQueryVariables
          skip?: boolean
        }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetAccountWithPaginatedRelationsQuery,
    GetAccountWithPaginatedRelationsQueryVariables
  >(GetAccountWithPaginatedRelationsDocument, options)
}
export function useGetAccountWithPaginatedRelationsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAccountWithPaginatedRelationsQuery,
    GetAccountWithPaginatedRelationsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetAccountWithPaginatedRelationsQuery,
    GetAccountWithPaginatedRelationsQueryVariables
  >(GetAccountWithPaginatedRelationsDocument, options)
}
export function useGetAccountWithPaginatedRelationsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetAccountWithPaginatedRelationsQuery,
        GetAccountWithPaginatedRelationsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetAccountWithPaginatedRelationsQuery,
    GetAccountWithPaginatedRelationsQueryVariables
  >(GetAccountWithPaginatedRelationsDocument, options)
}
export type GetAccountWithPaginatedRelationsQueryHookResult = ReturnType<
  typeof useGetAccountWithPaginatedRelationsQuery
>
export type GetAccountWithPaginatedRelationsLazyQueryHookResult = ReturnType<
  typeof useGetAccountWithPaginatedRelationsLazyQuery
>
export type GetAccountWithPaginatedRelationsSuspenseQueryHookResult =
  ReturnType<typeof useGetAccountWithPaginatedRelationsSuspenseQuery>
export type GetAccountWithPaginatedRelationsQueryResult = Apollo.QueryResult<
  GetAccountWithPaginatedRelationsQuery,
  GetAccountWithPaginatedRelationsQueryVariables
>
export const GetAccountWithAggregatesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAccountWithAggregates' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'claimsLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'claimsOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'claimsWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'claims_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'positions_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'atomsWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'atoms_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'atomsOrderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'atoms_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'atomsLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'atomsOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'triplesWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'triples_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'triplesOrderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'triples_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'triplesLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'triplesOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'address' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountMetadata' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountClaimsAggregate' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountPositionsAggregate' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountAtomsAggregate' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AccountTriplesAggregate' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountClaimsAggregate' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'claims_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'position' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'shares' },
                            value: { kind: 'EnumValue', value: 'desc' },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'position' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountPositionsAggregate' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'shares' },
                      value: { kind: 'EnumValue', value: 'desc' },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vault' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'current_share_price',
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'atom' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'triple' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountAtomsAggregate' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atoms_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsWhere' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsOrderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'atomsOffset' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'sum' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'vaults' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'curve_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'StringValue',
                                                value: '1',
                                                block: false,
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'total_shares',
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'positions_aggregate',
                                    },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'account_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'Variable',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'address',
                                                      },
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'nodes',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'account',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'id',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'shares',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountTriplesAggregate' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesWhere' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesOrderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesLimit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'triplesOffset' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'subject' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'predicate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'object' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetAccountWithAggregatesQuery__
 *
 * To run a query within a React component, call `useGetAccountWithAggregatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAccountWithAggregatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAccountWithAggregatesQuery({
 *   variables: {
 *      address: // value for 'address'
 *      claimsLimit: // value for 'claimsLimit'
 *      claimsOffset: // value for 'claimsOffset'
 *      claimsWhere: // value for 'claimsWhere'
 *      positionsLimit: // value for 'positionsLimit'
 *      positionsOffset: // value for 'positionsOffset'
 *      positionsWhere: // value for 'positionsWhere'
 *      atomsWhere: // value for 'atomsWhere'
 *      atomsOrderBy: // value for 'atomsOrderBy'
 *      atomsLimit: // value for 'atomsLimit'
 *      atomsOffset: // value for 'atomsOffset'
 *      triplesWhere: // value for 'triplesWhere'
 *      triplesOrderBy: // value for 'triplesOrderBy'
 *      triplesLimit: // value for 'triplesLimit'
 *      triplesOffset: // value for 'triplesOffset'
 *   },
 * });
 */
export function useGetAccountWithAggregatesQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAccountWithAggregatesQuery,
    GetAccountWithAggregatesQueryVariables
  > &
    (
      | { variables: GetAccountWithAggregatesQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetAccountWithAggregatesQuery,
    GetAccountWithAggregatesQueryVariables
  >(GetAccountWithAggregatesDocument, options)
}
export function useGetAccountWithAggregatesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAccountWithAggregatesQuery,
    GetAccountWithAggregatesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetAccountWithAggregatesQuery,
    GetAccountWithAggregatesQueryVariables
  >(GetAccountWithAggregatesDocument, options)
}
export function useGetAccountWithAggregatesSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetAccountWithAggregatesQuery,
        GetAccountWithAggregatesQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetAccountWithAggregatesQuery,
    GetAccountWithAggregatesQueryVariables
  >(GetAccountWithAggregatesDocument, options)
}
export type GetAccountWithAggregatesQueryHookResult = ReturnType<
  typeof useGetAccountWithAggregatesQuery
>
export type GetAccountWithAggregatesLazyQueryHookResult = ReturnType<
  typeof useGetAccountWithAggregatesLazyQuery
>
export type GetAccountWithAggregatesSuspenseQueryHookResult = ReturnType<
  typeof useGetAccountWithAggregatesSuspenseQuery
>
export type GetAccountWithAggregatesQueryResult = Apollo.QueryResult<
  GetAccountWithAggregatesQuery,
  GetAccountWithAggregatesQueryVariables
>
export const GetAtomsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAtoms' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'atoms_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'atoms_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'total' },
            name: { kind: 'Name', value: 'atoms_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atoms' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomMetadata' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomTxn' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomVaultDetails' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomTriple' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'data' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'AtomValue' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomTxn' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'block_number' } },
          { kind: 'Field', name: { kind: 'Name', value: 'block_timestamp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'transaction_hash' } },
          { kind: 'Field', name: { kind: 'Name', value: 'creator_id' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomVaultDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'position_count' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'aggregate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'count' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'sum' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'shares',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'positions_aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomTriple' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'as_subject_triples' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'as_predicate_triples' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'as_object_triples' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetAtomsQuery__
 *
 * To run a query within a React component, call `useGetAtomsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAtomsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAtomsQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetAtomsQuery(
  baseOptions?: Apollo.QueryHookOptions<GetAtomsQuery, GetAtomsQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetAtomsQuery, GetAtomsQueryVariables>(
    GetAtomsDocument,
    options,
  )
}
export function useGetAtomsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAtomsQuery,
    GetAtomsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetAtomsQuery, GetAtomsQueryVariables>(
    GetAtomsDocument,
    options,
  )
}
export function useGetAtomsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<GetAtomsQuery, GetAtomsQueryVariables>,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetAtomsQuery, GetAtomsQueryVariables>(
    GetAtomsDocument,
    options,
  )
}
export type GetAtomsQueryHookResult = ReturnType<typeof useGetAtomsQuery>
export type GetAtomsLazyQueryHookResult = ReturnType<
  typeof useGetAtomsLazyQuery
>
export type GetAtomsSuspenseQueryHookResult = ReturnType<
  typeof useGetAtomsSuspenseQuery
>
export type GetAtomsQueryResult = Apollo.QueryResult<
  GetAtomsQuery,
  GetAtomsQueryVariables
>
export const GetAtomsWithPositionsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAtomsWithPositions' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'atoms_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'atoms_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'total' },
            name: { kind: 'Name', value: 'atoms_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atoms' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomMetadata' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomTxn' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'current_share_price',
                              },
                            },
                            {
                              kind: 'Field',
                              alias: { kind: 'Name', value: 'total' },
                              name: {
                                kind: 'Name',
                                value: 'positions_aggregate',
                              },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'aggregate' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'sum' },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'shares',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'address',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                      ],
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'as_subject_triples_aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'nodes' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'data' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'AtomValue' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomTxn' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'block_number' } },
          { kind: 'Field', name: { kind: 'Name', value: 'block_timestamp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'transaction_hash' } },
          { kind: 'Field', name: { kind: 'Name', value: 'creator_id' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetAtomsWithPositionsQuery__
 *
 * To run a query within a React component, call `useGetAtomsWithPositionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAtomsWithPositionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAtomsWithPositionsQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *      address: // value for 'address'
 *   },
 * });
 */
export function useGetAtomsWithPositionsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetAtomsWithPositionsQuery,
    GetAtomsWithPositionsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetAtomsWithPositionsQuery,
    GetAtomsWithPositionsQueryVariables
  >(GetAtomsWithPositionsDocument, options)
}
export function useGetAtomsWithPositionsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAtomsWithPositionsQuery,
    GetAtomsWithPositionsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetAtomsWithPositionsQuery,
    GetAtomsWithPositionsQueryVariables
  >(GetAtomsWithPositionsDocument, options)
}
export function useGetAtomsWithPositionsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetAtomsWithPositionsQuery,
        GetAtomsWithPositionsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetAtomsWithPositionsQuery,
    GetAtomsWithPositionsQueryVariables
  >(GetAtomsWithPositionsDocument, options)
}
export type GetAtomsWithPositionsQueryHookResult = ReturnType<
  typeof useGetAtomsWithPositionsQuery
>
export type GetAtomsWithPositionsLazyQueryHookResult = ReturnType<
  typeof useGetAtomsWithPositionsLazyQuery
>
export type GetAtomsWithPositionsSuspenseQueryHookResult = ReturnType<
  typeof useGetAtomsWithPositionsSuspenseQuery
>
export type GetAtomsWithPositionsQueryResult = Apollo.QueryResult<
  GetAtomsWithPositionsQuery,
  GetAtomsWithPositionsQueryVariables
>
export const GetAtomsWithAggregatesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAtomsWithAggregates' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'atoms_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'atoms_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atoms_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AtomMetadata' },
                      },
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AtomTxn' },
                      },
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AtomVaultDetails' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'data' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'AtomValue' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomTxn' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'block_number' } },
          { kind: 'Field', name: { kind: 'Name', value: 'block_timestamp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'transaction_hash' } },
          { kind: 'Field', name: { kind: 'Name', value: 'creator_id' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomVaultDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'position_count' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'aggregate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'count' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'sum' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'shares',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'positions_aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetAtomsWithAggregatesQuery__
 *
 * To run a query within a React component, call `useGetAtomsWithAggregatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAtomsWithAggregatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAtomsWithAggregatesQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetAtomsWithAggregatesQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetAtomsWithAggregatesQuery,
    GetAtomsWithAggregatesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetAtomsWithAggregatesQuery,
    GetAtomsWithAggregatesQueryVariables
  >(GetAtomsWithAggregatesDocument, options)
}
export function useGetAtomsWithAggregatesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAtomsWithAggregatesQuery,
    GetAtomsWithAggregatesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetAtomsWithAggregatesQuery,
    GetAtomsWithAggregatesQueryVariables
  >(GetAtomsWithAggregatesDocument, options)
}
export function useGetAtomsWithAggregatesSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetAtomsWithAggregatesQuery,
        GetAtomsWithAggregatesQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetAtomsWithAggregatesQuery,
    GetAtomsWithAggregatesQueryVariables
  >(GetAtomsWithAggregatesDocument, options)
}
export type GetAtomsWithAggregatesQueryHookResult = ReturnType<
  typeof useGetAtomsWithAggregatesQuery
>
export type GetAtomsWithAggregatesLazyQueryHookResult = ReturnType<
  typeof useGetAtomsWithAggregatesLazyQuery
>
export type GetAtomsWithAggregatesSuspenseQueryHookResult = ReturnType<
  typeof useGetAtomsWithAggregatesSuspenseQuery
>
export type GetAtomsWithAggregatesQueryResult = Apollo.QueryResult<
  GetAtomsWithAggregatesQuery,
  GetAtomsWithAggregatesQueryVariables
>
export const GetAtomsCountDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAtomsCount' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'atoms_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atoms_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetAtomsCountQuery__
 *
 * To run a query within a React component, call `useGetAtomsCountQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAtomsCountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAtomsCountQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetAtomsCountQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetAtomsCountQuery,
    GetAtomsCountQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetAtomsCountQuery, GetAtomsCountQueryVariables>(
    GetAtomsCountDocument,
    options,
  )
}
export function useGetAtomsCountLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAtomsCountQuery,
    GetAtomsCountQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetAtomsCountQuery, GetAtomsCountQueryVariables>(
    GetAtomsCountDocument,
    options,
  )
}
export function useGetAtomsCountSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetAtomsCountQuery,
        GetAtomsCountQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetAtomsCountQuery,
    GetAtomsCountQueryVariables
  >(GetAtomsCountDocument, options)
}
export type GetAtomsCountQueryHookResult = ReturnType<
  typeof useGetAtomsCountQuery
>
export type GetAtomsCountLazyQueryHookResult = ReturnType<
  typeof useGetAtomsCountLazyQuery
>
export type GetAtomsCountSuspenseQueryHookResult = ReturnType<
  typeof useGetAtomsCountSuspenseQuery
>
export type GetAtomsCountQueryResult = Apollo.QueryResult<
  GetAtomsCountQuery,
  GetAtomsCountQueryVariables
>
export const GetAtomDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAtom' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'term_id' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atom' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'term_id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'term_id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomMetadata' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomTxn' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomVaultDetails' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomTriple' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'data' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'AtomValue' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomTxn' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'block_number' } },
          { kind: 'Field', name: { kind: 'Name', value: 'block_timestamp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'transaction_hash' } },
          { kind: 'Field', name: { kind: 'Name', value: 'creator_id' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomVaultDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'position_count' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'aggregate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'count' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'sum' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'shares',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'positions_aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomTriple' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'as_subject_triples' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'as_predicate_triples' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'as_object_triples' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetAtomQuery__
 *
 * To run a query within a React component, call `useGetAtomQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAtomQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAtomQuery({
 *   variables: {
 *      term_id: // value for 'term_id'
 *   },
 * });
 */
export function useGetAtomQuery(
  baseOptions: Apollo.QueryHookOptions<GetAtomQuery, GetAtomQueryVariables> &
    ({ variables: GetAtomQueryVariables; skip?: boolean } | { skip: boolean }),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetAtomQuery, GetAtomQueryVariables>(
    GetAtomDocument,
    options,
  )
}
export function useGetAtomLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAtomQuery,
    GetAtomQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetAtomQuery, GetAtomQueryVariables>(
    GetAtomDocument,
    options,
  )
}
export function useGetAtomSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<GetAtomQuery, GetAtomQueryVariables>,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetAtomQuery, GetAtomQueryVariables>(
    GetAtomDocument,
    options,
  )
}
export type GetAtomQueryHookResult = ReturnType<typeof useGetAtomQuery>
export type GetAtomLazyQueryHookResult = ReturnType<typeof useGetAtomLazyQuery>
export type GetAtomSuspenseQueryHookResult = ReturnType<
  typeof useGetAtomSuspenseQuery
>
export type GetAtomQueryResult = Apollo.QueryResult<
  GetAtomQuery,
  GetAtomQueryVariables
>
export const GetAtomByDataDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAtomByData' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'data' } },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atoms' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'data' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_eq' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'data' },
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomMetadata' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomTxn' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomVaultDetails' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomTriple' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'data' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'AtomValue' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomTxn' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'block_number' } },
          { kind: 'Field', name: { kind: 'Name', value: 'block_timestamp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'transaction_hash' } },
          { kind: 'Field', name: { kind: 'Name', value: 'creator_id' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomVaultDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'position_count' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'aggregate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'count' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'sum' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'shares',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'positions_aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomTriple' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'as_subject_triples' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'as_predicate_triples' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'as_object_triples' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetAtomByDataQuery__
 *
 * To run a query within a React component, call `useGetAtomByDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAtomByDataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAtomByDataQuery({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useGetAtomByDataQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAtomByDataQuery,
    GetAtomByDataQueryVariables
  > &
    (
      | { variables: GetAtomByDataQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetAtomByDataQuery, GetAtomByDataQueryVariables>(
    GetAtomByDataDocument,
    options,
  )
}
export function useGetAtomByDataLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAtomByDataQuery,
    GetAtomByDataQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetAtomByDataQuery, GetAtomByDataQueryVariables>(
    GetAtomByDataDocument,
    options,
  )
}
export function useGetAtomByDataSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetAtomByDataQuery,
        GetAtomByDataQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetAtomByDataQuery,
    GetAtomByDataQueryVariables
  >(GetAtomByDataDocument, options)
}
export type GetAtomByDataQueryHookResult = ReturnType<
  typeof useGetAtomByDataQuery
>
export type GetAtomByDataLazyQueryHookResult = ReturnType<
  typeof useGetAtomByDataLazyQuery
>
export type GetAtomByDataSuspenseQueryHookResult = ReturnType<
  typeof useGetAtomByDataSuspenseQuery
>
export type GetAtomByDataQueryResult = Apollo.QueryResult<
  GetAtomByDataQuery,
  GetAtomByDataQueryVariables
>
export const GetVerifiedAtomDetailsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetVerifiedAtomDetails' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'userPositionAddress' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atom' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'term_id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'block_timestamp' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'value' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'thing' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'name' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'description' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'url' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'term_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'Variable',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'current_share_price',
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              alias: { kind: 'Name', value: 'userPosition' },
                              name: { kind: 'Name', value: 'positions' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'limit' },
                                  value: { kind: 'IntValue', value: '1' },
                                },
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'userPositionAddress',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account_id' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  alias: { kind: 'Name', value: 'tags' },
                  name: { kind: 'Name', value: 'as_subject_triples_aggregate' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'predicate_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_in' },
                                  value: {
                                    kind: 'ListValue',
                                    values: [{ kind: 'IntValue', value: '3' }],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'nodes' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'vaults',
                                          },
                                          arguments: [
                                            {
                                              kind: 'Argument',
                                              name: {
                                                kind: 'Name',
                                                value: 'where',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'curve_id',
                                                    },
                                                    value: {
                                                      kind: 'ObjectValue',
                                                      fields: [
                                                        {
                                                          kind: 'ObjectField',
                                                          name: {
                                                            kind: 'Name',
                                                            value: '_eq',
                                                          },
                                                          value: {
                                                            kind: 'StringValue',
                                                            value: '1',
                                                            block: false,
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'term_id',
                                                    },
                                                    value: {
                                                      kind: 'ObjectValue',
                                                      fields: [
                                                        {
                                                          kind: 'ObjectField',
                                                          name: {
                                                            kind: 'Name',
                                                            value: '_eq',
                                                          },
                                                          value: {
                                                            kind: 'Variable',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'id',
                                                            },
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'term_id',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate_id' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  alias: { kind: 'Name', value: 'verificationTriple' },
                  name: { kind: 'Name', value: 'as_subject_triples_aggregate' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'predicate_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '4',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'object_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '126451',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'nodes' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions',
                                          },
                                          arguments: [
                                            {
                                              kind: 'Argument',
                                              name: {
                                                kind: 'Name',
                                                value: 'where',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'account_id',
                                                    },
                                                    value: {
                                                      kind: 'ObjectValue',
                                                      fields: [
                                                        {
                                                          kind: 'ObjectField',
                                                          name: {
                                                            kind: 'Name',
                                                            value: '_in',
                                                          },
                                                          value: {
                                                            kind: 'ListValue',
                                                            values: [
                                                              {
                                                                kind: 'StringValue',
                                                                value:
                                                                  '0xd99811847e634d33f0dace483c52949bec76300f',
                                                                block: false,
                                                              },
                                                              {
                                                                kind: 'StringValue',
                                                                value:
                                                                  '0xbb285b543c96c927fc320fb28524899c2c90806c',
                                                                block: false,
                                                              },
                                                              {
                                                                kind: 'StringValue',
                                                                value:
                                                                  '0x0b162525c5dc8c18f771e60fd296913030bfe42c',
                                                                block: false,
                                                              },
                                                              {
                                                                kind: 'StringValue',
                                                                value:
                                                                  '0xbd2de08af9470c87c4475117fb912b8f1d588d9c',
                                                                block: false,
                                                              },
                                                              {
                                                                kind: 'StringValue',
                                                                value:
                                                                  '0xb95ca3d3144e9d1daff0ee3d35a4488a4a5c9fc5',
                                                                block: false,
                                                              },
                                                            ],
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'id',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'shares',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'account_id',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'account',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'id',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetVerifiedAtomDetailsQuery__
 *
 * To run a query within a React component, call `useGetVerifiedAtomDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetVerifiedAtomDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetVerifiedAtomDetailsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      userPositionAddress: // value for 'userPositionAddress'
 *   },
 * });
 */
export function useGetVerifiedAtomDetailsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetVerifiedAtomDetailsQuery,
    GetVerifiedAtomDetailsQueryVariables
  > &
    (
      | { variables: GetVerifiedAtomDetailsQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetVerifiedAtomDetailsQuery,
    GetVerifiedAtomDetailsQueryVariables
  >(GetVerifiedAtomDetailsDocument, options)
}
export function useGetVerifiedAtomDetailsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetVerifiedAtomDetailsQuery,
    GetVerifiedAtomDetailsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetVerifiedAtomDetailsQuery,
    GetVerifiedAtomDetailsQueryVariables
  >(GetVerifiedAtomDetailsDocument, options)
}
export function useGetVerifiedAtomDetailsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetVerifiedAtomDetailsQuery,
        GetVerifiedAtomDetailsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetVerifiedAtomDetailsQuery,
    GetVerifiedAtomDetailsQueryVariables
  >(GetVerifiedAtomDetailsDocument, options)
}
export type GetVerifiedAtomDetailsQueryHookResult = ReturnType<
  typeof useGetVerifiedAtomDetailsQuery
>
export type GetVerifiedAtomDetailsLazyQueryHookResult = ReturnType<
  typeof useGetVerifiedAtomDetailsLazyQuery
>
export type GetVerifiedAtomDetailsSuspenseQueryHookResult = ReturnType<
  typeof useGetVerifiedAtomDetailsSuspenseQuery
>
export type GetVerifiedAtomDetailsQueryResult = Apollo.QueryResult<
  GetVerifiedAtomDetailsQuery,
  GetVerifiedAtomDetailsQueryVariables
>
export const GetAtomDetailsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAtomDetails' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'userPositionAddress' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atom' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'term_id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'block_timestamp' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'value' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'thing' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'name' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'description' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'url' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'term_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'Variable',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'current_share_price',
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              alias: { kind: 'Name', value: 'userPosition' },
                              name: { kind: 'Name', value: 'positions' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'limit' },
                                  value: { kind: 'IntValue', value: '1' },
                                },
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'userPositionAddress',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account_id' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  alias: { kind: 'Name', value: 'tags' },
                  name: { kind: 'Name', value: 'as_subject_triples_aggregate' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'predicate_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_in' },
                                  value: {
                                    kind: 'ListValue',
                                    values: [{ kind: 'IntValue', value: '3' }],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'nodes' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'vaults',
                                          },
                                          arguments: [
                                            {
                                              kind: 'Argument',
                                              name: {
                                                kind: 'Name',
                                                value: 'where',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'curve_id',
                                                    },
                                                    value: {
                                                      kind: 'ObjectValue',
                                                      fields: [
                                                        {
                                                          kind: 'ObjectField',
                                                          name: {
                                                            kind: 'Name',
                                                            value: '_eq',
                                                          },
                                                          value: {
                                                            kind: 'StringValue',
                                                            value: '1',
                                                            block: false,
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'term_id',
                                                    },
                                                    value: {
                                                      kind: 'ObjectValue',
                                                      fields: [
                                                        {
                                                          kind: 'ObjectField',
                                                          name: {
                                                            kind: 'Name',
                                                            value: '_eq',
                                                          },
                                                          value: {
                                                            kind: 'Variable',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'id',
                                                            },
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'term_id',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate_id' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetAtomDetailsQuery__
 *
 * To run a query within a React component, call `useGetAtomDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAtomDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAtomDetailsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      userPositionAddress: // value for 'userPositionAddress'
 *   },
 * });
 */
export function useGetAtomDetailsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAtomDetailsQuery,
    GetAtomDetailsQueryVariables
  > &
    (
      | { variables: GetAtomDetailsQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetAtomDetailsQuery, GetAtomDetailsQueryVariables>(
    GetAtomDetailsDocument,
    options,
  )
}
export function useGetAtomDetailsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAtomDetailsQuery,
    GetAtomDetailsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetAtomDetailsQuery, GetAtomDetailsQueryVariables>(
    GetAtomDetailsDocument,
    options,
  )
}
export function useGetAtomDetailsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetAtomDetailsQuery,
        GetAtomDetailsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetAtomDetailsQuery,
    GetAtomDetailsQueryVariables
  >(GetAtomDetailsDocument, options)
}
export type GetAtomDetailsQueryHookResult = ReturnType<
  typeof useGetAtomDetailsQuery
>
export type GetAtomDetailsLazyQueryHookResult = ReturnType<
  typeof useGetAtomDetailsLazyQuery
>
export type GetAtomDetailsSuspenseQueryHookResult = ReturnType<
  typeof useGetAtomDetailsSuspenseQuery
>
export type GetAtomDetailsQueryResult = Apollo.QueryResult<
  GetAtomDetailsQuery,
  GetAtomDetailsQueryVariables
>
export const GetAtomsByCreatorDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAtomsByCreator' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atoms' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'creator' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'address' },
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'block_number' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'block_timestamp' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'transaction_hash' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'creator_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'value' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'thing' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'name' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'description' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'url' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_market_cap' },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'as_subject_triples_aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'nodes' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetAtomsByCreatorQuery__
 *
 * To run a query within a React component, call `useGetAtomsByCreatorQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAtomsByCreatorQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAtomsByCreatorQuery({
 *   variables: {
 *      address: // value for 'address'
 *   },
 * });
 */
export function useGetAtomsByCreatorQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAtomsByCreatorQuery,
    GetAtomsByCreatorQueryVariables
  > &
    (
      | { variables: GetAtomsByCreatorQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetAtomsByCreatorQuery,
    GetAtomsByCreatorQueryVariables
  >(GetAtomsByCreatorDocument, options)
}
export function useGetAtomsByCreatorLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAtomsByCreatorQuery,
    GetAtomsByCreatorQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetAtomsByCreatorQuery,
    GetAtomsByCreatorQueryVariables
  >(GetAtomsByCreatorDocument, options)
}
export function useGetAtomsByCreatorSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetAtomsByCreatorQuery,
        GetAtomsByCreatorQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetAtomsByCreatorQuery,
    GetAtomsByCreatorQueryVariables
  >(GetAtomsByCreatorDocument, options)
}
export type GetAtomsByCreatorQueryHookResult = ReturnType<
  typeof useGetAtomsByCreatorQuery
>
export type GetAtomsByCreatorLazyQueryHookResult = ReturnType<
  typeof useGetAtomsByCreatorLazyQuery
>
export type GetAtomsByCreatorSuspenseQueryHookResult = ReturnType<
  typeof useGetAtomsByCreatorSuspenseQuery
>
export type GetAtomsByCreatorQueryResult = Apollo.QueryResult<
  GetAtomsByCreatorQuery,
  GetAtomsByCreatorQueryVariables
>
export const GetClaimsByAddressDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetClaimsByAddress' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'claims_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'account_id' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_eq' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'address' },
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'account' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'position' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'triple' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'subject',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'label',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'predicate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'label',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'object',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'label',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'counter_term_id',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetClaimsByAddressQuery__
 *
 * To run a query within a React component, call `useGetClaimsByAddressQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClaimsByAddressQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClaimsByAddressQuery({
 *   variables: {
 *      address: // value for 'address'
 *   },
 * });
 */
export function useGetClaimsByAddressQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetClaimsByAddressQuery,
    GetClaimsByAddressQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetClaimsByAddressQuery,
    GetClaimsByAddressQueryVariables
  >(GetClaimsByAddressDocument, options)
}
export function useGetClaimsByAddressLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClaimsByAddressQuery,
    GetClaimsByAddressQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetClaimsByAddressQuery,
    GetClaimsByAddressQueryVariables
  >(GetClaimsByAddressDocument, options)
}
export function useGetClaimsByAddressSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetClaimsByAddressQuery,
        GetClaimsByAddressQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetClaimsByAddressQuery,
    GetClaimsByAddressQueryVariables
  >(GetClaimsByAddressDocument, options)
}
export type GetClaimsByAddressQueryHookResult = ReturnType<
  typeof useGetClaimsByAddressQuery
>
export type GetClaimsByAddressLazyQueryHookResult = ReturnType<
  typeof useGetClaimsByAddressLazyQuery
>
export type GetClaimsByAddressSuspenseQueryHookResult = ReturnType<
  typeof useGetClaimsByAddressSuspenseQuery
>
export type GetClaimsByAddressQueryResult = Apollo.QueryResult<
  GetClaimsByAddressQuery,
  GetClaimsByAddressQueryVariables
>
export const GetClaimsByUriDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetClaimsByUri' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'uri' } },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atoms' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: '_or' },
                      value: {
                        kind: 'ListValue',
                        values: [
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'data' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: { kind: 'Name', value: 'uri' },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'value' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: 'thing' },
                                      value: {
                                        kind: 'ObjectValue',
                                        fields: [
                                          {
                                            kind: 'ObjectField',
                                            name: {
                                              kind: 'Name',
                                              value: 'url',
                                            },
                                            value: {
                                              kind: 'ObjectValue',
                                              fields: [
                                                {
                                                  kind: 'ObjectField',
                                                  name: {
                                                    kind: 'Name',
                                                    value: '_eq',
                                                  },
                                                  value: {
                                                    kind: 'Variable',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'uri',
                                                    },
                                                  },
                                                },
                                              ],
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'value' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: 'person' },
                                      value: {
                                        kind: 'ObjectValue',
                                        fields: [
                                          {
                                            kind: 'ObjectField',
                                            name: {
                                              kind: 'Name',
                                              value: 'url',
                                            },
                                            value: {
                                              kind: 'ObjectValue',
                                              fields: [
                                                {
                                                  kind: 'ObjectField',
                                                  name: {
                                                    kind: 'Name',
                                                    value: '_eq',
                                                  },
                                                  value: {
                                                    kind: 'Variable',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'uri',
                                                    },
                                                  },
                                                },
                                              ],
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'value' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: {
                                        kind: 'Name',
                                        value: 'organization',
                                      },
                                      value: {
                                        kind: 'ObjectValue',
                                        fields: [
                                          {
                                            kind: 'ObjectField',
                                            name: {
                                              kind: 'Name',
                                              value: 'url',
                                            },
                                            value: {
                                              kind: 'ObjectValue',
                                              fields: [
                                                {
                                                  kind: 'ObjectField',
                                                  name: {
                                                    kind: 'Name',
                                                    value: '_eq',
                                                  },
                                                  value: {
                                                    kind: 'Variable',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'uri',
                                                    },
                                                  },
                                                },
                                              ],
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'value' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: 'book' },
                                      value: {
                                        kind: 'ObjectValue',
                                        fields: [
                                          {
                                            kind: 'ObjectField',
                                            name: {
                                              kind: 'Name',
                                              value: 'url',
                                            },
                                            value: {
                                              kind: 'ObjectValue',
                                              fields: [
                                                {
                                                  kind: 'ObjectField',
                                                  name: {
                                                    kind: 'Name',
                                                    value: '_eq',
                                                  },
                                                  value: {
                                                    kind: 'Variable',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'uri',
                                                    },
                                                  },
                                                },
                                              ],
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'as_subject_triples_aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'nodes' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'address',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'positions_aggregate',
                              },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'aggregate' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'count',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'counter_positions',
                              },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'address',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'counter_positions_aggregate',
                              },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'aggregate' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'count',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'creator' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'as_object_triples_aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'nodes' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'subject' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'positions_aggregate',
                              },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'aggregate' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'count',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'address',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'counter_positions_aggregate',
                              },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'aggregate' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'count',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'counter_positions',
                              },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'address',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'creator' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'as_predicate_triples_aggregate',
                  },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'nodes' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'subject' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'positions_aggregate',
                              },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'aggregate' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'count',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'address',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'counter_positions_aggregate',
                              },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'aggregate' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'count',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'counter_positions',
                              },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'address',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'creator' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'positions_aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'value' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'thing' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'description' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'url' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetClaimsByUriQuery__
 *
 * To run a query within a React component, call `useGetClaimsByUriQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClaimsByUriQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClaimsByUriQuery({
 *   variables: {
 *      address: // value for 'address'
 *      uri: // value for 'uri'
 *   },
 * });
 */
export function useGetClaimsByUriQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetClaimsByUriQuery,
    GetClaimsByUriQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetClaimsByUriQuery, GetClaimsByUriQueryVariables>(
    GetClaimsByUriDocument,
    options,
  )
}
export function useGetClaimsByUriLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetClaimsByUriQuery,
    GetClaimsByUriQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetClaimsByUriQuery, GetClaimsByUriQueryVariables>(
    GetClaimsByUriDocument,
    options,
  )
}
export function useGetClaimsByUriSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetClaimsByUriQuery,
        GetClaimsByUriQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetClaimsByUriQuery,
    GetClaimsByUriQueryVariables
  >(GetClaimsByUriDocument, options)
}
export type GetClaimsByUriQueryHookResult = ReturnType<
  typeof useGetClaimsByUriQuery
>
export type GetClaimsByUriLazyQueryHookResult = ReturnType<
  typeof useGetClaimsByUriLazyQuery
>
export type GetClaimsByUriSuspenseQueryHookResult = ReturnType<
  typeof useGetClaimsByUriSuspenseQuery
>
export type GetClaimsByUriQueryResult = Apollo.QueryResult<
  GetClaimsByUriQuery,
  GetClaimsByUriQueryVariables
>
export const GetEventsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetEvents' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'events_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'events_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'addresses' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'String' },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'total' },
            name: { kind: 'Name', value: 'events_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'events' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'block_number' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'block_timestamp' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'transaction_hash' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'triple_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'deposit_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'redemption_id' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'atom' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AtomMetadata' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'vaults' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'curve_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'StringValue',
                                                value: '1',
                                                block: false,
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'total_shares',
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'position_count',
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'positions' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'account',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'id',
                                                    },
                                                    value: {
                                                      kind: 'ObjectValue',
                                                      fields: [
                                                        {
                                                          kind: 'ObjectField',
                                                          name: {
                                                            kind: 'Name',
                                                            value: '_in',
                                                          },
                                                          value: {
                                                            kind: 'Variable',
                                                            name: {
                                                              kind: 'Name',
                                                              value:
                                                                'addresses',
                                                            },
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'account_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'shares',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'account',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'id',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'label',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'image',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'triple' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'subject' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'data' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'emoji' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'type' },
                            },
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AtomValue' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'creator' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'FragmentSpread',
                                    name: {
                                      kind: 'Name',
                                      value: 'AccountMetadata',
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'predicate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'data' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'emoji' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'type' },
                            },
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AtomValue' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'creator' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'FragmentSpread',
                                    name: {
                                      kind: 'Name',
                                      value: 'AccountMetadata',
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'object' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'data' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'emoji' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'type' },
                            },
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AtomValue' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'creator' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'FragmentSpread',
                                    name: {
                                      kind: 'Name',
                                      value: 'AccountMetadata',
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'vaults' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'curve_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'StringValue',
                                                value: '1',
                                                block: false,
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'total_shares',
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'position_count',
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'positions' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'account',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'id',
                                                    },
                                                    value: {
                                                      kind: 'ObjectValue',
                                                      fields: [
                                                        {
                                                          kind: 'ObjectField',
                                                          name: {
                                                            kind: 'Name',
                                                            value: '_in',
                                                          },
                                                          value: {
                                                            kind: 'Variable',
                                                            name: {
                                                              kind: 'Name',
                                                              value:
                                                                'addresses',
                                                            },
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'account_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'shares',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'account',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'id',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'label',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'image',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'counter_term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'vaults' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'curve_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'StringValue',
                                                value: '1',
                                                block: false,
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'total_shares',
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'position_count',
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'positions' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'account',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'id',
                                                    },
                                                    value: {
                                                      kind: 'ObjectValue',
                                                      fields: [
                                                        {
                                                          kind: 'ObjectField',
                                                          name: {
                                                            kind: 'Name',
                                                            value: '_in',
                                                          },
                                                          value: {
                                                            kind: 'Variable',
                                                            name: {
                                                              kind: 'Name',
                                                              value:
                                                                'addresses',
                                                            },
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'account_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'shares',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'account',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'id',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'label',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'image',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'deposit' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'sender_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'sender' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares_for_receiver' },
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'sender_assets_after_total_fees',
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vault' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_in',
                                                    },
                                                    value: {
                                                      kind: 'Variable',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'addresses',
                                                      },
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'image',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'redemption' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'sender_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'sender' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'data' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'AtomValue' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetEventsQuery__
 *
 * To run a query within a React component, call `useGetEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEventsQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *      addresses: // value for 'addresses'
 *   },
 * });
 */
export function useGetEventsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetEventsQuery,
    GetEventsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetEventsQuery, GetEventsQueryVariables>(
    GetEventsDocument,
    options,
  )
}
export function useGetEventsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEventsQuery,
    GetEventsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetEventsQuery, GetEventsQueryVariables>(
    GetEventsDocument,
    options,
  )
}
export function useGetEventsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<GetEventsQuery, GetEventsQueryVariables>,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetEventsQuery, GetEventsQueryVariables>(
    GetEventsDocument,
    options,
  )
}
export type GetEventsQueryHookResult = ReturnType<typeof useGetEventsQuery>
export type GetEventsLazyQueryHookResult = ReturnType<
  typeof useGetEventsLazyQuery
>
export type GetEventsSuspenseQueryHookResult = ReturnType<
  typeof useGetEventsSuspenseQuery
>
export type GetEventsQueryResult = Apollo.QueryResult<
  GetEventsQuery,
  GetEventsQueryVariables
>
export const GetEventsWithAggregatesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetEventsWithAggregates' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'events_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'events_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'addresses' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'String' },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'events_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'max' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'block_timestamp' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'block_number' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'min' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'block_timestamp' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'block_number' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'EventDetails' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'data' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'AtomValue' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'DepositEventFragment' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'events' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'deposit' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'sender_assets_after_total_fees',
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'shares_for_receiver' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'receiver' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sender' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EventDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'events' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'block_number' } },
          { kind: 'Field', name: { kind: 'Name', value: 'block_timestamp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'transaction_hash' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'triple_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'deposit_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'redemption_id' } },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'DepositEventFragment' },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'RedemptionEventFragment' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atom' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomMetadata' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'image',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triple' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'TripleMetadata' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'image',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'image',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'total_shares' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'current_share_price' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionAggregateFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions_aggregate' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'aggregate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sum' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'RedemptionEventFragment' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'events' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'redemption' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'receiver_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'shares_redeemed_by_sender' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'assets_for_receiver' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'subject_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'predicate_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'object_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'subject' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'predicate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'object' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'allPositions' },
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: {
                                kind: 'Name',
                                value: 'PositionAggregateFields',
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionFields' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'counter_term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'allPositions' },
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: {
                                kind: 'Name',
                                value: 'PositionAggregateFields',
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionFields' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetEventsWithAggregatesQuery__
 *
 * To run a query within a React component, call `useGetEventsWithAggregatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEventsWithAggregatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEventsWithAggregatesQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *      addresses: // value for 'addresses'
 *   },
 * });
 */
export function useGetEventsWithAggregatesQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetEventsWithAggregatesQuery,
    GetEventsWithAggregatesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetEventsWithAggregatesQuery,
    GetEventsWithAggregatesQueryVariables
  >(GetEventsWithAggregatesDocument, options)
}
export function useGetEventsWithAggregatesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEventsWithAggregatesQuery,
    GetEventsWithAggregatesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetEventsWithAggregatesQuery,
    GetEventsWithAggregatesQueryVariables
  >(GetEventsWithAggregatesDocument, options)
}
export function useGetEventsWithAggregatesSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetEventsWithAggregatesQuery,
        GetEventsWithAggregatesQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetEventsWithAggregatesQuery,
    GetEventsWithAggregatesQueryVariables
  >(GetEventsWithAggregatesDocument, options)
}
export type GetEventsWithAggregatesQueryHookResult = ReturnType<
  typeof useGetEventsWithAggregatesQuery
>
export type GetEventsWithAggregatesLazyQueryHookResult = ReturnType<
  typeof useGetEventsWithAggregatesLazyQuery
>
export type GetEventsWithAggregatesSuspenseQueryHookResult = ReturnType<
  typeof useGetEventsWithAggregatesSuspenseQuery
>
export type GetEventsWithAggregatesQueryResult = Apollo.QueryResult<
  GetEventsWithAggregatesQuery,
  GetEventsWithAggregatesQueryVariables
>
export const GetEventsCountDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetEventsCount' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'events_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'events_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetEventsCountQuery__
 *
 * To run a query within a React component, call `useGetEventsCountQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEventsCountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEventsCountQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetEventsCountQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetEventsCountQuery,
    GetEventsCountQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetEventsCountQuery, GetEventsCountQueryVariables>(
    GetEventsCountDocument,
    options,
  )
}
export function useGetEventsCountLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEventsCountQuery,
    GetEventsCountQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetEventsCountQuery, GetEventsCountQueryVariables>(
    GetEventsCountDocument,
    options,
  )
}
export function useGetEventsCountSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetEventsCountQuery,
        GetEventsCountQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetEventsCountQuery,
    GetEventsCountQueryVariables
  >(GetEventsCountDocument, options)
}
export type GetEventsCountQueryHookResult = ReturnType<
  typeof useGetEventsCountQuery
>
export type GetEventsCountLazyQueryHookResult = ReturnType<
  typeof useGetEventsCountLazyQuery
>
export type GetEventsCountSuspenseQueryHookResult = ReturnType<
  typeof useGetEventsCountSuspenseQuery
>
export type GetEventsCountQueryResult = Apollo.QueryResult<
  GetEventsCountQuery,
  GetEventsCountQueryVariables
>
export const GetEventsDataDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetEventsData' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'events_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'events_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'max' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'block_timestamp' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'block_number' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'min' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'block_timestamp' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'block_number' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'avg' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'block_number' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetEventsDataQuery__
 *
 * To run a query within a React component, call `useGetEventsDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEventsDataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEventsDataQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetEventsDataQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetEventsDataQuery,
    GetEventsDataQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetEventsDataQuery, GetEventsDataQueryVariables>(
    GetEventsDataDocument,
    options,
  )
}
export function useGetEventsDataLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEventsDataQuery,
    GetEventsDataQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetEventsDataQuery, GetEventsDataQueryVariables>(
    GetEventsDataDocument,
    options,
  )
}
export function useGetEventsDataSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetEventsDataQuery,
        GetEventsDataQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetEventsDataQuery,
    GetEventsDataQueryVariables
  >(GetEventsDataDocument, options)
}
export type GetEventsDataQueryHookResult = ReturnType<
  typeof useGetEventsDataQuery
>
export type GetEventsDataLazyQueryHookResult = ReturnType<
  typeof useGetEventsDataLazyQuery
>
export type GetEventsDataSuspenseQueryHookResult = ReturnType<
  typeof useGetEventsDataSuspenseQuery
>
export type GetEventsDataQueryResult = Apollo.QueryResult<
  GetEventsDataQuery,
  GetEventsDataQueryVariables
>
export const GetDebugEventsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetDebugEvents' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'addresses' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'String' },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'debug_events' },
            name: { kind: 'Name', value: 'events' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'atom' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_in',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'addresses',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetDebugEventsQuery__
 *
 * To run a query within a React component, call `useGetDebugEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDebugEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDebugEventsQuery({
 *   variables: {
 *      addresses: // value for 'addresses'
 *   },
 * });
 */
export function useGetDebugEventsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetDebugEventsQuery,
    GetDebugEventsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetDebugEventsQuery, GetDebugEventsQueryVariables>(
    GetDebugEventsDocument,
    options,
  )
}
export function useGetDebugEventsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetDebugEventsQuery,
    GetDebugEventsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetDebugEventsQuery, GetDebugEventsQueryVariables>(
    GetDebugEventsDocument,
    options,
  )
}
export function useGetDebugEventsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetDebugEventsQuery,
        GetDebugEventsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetDebugEventsQuery,
    GetDebugEventsQueryVariables
  >(GetDebugEventsDocument, options)
}
export type GetDebugEventsQueryHookResult = ReturnType<
  typeof useGetDebugEventsQuery
>
export type GetDebugEventsLazyQueryHookResult = ReturnType<
  typeof useGetDebugEventsLazyQuery
>
export type GetDebugEventsSuspenseQueryHookResult = ReturnType<
  typeof useGetDebugEventsSuspenseQuery
>
export type GetDebugEventsQueryResult = Apollo.QueryResult<
  GetDebugEventsQuery,
  GetDebugEventsQueryVariables
>
export const GetFollowingPositionsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetFollowingPositions' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'subjectId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'predicateId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsOrderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'positions_order_by' },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: '_and' },
                      value: {
                        kind: 'ListValue',
                        values: [
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'subject_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'subjectId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'predicate_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'predicateId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'positions' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: {
                                        kind: 'Name',
                                        value: 'account_id',
                                      },
                                      value: {
                                        kind: 'ObjectValue',
                                        fields: [
                                          {
                                            kind: 'ObjectField',
                                            name: {
                                              kind: 'Name',
                                              value: '_eq',
                                            },
                                            value: {
                                              kind: 'Variable',
                                              name: {
                                                kind: 'Name',
                                                value: 'address',
                                              },
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: '_and' },
                      value: {
                        kind: 'ListValue',
                        values: [
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'subject_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'subjectId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'predicate_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'predicateId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'positions' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: {
                                        kind: 'Name',
                                        value: 'account_id',
                                      },
                                      value: {
                                        kind: 'ObjectValue',
                                        fields: [
                                          {
                                            kind: 'ObjectField',
                                            name: {
                                              kind: 'Name',
                                              value: '_eq',
                                            },
                                            value: {
                                              kind: 'Variable',
                                              name: {
                                                kind: 'Name',
                                                value: 'address',
                                              },
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AtomMetadata' },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AtomMetadata' },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AtomMetadata' },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'current_share_price',
                              },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'positions_aggregate',
                              },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'aggregate' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'sum' },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'shares',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'address',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'order_by' },
                                  value: {
                                    kind: 'Variable',
                                    name: {
                                      kind: 'Name',
                                      value: 'positionsOrderBy',
                                    },
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'data' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'AtomValue' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetFollowingPositionsQuery__
 *
 * To run a query within a React component, call `useGetFollowingPositionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFollowingPositionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFollowingPositionsQuery({
 *   variables: {
 *      subjectId: // value for 'subjectId'
 *      predicateId: // value for 'predicateId'
 *      address: // value for 'address'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      positionsOrderBy: // value for 'positionsOrderBy'
 *   },
 * });
 */
export function useGetFollowingPositionsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetFollowingPositionsQuery,
    GetFollowingPositionsQueryVariables
  > &
    (
      | { variables: GetFollowingPositionsQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetFollowingPositionsQuery,
    GetFollowingPositionsQueryVariables
  >(GetFollowingPositionsDocument, options)
}
export function useGetFollowingPositionsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFollowingPositionsQuery,
    GetFollowingPositionsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetFollowingPositionsQuery,
    GetFollowingPositionsQueryVariables
  >(GetFollowingPositionsDocument, options)
}
export function useGetFollowingPositionsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetFollowingPositionsQuery,
        GetFollowingPositionsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetFollowingPositionsQuery,
    GetFollowingPositionsQueryVariables
  >(GetFollowingPositionsDocument, options)
}
export type GetFollowingPositionsQueryHookResult = ReturnType<
  typeof useGetFollowingPositionsQuery
>
export type GetFollowingPositionsLazyQueryHookResult = ReturnType<
  typeof useGetFollowingPositionsLazyQuery
>
export type GetFollowingPositionsSuspenseQueryHookResult = ReturnType<
  typeof useGetFollowingPositionsSuspenseQuery
>
export type GetFollowingPositionsQueryResult = Apollo.QueryResult<
  GetFollowingPositionsQuery,
  GetFollowingPositionsQueryVariables
>
export const GetFollowerPositionsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetFollowerPositions' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'subjectId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'predicateId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'objectId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsOrderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'positions_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'positions_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: '_and' },
                      value: {
                        kind: 'ListValue',
                        values: [
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'subject_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'subjectId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'predicate_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'predicateId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'object_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'objectId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AtomMetadata' },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AtomMetadata' },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AtomMetadata' },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'current_share_price',
                              },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'positions_aggregate',
                              },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'aggregate' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'sum' },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'shares',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'limit' },
                                  value: {
                                    kind: 'Variable',
                                    name: {
                                      kind: 'Name',
                                      value: 'positionsLimit',
                                    },
                                  },
                                },
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'offset' },
                                  value: {
                                    kind: 'Variable',
                                    name: {
                                      kind: 'Name',
                                      value: 'positionsOffset',
                                    },
                                  },
                                },
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'order_by' },
                                  value: {
                                    kind: 'Variable',
                                    name: {
                                      kind: 'Name',
                                      value: 'positionsOrderBy',
                                    },
                                  },
                                },
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'Variable',
                                    name: {
                                      kind: 'Name',
                                      value: 'positionsWhere',
                                    },
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'image',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'data' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'AtomValue' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetFollowerPositionsQuery__
 *
 * To run a query within a React component, call `useGetFollowerPositionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFollowerPositionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFollowerPositionsQuery({
 *   variables: {
 *      subjectId: // value for 'subjectId'
 *      predicateId: // value for 'predicateId'
 *      objectId: // value for 'objectId'
 *      positionsLimit: // value for 'positionsLimit'
 *      positionsOffset: // value for 'positionsOffset'
 *      positionsOrderBy: // value for 'positionsOrderBy'
 *      positionsWhere: // value for 'positionsWhere'
 *   },
 * });
 */
export function useGetFollowerPositionsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetFollowerPositionsQuery,
    GetFollowerPositionsQueryVariables
  > &
    (
      | { variables: GetFollowerPositionsQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetFollowerPositionsQuery,
    GetFollowerPositionsQueryVariables
  >(GetFollowerPositionsDocument, options)
}
export function useGetFollowerPositionsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFollowerPositionsQuery,
    GetFollowerPositionsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetFollowerPositionsQuery,
    GetFollowerPositionsQueryVariables
  >(GetFollowerPositionsDocument, options)
}
export function useGetFollowerPositionsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetFollowerPositionsQuery,
        GetFollowerPositionsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetFollowerPositionsQuery,
    GetFollowerPositionsQueryVariables
  >(GetFollowerPositionsDocument, options)
}
export type GetFollowerPositionsQueryHookResult = ReturnType<
  typeof useGetFollowerPositionsQuery
>
export type GetFollowerPositionsLazyQueryHookResult = ReturnType<
  typeof useGetFollowerPositionsLazyQuery
>
export type GetFollowerPositionsSuspenseQueryHookResult = ReturnType<
  typeof useGetFollowerPositionsSuspenseQuery
>
export type GetFollowerPositionsQueryResult = Apollo.QueryResult<
  GetFollowerPositionsQuery,
  GetFollowerPositionsQueryVariables
>
export const GetConnectionsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetConnections' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'subjectId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'predicateId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'objectId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'addresses' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'String' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsLimit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsOffset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsOrderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'positions_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionsWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'positions_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'following_count' },
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: '_and' },
                      value: {
                        kind: 'ListValue',
                        values: [
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'subject_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'subjectId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'predicate_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'predicateId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'object_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'objectId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'following' },
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: '_and' },
                      value: {
                        kind: 'ListValue',
                        values: [
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'subject_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'subjectId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'predicate_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'predicateId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'object_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'objectId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'FollowMetadata' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'followers_count' },
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: '_and' },
                      value: {
                        kind: 'ListValue',
                        values: [
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'subject_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'subjectId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'predicate_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'predicateId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'positions' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: {
                                        kind: 'Name',
                                        value: 'account_id',
                                      },
                                      value: {
                                        kind: 'ObjectValue',
                                        fields: [
                                          {
                                            kind: 'ObjectField',
                                            name: {
                                              kind: 'Name',
                                              value: '_in',
                                            },
                                            value: {
                                              kind: 'Variable',
                                              name: {
                                                kind: 'Name',
                                                value: 'addresses',
                                              },
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'followers' },
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: '_and' },
                      value: {
                        kind: 'ListValue',
                        values: [
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'subject_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'subjectId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'predicate_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'predicateId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'positions' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: {
                                        kind: 'Name',
                                        value: 'account_id',
                                      },
                                      value: {
                                        kind: 'ObjectValue',
                                        fields: [
                                          {
                                            kind: 'ObjectField',
                                            name: {
                                              kind: 'Name',
                                              value: '_in',
                                            },
                                            value: {
                                              kind: 'Variable',
                                              name: {
                                                kind: 'Name',
                                                value: 'addresses',
                                              },
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'FollowMetadata' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'FollowMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'subject' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'predicate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'object' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'positionsWhere' },
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'aggregate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'count' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'sum' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'shares',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'limit' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'positionsLimit' },
                            },
                          },
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'offset' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'positionsOffset' },
                            },
                          },
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'order_by' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'positionsOrderBy' },
                            },
                          },
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'positionsWhere' },
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetConnectionsQuery__
 *
 * To run a query within a React component, call `useGetConnectionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetConnectionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetConnectionsQuery({
 *   variables: {
 *      subjectId: // value for 'subjectId'
 *      predicateId: // value for 'predicateId'
 *      objectId: // value for 'objectId'
 *      addresses: // value for 'addresses'
 *      positionsLimit: // value for 'positionsLimit'
 *      positionsOffset: // value for 'positionsOffset'
 *      positionsOrderBy: // value for 'positionsOrderBy'
 *      positionsWhere: // value for 'positionsWhere'
 *   },
 * });
 */
export function useGetConnectionsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetConnectionsQuery,
    GetConnectionsQueryVariables
  > &
    (
      | { variables: GetConnectionsQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetConnectionsQuery, GetConnectionsQueryVariables>(
    GetConnectionsDocument,
    options,
  )
}
export function useGetConnectionsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetConnectionsQuery,
    GetConnectionsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetConnectionsQuery, GetConnectionsQueryVariables>(
    GetConnectionsDocument,
    options,
  )
}
export function useGetConnectionsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetConnectionsQuery,
        GetConnectionsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetConnectionsQuery,
    GetConnectionsQueryVariables
  >(GetConnectionsDocument, options)
}
export type GetConnectionsQueryHookResult = ReturnType<
  typeof useGetConnectionsQuery
>
export type GetConnectionsLazyQueryHookResult = ReturnType<
  typeof useGetConnectionsLazyQuery
>
export type GetConnectionsSuspenseQueryHookResult = ReturnType<
  typeof useGetConnectionsSuspenseQuery
>
export type GetConnectionsQueryResult = Apollo.QueryResult<
  GetConnectionsQuery,
  GetConnectionsQueryVariables
>
export const GetConnectionsCountDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetConnectionsCount' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'subjectId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'predicateId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'objectId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'following_count' },
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: '_and' },
                      value: {
                        kind: 'ListValue',
                        values: [
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'subject_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'subjectId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'predicate_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'predicateId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'positions' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: {
                                        kind: 'Name',
                                        value: 'account_id',
                                      },
                                      value: {
                                        kind: 'ObjectValue',
                                        fields: [
                                          {
                                            kind: 'ObjectField',
                                            name: {
                                              kind: 'Name',
                                              value: '_eq',
                                            },
                                            value: {
                                              kind: 'Variable',
                                              name: {
                                                kind: 'Name',
                                                value: 'address',
                                              },
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'followers_count' },
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: '_and' },
                      value: {
                        kind: 'ListValue',
                        values: [
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'subject_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'subjectId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'predicate_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'predicateId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'object_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'objectId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'positions_aggregate',
                              },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'aggregate' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'sum' },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'shares',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetConnectionsCountQuery__
 *
 * To run a query within a React component, call `useGetConnectionsCountQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetConnectionsCountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetConnectionsCountQuery({
 *   variables: {
 *      subjectId: // value for 'subjectId'
 *      predicateId: // value for 'predicateId'
 *      objectId: // value for 'objectId'
 *      address: // value for 'address'
 *   },
 * });
 */
export function useGetConnectionsCountQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetConnectionsCountQuery,
    GetConnectionsCountQueryVariables
  > &
    (
      | { variables: GetConnectionsCountQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetConnectionsCountQuery,
    GetConnectionsCountQueryVariables
  >(GetConnectionsCountDocument, options)
}
export function useGetConnectionsCountLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetConnectionsCountQuery,
    GetConnectionsCountQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetConnectionsCountQuery,
    GetConnectionsCountQueryVariables
  >(GetConnectionsCountDocument, options)
}
export function useGetConnectionsCountSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetConnectionsCountQuery,
        GetConnectionsCountQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetConnectionsCountQuery,
    GetConnectionsCountQueryVariables
  >(GetConnectionsCountDocument, options)
}
export type GetConnectionsCountQueryHookResult = ReturnType<
  typeof useGetConnectionsCountQuery
>
export type GetConnectionsCountLazyQueryHookResult = ReturnType<
  typeof useGetConnectionsCountLazyQuery
>
export type GetConnectionsCountSuspenseQueryHookResult = ReturnType<
  typeof useGetConnectionsCountSuspenseQuery
>
export type GetConnectionsCountQueryResult = Apollo.QueryResult<
  GetConnectionsCountQuery,
  GetConnectionsCountQueryVariables
>
export const GetFollowingsFromAddressDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'getFollowingsFromAddress' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'following' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'args' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'address' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'address' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'triples' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'order_by' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'term_id' },
                            value: { kind: 'EnumValue', value: 'desc' },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'type' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'subject' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'type' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'predicate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'type' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'object' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'type' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'counter_term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'positions_aggregate',
                              },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'aggregate' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'count',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'address',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'counter_term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'positions_aggregate',
                              },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'aggregate' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'count',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'address',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'positions_aggregate' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'limit' },
                      value: { kind: 'IntValue', value: '10' },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'nodes' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'triple' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'object',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'term_id',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'type',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'image',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'label',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'predicate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'term_id',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'type',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'image',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'label',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'subject',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'term_id',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'type',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'image',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'label',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'counter_term',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'id',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'positions_aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'aggregate',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'count',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'positions',
                                                },
                                                arguments: [
                                                  {
                                                    kind: 'Argument',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'where',
                                                    },
                                                    value: {
                                                      kind: 'ObjectValue',
                                                      fields: [
                                                        {
                                                          kind: 'ObjectField',
                                                          name: {
                                                            kind: 'Name',
                                                            value: 'account_id',
                                                          },
                                                          value: {
                                                            kind: 'ObjectValue',
                                                            fields: [
                                                              {
                                                                kind: 'ObjectField',
                                                                name: {
                                                                  kind: 'Name',
                                                                  value: '_eq',
                                                                },
                                                                value: {
                                                                  kind: 'Variable',
                                                                  name: {
                                                                    kind: 'Name',
                                                                    value:
                                                                      'address',
                                                                  },
                                                                },
                                                              },
                                                            ],
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                ],
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'shares',
                                                      },
                                                    },
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'account',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'id',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'term' },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'id',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'positions_aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'aggregate',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'count',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'positions',
                                                },
                                                arguments: [
                                                  {
                                                    kind: 'Argument',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'where',
                                                    },
                                                    value: {
                                                      kind: 'ObjectValue',
                                                      fields: [
                                                        {
                                                          kind: 'ObjectField',
                                                          name: {
                                                            kind: 'Name',
                                                            value: 'account_id',
                                                          },
                                                          value: {
                                                            kind: 'ObjectValue',
                                                            fields: [
                                                              {
                                                                kind: 'ObjectField',
                                                                name: {
                                                                  kind: 'Name',
                                                                  value: '_eq',
                                                                },
                                                                value: {
                                                                  kind: 'Variable',
                                                                  name: {
                                                                    kind: 'Name',
                                                                    value:
                                                                      'address',
                                                                  },
                                                                },
                                                              },
                                                            ],
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                ],
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'shares',
                                                      },
                                                    },
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'account',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'id',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetFollowingsFromAddressQuery__
 *
 * To run a query within a React component, call `useGetFollowingsFromAddressQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFollowingsFromAddressQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFollowingsFromAddressQuery({
 *   variables: {
 *      address: // value for 'address'
 *   },
 * });
 */
export function useGetFollowingsFromAddressQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetFollowingsFromAddressQuery,
    GetFollowingsFromAddressQueryVariables
  > &
    (
      | { variables: GetFollowingsFromAddressQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetFollowingsFromAddressQuery,
    GetFollowingsFromAddressQueryVariables
  >(GetFollowingsFromAddressDocument, options)
}
export function useGetFollowingsFromAddressLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFollowingsFromAddressQuery,
    GetFollowingsFromAddressQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetFollowingsFromAddressQuery,
    GetFollowingsFromAddressQueryVariables
  >(GetFollowingsFromAddressDocument, options)
}
export function useGetFollowingsFromAddressSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetFollowingsFromAddressQuery,
        GetFollowingsFromAddressQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetFollowingsFromAddressQuery,
    GetFollowingsFromAddressQueryVariables
  >(GetFollowingsFromAddressDocument, options)
}
export type GetFollowingsFromAddressQueryHookResult = ReturnType<
  typeof useGetFollowingsFromAddressQuery
>
export type GetFollowingsFromAddressLazyQueryHookResult = ReturnType<
  typeof useGetFollowingsFromAddressLazyQuery
>
export type GetFollowingsFromAddressSuspenseQueryHookResult = ReturnType<
  typeof useGetFollowingsFromAddressSuspenseQuery
>
export type GetFollowingsFromAddressQueryResult = Apollo.QueryResult<
  GetFollowingsFromAddressQuery,
  GetFollowingsFromAddressQueryVariables
>
export const GetFollowersFromAddressDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'getFollowersFromAddress' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'predicate' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'label' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: 'follow',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'object' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'accounts' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'Variable',
                                          name: {
                                            kind: 'Name',
                                            value: 'address',
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetFollowersFromAddressQuery__
 *
 * To run a query within a React component, call `useGetFollowersFromAddressQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFollowersFromAddressQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFollowersFromAddressQuery({
 *   variables: {
 *      address: // value for 'address'
 *   },
 * });
 */
export function useGetFollowersFromAddressQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetFollowersFromAddressQuery,
    GetFollowersFromAddressQueryVariables
  > &
    (
      | { variables: GetFollowersFromAddressQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetFollowersFromAddressQuery,
    GetFollowersFromAddressQueryVariables
  >(GetFollowersFromAddressDocument, options)
}
export function useGetFollowersFromAddressLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFollowersFromAddressQuery,
    GetFollowersFromAddressQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetFollowersFromAddressQuery,
    GetFollowersFromAddressQueryVariables
  >(GetFollowersFromAddressDocument, options)
}
export function useGetFollowersFromAddressSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetFollowersFromAddressQuery,
        GetFollowersFromAddressQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetFollowersFromAddressQuery,
    GetFollowersFromAddressQueryVariables
  >(GetFollowersFromAddressDocument, options)
}
export type GetFollowersFromAddressQueryHookResult = ReturnType<
  typeof useGetFollowersFromAddressQuery
>
export type GetFollowersFromAddressLazyQueryHookResult = ReturnType<
  typeof useGetFollowersFromAddressLazyQuery
>
export type GetFollowersFromAddressSuspenseQueryHookResult = ReturnType<
  typeof useGetFollowersFromAddressSuspenseQuery
>
export type GetFollowersFromAddressQueryResult = Apollo.QueryResult<
  GetFollowersFromAddressQuery,
  GetFollowersFromAddressQueryVariables
>
export const GetFollowingsTriplesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetFollowingsTriples' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'accountId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'predicate' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'label' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: 'follow',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'subject' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'accounts' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'Variable',
                                          name: {
                                            kind: 'Name',
                                            value: 'accountId',
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'type' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: 'Account',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'accounts' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetFollowingsTriplesQuery__
 *
 * To run a query within a React component, call `useGetFollowingsTriplesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFollowingsTriplesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFollowingsTriplesQuery({
 *   variables: {
 *      accountId: // value for 'accountId'
 *   },
 * });
 */
export function useGetFollowingsTriplesQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetFollowingsTriplesQuery,
    GetFollowingsTriplesQueryVariables
  > &
    (
      | { variables: GetFollowingsTriplesQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetFollowingsTriplesQuery,
    GetFollowingsTriplesQueryVariables
  >(GetFollowingsTriplesDocument, options)
}
export function useGetFollowingsTriplesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFollowingsTriplesQuery,
    GetFollowingsTriplesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetFollowingsTriplesQuery,
    GetFollowingsTriplesQueryVariables
  >(GetFollowingsTriplesDocument, options)
}
export function useGetFollowingsTriplesSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetFollowingsTriplesQuery,
        GetFollowingsTriplesQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetFollowingsTriplesQuery,
    GetFollowingsTriplesQueryVariables
  >(GetFollowingsTriplesDocument, options)
}
export type GetFollowingsTriplesQueryHookResult = ReturnType<
  typeof useGetFollowingsTriplesQuery
>
export type GetFollowingsTriplesLazyQueryHookResult = ReturnType<
  typeof useGetFollowingsTriplesLazyQuery
>
export type GetFollowingsTriplesSuspenseQueryHookResult = ReturnType<
  typeof useGetFollowingsTriplesSuspenseQuery
>
export type GetFollowingsTriplesQueryResult = Apollo.QueryResult<
  GetFollowingsTriplesQuery,
  GetFollowingsTriplesQueryVariables
>
export const GetAccountByIdDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAccountById' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetAccountByIdQuery__
 *
 * To run a query within a React component, call `useGetAccountByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAccountByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAccountByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetAccountByIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetAccountByIdQuery,
    GetAccountByIdQueryVariables
  > &
    (
      | { variables: GetAccountByIdQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetAccountByIdQuery, GetAccountByIdQueryVariables>(
    GetAccountByIdDocument,
    options,
  )
}
export function useGetAccountByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAccountByIdQuery,
    GetAccountByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetAccountByIdQuery, GetAccountByIdQueryVariables>(
    GetAccountByIdDocument,
    options,
  )
}
export function useGetAccountByIdSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetAccountByIdQuery,
        GetAccountByIdQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetAccountByIdQuery,
    GetAccountByIdQueryVariables
  >(GetAccountByIdDocument, options)
}
export type GetAccountByIdQueryHookResult = ReturnType<
  typeof useGetAccountByIdQuery
>
export type GetAccountByIdLazyQueryHookResult = ReturnType<
  typeof useGetAccountByIdLazyQuery
>
export type GetAccountByIdSuspenseQueryHookResult = ReturnType<
  typeof useGetAccountByIdSuspenseQuery
>
export type GetAccountByIdQueryResult = Apollo.QueryResult<
  GetAccountByIdQuery,
  GetAccountByIdQueryVariables
>
export const GetPersonsByIdentifierDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetPersonsByIdentifier' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'identifier' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'persons' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'identifier' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_eq' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'identifier' },
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                { kind: 'Field', name: { kind: 'Name', value: 'identifier' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetPersonsByIdentifierQuery__
 *
 * To run a query within a React component, call `useGetPersonsByIdentifierQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPersonsByIdentifierQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPersonsByIdentifierQuery({
 *   variables: {
 *      identifier: // value for 'identifier'
 *   },
 * });
 */
export function useGetPersonsByIdentifierQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetPersonsByIdentifierQuery,
    GetPersonsByIdentifierQueryVariables
  > &
    (
      | { variables: GetPersonsByIdentifierQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetPersonsByIdentifierQuery,
    GetPersonsByIdentifierQueryVariables
  >(GetPersonsByIdentifierDocument, options)
}
export function useGetPersonsByIdentifierLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetPersonsByIdentifierQuery,
    GetPersonsByIdentifierQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetPersonsByIdentifierQuery,
    GetPersonsByIdentifierQueryVariables
  >(GetPersonsByIdentifierDocument, options)
}
export function useGetPersonsByIdentifierSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetPersonsByIdentifierQuery,
        GetPersonsByIdentifierQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetPersonsByIdentifierQuery,
    GetPersonsByIdentifierQueryVariables
  >(GetPersonsByIdentifierDocument, options)
}
export type GetPersonsByIdentifierQueryHookResult = ReturnType<
  typeof useGetPersonsByIdentifierQuery
>
export type GetPersonsByIdentifierLazyQueryHookResult = ReturnType<
  typeof useGetPersonsByIdentifierLazyQuery
>
export type GetPersonsByIdentifierSuspenseQueryHookResult = ReturnType<
  typeof useGetPersonsByIdentifierSuspenseQuery
>
export type GetPersonsByIdentifierQueryResult = Apollo.QueryResult<
  GetPersonsByIdentifierQuery,
  GetPersonsByIdentifierQueryVariables
>
export const GetListsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetLists' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'predicate_objects_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'predicate_objects_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'predicate_objects' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ListValue',
                  values: [
                    {
                      kind: 'ObjectValue',
                      fields: [
                        {
                          kind: 'ObjectField',
                          name: { kind: 'Name', value: 'claim_count' },
                          value: { kind: 'EnumValue', value: 'desc' },
                        },
                      ],
                    },
                    {
                      kind: 'ObjectValue',
                      fields: [
                        {
                          kind: 'ObjectField',
                          name: { kind: 'Name', value: 'triple_count' },
                          value: { kind: 'EnumValue', value: 'desc' },
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'claim_count' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'triple_count' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetListsQuery__
 *
 * To run a query within a React component, call `useGetListsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetListsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetListsQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetListsQuery(
  baseOptions?: Apollo.QueryHookOptions<GetListsQuery, GetListsQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetListsQuery, GetListsQueryVariables>(
    GetListsDocument,
    options,
  )
}
export function useGetListsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetListsQuery,
    GetListsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetListsQuery, GetListsQueryVariables>(
    GetListsDocument,
    options,
  )
}
export function useGetListsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<GetListsQuery, GetListsQueryVariables>,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetListsQuery, GetListsQueryVariables>(
    GetListsDocument,
    options,
  )
}
export type GetListsQueryHookResult = ReturnType<typeof useGetListsQuery>
export type GetListsLazyQueryHookResult = ReturnType<
  typeof useGetListsLazyQuery
>
export type GetListsSuspenseQueryHookResult = ReturnType<
  typeof useGetListsSuspenseQuery
>
export type GetListsQueryResult = Apollo.QueryResult<
  GetListsQuery,
  GetListsQueryVariables
>
export const GetListItemsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetListItems' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'predicateId' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'numeric' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'objectId' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'numeric' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'predicate_id' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_eq' },
                            value: { kind: 'EnumValue', value: 'predicateId' },
                          },
                        ],
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'object_id' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_eq' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'objectId' },
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ListValue',
                  values: [
                    {
                      kind: 'ObjectValue',
                      fields: [
                        {
                          kind: 'ObjectField',
                          name: { kind: 'Name', value: 'term' },
                          value: {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: {
                                  kind: 'Name',
                                  value: 'positions_aggregate',
                                },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: 'count' },
                                      value: {
                                        kind: 'EnumValue',
                                        value: 'desc',
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        },
                        {
                          kind: 'ObjectField',
                          name: { kind: 'Name', value: 'counter_term' },
                          value: {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: {
                                  kind: 'Name',
                                  value: 'positions_aggregate',
                                },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: 'count' },
                                      value: {
                                        kind: 'EnumValue',
                                        value: 'desc',
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'TripleVaultDetails' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'atom' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'triple' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'counter_term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'subject' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleVaultDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'counter_term_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionDetails' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'counter_term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionDetails' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetListItemsQuery__
 *
 * To run a query within a React component, call `useGetListItemsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetListItemsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetListItemsQuery({
 *   variables: {
 *      predicateId: // value for 'predicateId'
 *      objectId: // value for 'objectId'
 *   },
 * });
 */
export function useGetListItemsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetListItemsQuery,
    GetListItemsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetListItemsQuery, GetListItemsQueryVariables>(
    GetListItemsDocument,
    options,
  )
}
export function useGetListItemsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetListItemsQuery,
    GetListItemsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetListItemsQuery, GetListItemsQueryVariables>(
    GetListItemsDocument,
    options,
  )
}
export function useGetListItemsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetListItemsQuery,
        GetListItemsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetListItemsQuery, GetListItemsQueryVariables>(
    GetListItemsDocument,
    options,
  )
}
export type GetListItemsQueryHookResult = ReturnType<
  typeof useGetListItemsQuery
>
export type GetListItemsLazyQueryHookResult = ReturnType<
  typeof useGetListItemsLazyQuery
>
export type GetListItemsSuspenseQueryHookResult = ReturnType<
  typeof useGetListItemsSuspenseQuery
>
export type GetListItemsQueryResult = Apollo.QueryResult<
  GetListItemsQuery,
  GetListItemsQueryVariables
>
export const GetListDetailsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetListDetails' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'globalWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'triples_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'tagPredicateId' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'numeric' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'triples_order_by' },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'globalTriplesAggregate' },
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'globalWhere' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'globalTriples' },
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'globalWhere' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_term_id' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'wallet_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'tags' },
                        name: {
                          kind: 'Name',
                          value: 'as_subject_triples_aggregate',
                        },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'predicate_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'Variable',
                                          name: {
                                            kind: 'Name',
                                            value: 'tagPredicateId',
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'nodes' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'object' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          alias: {
                                            kind: 'Name',
                                            value: 'taggedIdentities',
                                          },
                                          name: {
                                            kind: 'Name',
                                            value:
                                              'as_object_triples_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'nodes',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'subject',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'label',
                                                            },
                                                          },
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'term_id',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'term_id',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'count',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'aggregate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'count' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'wallet_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'wallet_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'current_share_price',
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'curve_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'StringValue',
                                          value: '1',
                                          block: false,
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'current_share_price',
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetListDetailsQuery__
 *
 * To run a query within a React component, call `useGetListDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetListDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetListDetailsQuery({
 *   variables: {
 *      globalWhere: // value for 'globalWhere'
 *      tagPredicateId: // value for 'tagPredicateId'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useGetListDetailsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetListDetailsQuery,
    GetListDetailsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetListDetailsQuery, GetListDetailsQueryVariables>(
    GetListDetailsDocument,
    options,
  )
}
export function useGetListDetailsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetListDetailsQuery,
    GetListDetailsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetListDetailsQuery, GetListDetailsQueryVariables>(
    GetListDetailsDocument,
    options,
  )
}
export function useGetListDetailsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetListDetailsQuery,
        GetListDetailsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetListDetailsQuery,
    GetListDetailsQueryVariables
  >(GetListDetailsDocument, options)
}
export type GetListDetailsQueryHookResult = ReturnType<
  typeof useGetListDetailsQuery
>
export type GetListDetailsLazyQueryHookResult = ReturnType<
  typeof useGetListDetailsLazyQuery
>
export type GetListDetailsSuspenseQueryHookResult = ReturnType<
  typeof useGetListDetailsSuspenseQuery
>
export type GetListDetailsQueryResult = Apollo.QueryResult<
  GetListDetailsQuery,
  GetListDetailsQueryVariables
>
export const GetListDetailsWithPositionDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetListDetailsWithPosition' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'globalWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'triples_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'tagPredicateId' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'numeric' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'triples_order_by' },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'globalTriplesAggregate' },
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'globalWhere' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'globalTriples' },
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'globalWhere' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_term_id' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'wallet_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'tags' },
                        name: {
                          kind: 'Name',
                          value: 'as_subject_triples_aggregate',
                        },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'predicate_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'Variable',
                                          name: {
                                            kind: 'Name',
                                            value: 'tagPredicateId',
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'nodes' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'object' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          alias: {
                                            kind: 'Name',
                                            value: 'taggedIdentities',
                                          },
                                          name: {
                                            kind: 'Name',
                                            value:
                                              'as_object_triples_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'nodes',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'subject',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'label',
                                                            },
                                                          },
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'term_id',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'term_id',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'count',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'aggregate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'count' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'wallet_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'wallet_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'current_share_price',
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'account_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'Variable',
                                          name: {
                                            kind: 'Name',
                                            value: 'address',
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'current_share_price',
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'account_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'Variable',
                                          name: {
                                            kind: 'Name',
                                            value: 'address',
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetListDetailsWithPositionQuery__
 *
 * To run a query within a React component, call `useGetListDetailsWithPositionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetListDetailsWithPositionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetListDetailsWithPositionQuery({
 *   variables: {
 *      globalWhere: // value for 'globalWhere'
 *      tagPredicateId: // value for 'tagPredicateId'
 *      address: // value for 'address'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useGetListDetailsWithPositionQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetListDetailsWithPositionQuery,
    GetListDetailsWithPositionQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetListDetailsWithPositionQuery,
    GetListDetailsWithPositionQueryVariables
  >(GetListDetailsWithPositionDocument, options)
}
export function useGetListDetailsWithPositionLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetListDetailsWithPositionQuery,
    GetListDetailsWithPositionQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetListDetailsWithPositionQuery,
    GetListDetailsWithPositionQueryVariables
  >(GetListDetailsWithPositionDocument, options)
}
export function useGetListDetailsWithPositionSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetListDetailsWithPositionQuery,
        GetListDetailsWithPositionQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetListDetailsWithPositionQuery,
    GetListDetailsWithPositionQueryVariables
  >(GetListDetailsWithPositionDocument, options)
}
export type GetListDetailsWithPositionQueryHookResult = ReturnType<
  typeof useGetListDetailsWithPositionQuery
>
export type GetListDetailsWithPositionLazyQueryHookResult = ReturnType<
  typeof useGetListDetailsWithPositionLazyQuery
>
export type GetListDetailsWithPositionSuspenseQueryHookResult = ReturnType<
  typeof useGetListDetailsWithPositionSuspenseQuery
>
export type GetListDetailsWithPositionQueryResult = Apollo.QueryResult<
  GetListDetailsWithPositionQuery,
  GetListDetailsWithPositionQueryVariables
>
export const GetListDetailsWithUserDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetListDetailsWithUser' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'globalWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'triples_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'userWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'triples_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'tagPredicateId' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'numeric' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'triples_order_by' },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'globalTriplesAggregate' },
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'globalWhere' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'globalTriples' },
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'globalWhere' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_term_id' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'wallet_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'tags' },
                        name: {
                          kind: 'Name',
                          value: 'as_subject_triples_aggregate',
                        },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'predicate_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'Variable',
                                          name: {
                                            kind: 'Name',
                                            value: 'tagPredicateId',
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'nodes' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'object' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          alias: {
                                            kind: 'Name',
                                            value: 'taggedIdentities',
                                          },
                                          name: {
                                            kind: 'Name',
                                            value:
                                              'as_object_triples_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'nodes',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'subject',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'label',
                                                            },
                                                          },
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'term_id',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'term_id',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'count',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'aggregate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'count' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'wallet_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'wallet_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'current_share_price',
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'account_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'Variable',
                                          name: {
                                            kind: 'Name',
                                            value: 'address',
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'current_share_price',
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'account_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'Variable',
                                          name: {
                                            kind: 'Name',
                                            value: 'address',
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'userTriplesAggregate' },
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'userWhere' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'userTriples' },
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'userWhere' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_term_id' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'wallet_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'tags' },
                        name: {
                          kind: 'Name',
                          value: 'as_subject_triples_aggregate',
                        },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'predicate_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'Variable',
                                          name: {
                                            kind: 'Name',
                                            value: 'tagPredicateId',
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'nodes' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'object' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          alias: {
                                            kind: 'Name',
                                            value: 'taggedIdentities',
                                          },
                                          name: {
                                            kind: 'Name',
                                            value:
                                              'as_object_triples_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'nodes',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'subject',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'label',
                                                            },
                                                          },
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'term_id',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'term_id',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'count',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'aggregate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'count' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'wallet_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'wallet_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'current_share_price',
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'account_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'Variable',
                                          name: {
                                            kind: 'Name',
                                            value: 'address',
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: {
                                kind: 'Name',
                                value: 'current_share_price',
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'account_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'Variable',
                                          name: {
                                            kind: 'Name',
                                            value: 'address',
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetListDetailsWithUserQuery__
 *
 * To run a query within a React component, call `useGetListDetailsWithUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetListDetailsWithUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetListDetailsWithUserQuery({
 *   variables: {
 *      globalWhere: // value for 'globalWhere'
 *      userWhere: // value for 'userWhere'
 *      tagPredicateId: // value for 'tagPredicateId'
 *      address: // value for 'address'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useGetListDetailsWithUserQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetListDetailsWithUserQuery,
    GetListDetailsWithUserQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetListDetailsWithUserQuery,
    GetListDetailsWithUserQueryVariables
  >(GetListDetailsWithUserDocument, options)
}
export function useGetListDetailsWithUserLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetListDetailsWithUserQuery,
    GetListDetailsWithUserQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetListDetailsWithUserQuery,
    GetListDetailsWithUserQueryVariables
  >(GetListDetailsWithUserDocument, options)
}
export function useGetListDetailsWithUserSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetListDetailsWithUserQuery,
        GetListDetailsWithUserQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetListDetailsWithUserQuery,
    GetListDetailsWithUserQueryVariables
  >(GetListDetailsWithUserDocument, options)
}
export type GetListDetailsWithUserQueryHookResult = ReturnType<
  typeof useGetListDetailsWithUserQuery
>
export type GetListDetailsWithUserLazyQueryHookResult = ReturnType<
  typeof useGetListDetailsWithUserLazyQuery
>
export type GetListDetailsWithUserSuspenseQueryHookResult = ReturnType<
  typeof useGetListDetailsWithUserSuspenseQuery
>
export type GetListDetailsWithUserQueryResult = Apollo.QueryResult<
  GetListDetailsWithUserQuery,
  GetListDetailsWithUserQueryVariables
>
export const GetFeeTransfersDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetFeeTransfers' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'cutoff_timestamp' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'bigint' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'before_cutoff' },
            name: { kind: 'Name', value: 'fee_transfers_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'block_timestamp' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_lte' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'cutoff_timestamp' },
                            },
                          },
                        ],
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'sender_id' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_eq' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'address' },
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'sum' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'amount' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'after_cutoff' },
            name: { kind: 'Name', value: 'fee_transfers_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'block_timestamp' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_gt' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'cutoff_timestamp' },
                            },
                          },
                        ],
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'sender_id' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_eq' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'address' },
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'sum' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'amount' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetFeeTransfersQuery__
 *
 * To run a query within a React component, call `useGetFeeTransfersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFeeTransfersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFeeTransfersQuery({
 *   variables: {
 *      address: // value for 'address'
 *      cutoff_timestamp: // value for 'cutoff_timestamp'
 *   },
 * });
 */
export function useGetFeeTransfersQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetFeeTransfersQuery,
    GetFeeTransfersQueryVariables
  > &
    (
      | { variables: GetFeeTransfersQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetFeeTransfersQuery, GetFeeTransfersQueryVariables>(
    GetFeeTransfersDocument,
    options,
  )
}
export function useGetFeeTransfersLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetFeeTransfersQuery,
    GetFeeTransfersQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetFeeTransfersQuery,
    GetFeeTransfersQueryVariables
  >(GetFeeTransfersDocument, options)
}
export function useGetFeeTransfersSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetFeeTransfersQuery,
        GetFeeTransfersQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetFeeTransfersQuery,
    GetFeeTransfersQueryVariables
  >(GetFeeTransfersDocument, options)
}
export type GetFeeTransfersQueryHookResult = ReturnType<
  typeof useGetFeeTransfersQuery
>
export type GetFeeTransfersLazyQueryHookResult = ReturnType<
  typeof useGetFeeTransfersLazyQuery
>
export type GetFeeTransfersSuspenseQueryHookResult = ReturnType<
  typeof useGetFeeTransfersSuspenseQuery
>
export type GetFeeTransfersQueryResult = Apollo.QueryResult<
  GetFeeTransfersQuery,
  GetFeeTransfersQueryVariables
>
export const GetPositionsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetPositions' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'positions_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'positions_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'total' },
            name: { kind: 'Name', value: 'positions_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'sum' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PositionDetails' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'atom' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'triple' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'counter_term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'subject' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetPositionsQuery__
 *
 * To run a query within a React component, call `useGetPositionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPositionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPositionsQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetPositionsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetPositionsQuery,
    GetPositionsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetPositionsQuery, GetPositionsQueryVariables>(
    GetPositionsDocument,
    options,
  )
}
export function useGetPositionsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetPositionsQuery,
    GetPositionsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetPositionsQuery, GetPositionsQueryVariables>(
    GetPositionsDocument,
    options,
  )
}
export function useGetPositionsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetPositionsQuery,
        GetPositionsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetPositionsQuery, GetPositionsQueryVariables>(
    GetPositionsDocument,
    options,
  )
}
export type GetPositionsQueryHookResult = ReturnType<
  typeof useGetPositionsQuery
>
export type GetPositionsLazyQueryHookResult = ReturnType<
  typeof useGetPositionsLazyQuery
>
export type GetPositionsSuspenseQueryHookResult = ReturnType<
  typeof useGetPositionsSuspenseQuery
>
export type GetPositionsQueryResult = Apollo.QueryResult<
  GetPositionsQuery,
  GetPositionsQueryVariables
>
export const GetTriplePositionsByAddressDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetTriplePositionsByAddress' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'positions_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'positions_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'total' },
            name: { kind: 'Name', value: 'positions_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'sum' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PositionDetails' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vault' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'triple' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions',
                                          },
                                          arguments: [
                                            {
                                              kind: 'Argument',
                                              name: {
                                                kind: 'Name',
                                                value: 'where',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'account_id',
                                                    },
                                                    value: {
                                                      kind: 'ObjectValue',
                                                      fields: [
                                                        {
                                                          kind: 'ObjectField',
                                                          name: {
                                                            kind: 'Name',
                                                            value: '_eq',
                                                          },
                                                          value: {
                                                            kind: 'Variable',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'address',
                                                            },
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'account',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'id',
                                                      },
                                                    },
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'label',
                                                      },
                                                    },
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'image',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'shares',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'counter_term',
                                    },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions',
                                          },
                                          arguments: [
                                            {
                                              kind: 'Argument',
                                              name: {
                                                kind: 'Name',
                                                value: 'where',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'account_id',
                                                    },
                                                    value: {
                                                      kind: 'ObjectValue',
                                                      fields: [
                                                        {
                                                          kind: 'ObjectField',
                                                          name: {
                                                            kind: 'Name',
                                                            value: '_eq',
                                                          },
                                                          value: {
                                                            kind: 'Variable',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'address',
                                                            },
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'account',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'id',
                                                      },
                                                    },
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'label',
                                                      },
                                                    },
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'image',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'shares',
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'atom' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'triple' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'counter_term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'subject' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetTriplePositionsByAddressQuery__
 *
 * To run a query within a React component, call `useGetTriplePositionsByAddressQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTriplePositionsByAddressQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTriplePositionsByAddressQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *      address: // value for 'address'
 *   },
 * });
 */
export function useGetTriplePositionsByAddressQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetTriplePositionsByAddressQuery,
    GetTriplePositionsByAddressQueryVariables
  > &
    (
      | { variables: GetTriplePositionsByAddressQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetTriplePositionsByAddressQuery,
    GetTriplePositionsByAddressQueryVariables
  >(GetTriplePositionsByAddressDocument, options)
}
export function useGetTriplePositionsByAddressLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetTriplePositionsByAddressQuery,
    GetTriplePositionsByAddressQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetTriplePositionsByAddressQuery,
    GetTriplePositionsByAddressQueryVariables
  >(GetTriplePositionsByAddressDocument, options)
}
export function useGetTriplePositionsByAddressSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetTriplePositionsByAddressQuery,
        GetTriplePositionsByAddressQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetTriplePositionsByAddressQuery,
    GetTriplePositionsByAddressQueryVariables
  >(GetTriplePositionsByAddressDocument, options)
}
export type GetTriplePositionsByAddressQueryHookResult = ReturnType<
  typeof useGetTriplePositionsByAddressQuery
>
export type GetTriplePositionsByAddressLazyQueryHookResult = ReturnType<
  typeof useGetTriplePositionsByAddressLazyQuery
>
export type GetTriplePositionsByAddressSuspenseQueryHookResult = ReturnType<
  typeof useGetTriplePositionsByAddressSuspenseQuery
>
export type GetTriplePositionsByAddressQueryResult = Apollo.QueryResult<
  GetTriplePositionsByAddressQuery,
  GetTriplePositionsByAddressQueryVariables
>
export const GetPositionsWithAggregatesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetPositionsWithAggregates' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'positions_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'positions_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'PositionDetails' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'atom' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'triple' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'counter_term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'subject' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetPositionsWithAggregatesQuery__
 *
 * To run a query within a React component, call `useGetPositionsWithAggregatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPositionsWithAggregatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPositionsWithAggregatesQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetPositionsWithAggregatesQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetPositionsWithAggregatesQuery,
    GetPositionsWithAggregatesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetPositionsWithAggregatesQuery,
    GetPositionsWithAggregatesQueryVariables
  >(GetPositionsWithAggregatesDocument, options)
}
export function useGetPositionsWithAggregatesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetPositionsWithAggregatesQuery,
    GetPositionsWithAggregatesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetPositionsWithAggregatesQuery,
    GetPositionsWithAggregatesQueryVariables
  >(GetPositionsWithAggregatesDocument, options)
}
export function useGetPositionsWithAggregatesSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetPositionsWithAggregatesQuery,
        GetPositionsWithAggregatesQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetPositionsWithAggregatesQuery,
    GetPositionsWithAggregatesQueryVariables
  >(GetPositionsWithAggregatesDocument, options)
}
export type GetPositionsWithAggregatesQueryHookResult = ReturnType<
  typeof useGetPositionsWithAggregatesQuery
>
export type GetPositionsWithAggregatesLazyQueryHookResult = ReturnType<
  typeof useGetPositionsWithAggregatesLazyQuery
>
export type GetPositionsWithAggregatesSuspenseQueryHookResult = ReturnType<
  typeof useGetPositionsWithAggregatesSuspenseQuery
>
export type GetPositionsWithAggregatesQueryResult = Apollo.QueryResult<
  GetPositionsWithAggregatesQuery,
  GetPositionsWithAggregatesQueryVariables
>
export const GetPositionsCountDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetPositionsCount' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'positions_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  alias: { kind: 'Name', value: 'total' },
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'sum' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetPositionsCountQuery__
 *
 * To run a query within a React component, call `useGetPositionsCountQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPositionsCountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPositionsCountQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetPositionsCountQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetPositionsCountQuery,
    GetPositionsCountQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetPositionsCountQuery,
    GetPositionsCountQueryVariables
  >(GetPositionsCountDocument, options)
}
export function useGetPositionsCountLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetPositionsCountQuery,
    GetPositionsCountQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetPositionsCountQuery,
    GetPositionsCountQueryVariables
  >(GetPositionsCountDocument, options)
}
export function useGetPositionsCountSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetPositionsCountQuery,
        GetPositionsCountQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetPositionsCountQuery,
    GetPositionsCountQueryVariables
  >(GetPositionsCountDocument, options)
}
export type GetPositionsCountQueryHookResult = ReturnType<
  typeof useGetPositionsCountQuery
>
export type GetPositionsCountLazyQueryHookResult = ReturnType<
  typeof useGetPositionsCountLazyQuery
>
export type GetPositionsCountSuspenseQueryHookResult = ReturnType<
  typeof useGetPositionsCountSuspenseQuery
>
export type GetPositionsCountQueryResult = Apollo.QueryResult<
  GetPositionsCountQuery,
  GetPositionsCountQueryVariables
>
export const GetPositionDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetPosition' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'positionId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'position' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'positionId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PositionDetails' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'atom' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'triple' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'counter_term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'subject' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetPositionQuery__
 *
 * To run a query within a React component, call `useGetPositionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPositionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPositionQuery({
 *   variables: {
 *      positionId: // value for 'positionId'
 *   },
 * });
 */
export function useGetPositionQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetPositionQuery,
    GetPositionQueryVariables
  > &
    (
      | { variables: GetPositionQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetPositionQuery, GetPositionQueryVariables>(
    GetPositionDocument,
    options,
  )
}
export function useGetPositionLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetPositionQuery,
    GetPositionQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetPositionQuery, GetPositionQueryVariables>(
    GetPositionDocument,
    options,
  )
}
export function useGetPositionSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetPositionQuery,
        GetPositionQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetPositionQuery, GetPositionQueryVariables>(
    GetPositionDocument,
    options,
  )
}
export type GetPositionQueryHookResult = ReturnType<typeof useGetPositionQuery>
export type GetPositionLazyQueryHookResult = ReturnType<
  typeof useGetPositionLazyQuery
>
export type GetPositionSuspenseQueryHookResult = ReturnType<
  typeof useGetPositionSuspenseQuery
>
export type GetPositionQueryResult = Apollo.QueryResult<
  GetPositionQuery,
  GetPositionQueryVariables
>
export const GetPositionsCountByTypeDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetPositionsCountByType' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'positions_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  alias: { kind: 'Name', value: 'total' },
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'sum' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vault' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetPositionsCountByTypeQuery__
 *
 * To run a query within a React component, call `useGetPositionsCountByTypeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPositionsCountByTypeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPositionsCountByTypeQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetPositionsCountByTypeQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetPositionsCountByTypeQuery,
    GetPositionsCountByTypeQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetPositionsCountByTypeQuery,
    GetPositionsCountByTypeQueryVariables
  >(GetPositionsCountByTypeDocument, options)
}
export function useGetPositionsCountByTypeLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetPositionsCountByTypeQuery,
    GetPositionsCountByTypeQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetPositionsCountByTypeQuery,
    GetPositionsCountByTypeQueryVariables
  >(GetPositionsCountByTypeDocument, options)
}
export function useGetPositionsCountByTypeSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetPositionsCountByTypeQuery,
        GetPositionsCountByTypeQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetPositionsCountByTypeQuery,
    GetPositionsCountByTypeQueryVariables
  >(GetPositionsCountByTypeDocument, options)
}
export type GetPositionsCountByTypeQueryHookResult = ReturnType<
  typeof useGetPositionsCountByTypeQuery
>
export type GetPositionsCountByTypeLazyQueryHookResult = ReturnType<
  typeof useGetPositionsCountByTypeLazyQuery
>
export type GetPositionsCountByTypeSuspenseQueryHookResult = ReturnType<
  typeof useGetPositionsCountByTypeSuspenseQuery
>
export type GetPositionsCountByTypeQueryResult = Apollo.QueryResult<
  GetPositionsCountByTypeQuery,
  GetPositionsCountByTypeQueryVariables
>
export const GetSignalsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetSignals' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'signals_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'addresses' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'String' },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'total' },
            name: { kind: 'Name', value: 'events_aggregate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'signals' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'block_number' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'block_timestamp' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'transaction_hash' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'triple_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'deposit_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'redemption_id' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'atom' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AtomMetadata' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'total_shares',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions',
                                          },
                                          arguments: [
                                            {
                                              kind: 'Argument',
                                              name: {
                                                kind: 'Name',
                                                value: 'where',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'account',
                                                    },
                                                    value: {
                                                      kind: 'ObjectValue',
                                                      fields: [
                                                        {
                                                          kind: 'ObjectField',
                                                          name: {
                                                            kind: 'Name',
                                                            value: 'id',
                                                          },
                                                          value: {
                                                            kind: 'ObjectValue',
                                                            fields: [
                                                              {
                                                                kind: 'ObjectField',
                                                                name: {
                                                                  kind: 'Name',
                                                                  value: '_in',
                                                                },
                                                                value: {
                                                                  kind: 'Variable',
                                                                  name: {
                                                                    kind: 'Name',
                                                                    value:
                                                                      'addresses',
                                                                  },
                                                                },
                                                              },
                                                            ],
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'account_id',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'shares',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'account',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'id',
                                                      },
                                                    },
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'label',
                                                      },
                                                    },
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'image',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'triple' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'creator' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'FragmentSpread',
                                    name: {
                                      kind: 'Name',
                                      value: 'AccountMetadata',
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'subject' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'total_shares',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions',
                                          },
                                          arguments: [
                                            {
                                              kind: 'Argument',
                                              name: {
                                                kind: 'Name',
                                                value: 'where',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'account',
                                                    },
                                                    value: {
                                                      kind: 'ObjectValue',
                                                      fields: [
                                                        {
                                                          kind: 'ObjectField',
                                                          name: {
                                                            kind: 'Name',
                                                            value: 'id',
                                                          },
                                                          value: {
                                                            kind: 'ObjectValue',
                                                            fields: [
                                                              {
                                                                kind: 'ObjectField',
                                                                name: {
                                                                  kind: 'Name',
                                                                  value: '_in',
                                                                },
                                                                value: {
                                                                  kind: 'Variable',
                                                                  name: {
                                                                    kind: 'Name',
                                                                    value:
                                                                      'addresses',
                                                                  },
                                                                },
                                                              },
                                                            ],
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'account_id',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'shares',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'account',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'id',
                                                      },
                                                    },
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'label',
                                                      },
                                                    },
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'image',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'counter_term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'total_shares',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions',
                                          },
                                          arguments: [
                                            {
                                              kind: 'Argument',
                                              name: {
                                                kind: 'Name',
                                                value: 'where',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: 'account',
                                                    },
                                                    value: {
                                                      kind: 'ObjectValue',
                                                      fields: [
                                                        {
                                                          kind: 'ObjectField',
                                                          name: {
                                                            kind: 'Name',
                                                            value: 'id',
                                                          },
                                                          value: {
                                                            kind: 'ObjectValue',
                                                            fields: [
                                                              {
                                                                kind: 'ObjectField',
                                                                name: {
                                                                  kind: 'Name',
                                                                  value: '_in',
                                                                },
                                                                value: {
                                                                  kind: 'Variable',
                                                                  name: {
                                                                    kind: 'Name',
                                                                    value:
                                                                      'addresses',
                                                                  },
                                                                },
                                                              },
                                                            ],
                                                          },
                                                        },
                                                      ],
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'account_id',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'shares',
                                                },
                                              },
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'account',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'id',
                                                      },
                                                    },
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'label',
                                                      },
                                                    },
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'image',
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'deposit' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'sender_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'sender' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'receiver_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'receiver' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares_for_receiver' },
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'sender_assets_after_total_fees',
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vault' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_in',
                                                    },
                                                    value: {
                                                      kind: 'Variable',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'addresses',
                                                      },
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'image',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'redemption' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'sender_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'sender' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'receiver_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'receiver' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'assets_for_receiver' },
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'shares_redeemed_by_sender',
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'data' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'AtomValue' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetSignalsQuery__
 *
 * To run a query within a React component, call `useGetSignalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSignalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSignalsQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *      addresses: // value for 'addresses'
 *   },
 * });
 */
export function useGetSignalsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetSignalsQuery,
    GetSignalsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetSignalsQuery, GetSignalsQueryVariables>(
    GetSignalsDocument,
    options,
  )
}
export function useGetSignalsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetSignalsQuery,
    GetSignalsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetSignalsQuery, GetSignalsQueryVariables>(
    GetSignalsDocument,
    options,
  )
}
export function useGetSignalsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetSignalsQuery,
        GetSignalsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetSignalsQuery, GetSignalsQueryVariables>(
    GetSignalsDocument,
    options,
  )
}
export type GetSignalsQueryHookResult = ReturnType<typeof useGetSignalsQuery>
export type GetSignalsLazyQueryHookResult = ReturnType<
  typeof useGetSignalsLazyQuery
>
export type GetSignalsSuspenseQueryHookResult = ReturnType<
  typeof useGetSignalsSuspenseQuery
>
export type GetSignalsQueryResult = Apollo.QueryResult<
  GetSignalsQuery,
  GetSignalsQueryVariables
>
export const GetStatsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetStats' },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'stats' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'StatDetails' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'StatDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'stats' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'contract_balance' } },
          { kind: 'Field', name: { kind: 'Name', value: 'total_accounts' } },
          { kind: 'Field', name: { kind: 'Name', value: 'total_fees' } },
          { kind: 'Field', name: { kind: 'Name', value: 'total_atoms' } },
          { kind: 'Field', name: { kind: 'Name', value: 'total_triples' } },
          { kind: 'Field', name: { kind: 'Name', value: 'total_positions' } },
          { kind: 'Field', name: { kind: 'Name', value: 'total_signals' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetStatsQuery__
 *
 * To run a query within a React component, call `useGetStatsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStatsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStatsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetStatsQuery(
  baseOptions?: Apollo.QueryHookOptions<GetStatsQuery, GetStatsQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetStatsQuery, GetStatsQueryVariables>(
    GetStatsDocument,
    options,
  )
}
export function useGetStatsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetStatsQuery,
    GetStatsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetStatsQuery, GetStatsQueryVariables>(
    GetStatsDocument,
    options,
  )
}
export function useGetStatsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<GetStatsQuery, GetStatsQueryVariables>,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetStatsQuery, GetStatsQueryVariables>(
    GetStatsDocument,
    options,
  )
}
export type GetStatsQueryHookResult = ReturnType<typeof useGetStatsQuery>
export type GetStatsLazyQueryHookResult = ReturnType<
  typeof useGetStatsLazyQuery
>
export type GetStatsSuspenseQueryHookResult = ReturnType<
  typeof useGetStatsSuspenseQuery
>
export type GetStatsQueryResult = Apollo.QueryResult<
  GetStatsQuery,
  GetStatsQueryVariables
>
export const GetTagsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetTags' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'subjectId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'predicateId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: '_and' },
                      value: {
                        kind: 'ListValue',
                        values: [
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'subject_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'subjectId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'predicate_id' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: { kind: 'Name', value: '_eq' },
                                      value: {
                                        kind: 'Variable',
                                        name: {
                                          kind: 'Name',
                                          value: 'predicateId',
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'TripleMetadata' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'total_shares' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'current_share_price' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionAggregateFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions_aggregate' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'aggregate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sum' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'subject_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'predicate_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'object_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'subject' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'predicate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'object' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'allPositions' },
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: {
                                kind: 'Name',
                                value: 'PositionAggregateFields',
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionFields' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'counter_term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'allPositions' },
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: {
                                kind: 'Name',
                                value: 'PositionAggregateFields',
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionFields' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetTagsQuery__
 *
 * To run a query within a React component, call `useGetTagsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTagsQuery({
 *   variables: {
 *      subjectId: // value for 'subjectId'
 *      predicateId: // value for 'predicateId'
 *   },
 * });
 */
export function useGetTagsQuery(
  baseOptions: Apollo.QueryHookOptions<GetTagsQuery, GetTagsQueryVariables> &
    ({ variables: GetTagsQueryVariables; skip?: boolean } | { skip: boolean }),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetTagsQuery, GetTagsQueryVariables>(
    GetTagsDocument,
    options,
  )
}
export function useGetTagsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetTagsQuery,
    GetTagsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetTagsQuery, GetTagsQueryVariables>(
    GetTagsDocument,
    options,
  )
}
export function useGetTagsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<GetTagsQuery, GetTagsQueryVariables>,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetTagsQuery, GetTagsQueryVariables>(
    GetTagsDocument,
    options,
  )
}
export type GetTagsQueryHookResult = ReturnType<typeof useGetTagsQuery>
export type GetTagsLazyQueryHookResult = ReturnType<typeof useGetTagsLazyQuery>
export type GetTagsSuspenseQueryHookResult = ReturnType<
  typeof useGetTagsSuspenseQuery
>
export type GetTagsQueryResult = Apollo.QueryResult<
  GetTagsQuery,
  GetTagsQueryVariables
>
export const GetTagsCustomDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetTagsCustom' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'triples_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'TripleMetadata' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'total_shares' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'current_share_price' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionAggregateFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions_aggregate' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'aggregate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sum' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'subject_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'predicate_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'object_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'subject' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'predicate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'object' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'allPositions' },
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: {
                                kind: 'Name',
                                value: 'PositionAggregateFields',
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionFields' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'counter_term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'allPositions' },
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: {
                                kind: 'Name',
                                value: 'PositionAggregateFields',
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionFields' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetTagsCustomQuery__
 *
 * To run a query within a React component, call `useGetTagsCustomQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTagsCustomQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTagsCustomQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetTagsCustomQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetTagsCustomQuery,
    GetTagsCustomQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetTagsCustomQuery, GetTagsCustomQueryVariables>(
    GetTagsCustomDocument,
    options,
  )
}
export function useGetTagsCustomLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetTagsCustomQuery,
    GetTagsCustomQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetTagsCustomQuery, GetTagsCustomQueryVariables>(
    GetTagsCustomDocument,
    options,
  )
}
export function useGetTagsCustomSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetTagsCustomQuery,
        GetTagsCustomQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetTagsCustomQuery,
    GetTagsCustomQueryVariables
  >(GetTagsCustomDocument, options)
}
export type GetTagsCustomQueryHookResult = ReturnType<
  typeof useGetTagsCustomQuery
>
export type GetTagsCustomLazyQueryHookResult = ReturnType<
  typeof useGetTagsCustomLazyQuery
>
export type GetTagsCustomSuspenseQueryHookResult = ReturnType<
  typeof useGetTagsCustomSuspenseQuery
>
export type GetTagsCustomQueryResult = Apollo.QueryResult<
  GetTagsCustomQuery,
  GetTagsCustomQueryVariables
>
export const GetListsTagsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetListsTags' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'atoms_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'triplesWhere' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'triples_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'atoms_order_by' },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atoms_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atoms' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'value' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'thing' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'description' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'as_object_triples_aggregate' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'triplesWhere' },
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'as_object_triples' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'triplesWhere' },
                      },
                    },
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'limit' },
                      value: { kind: 'IntValue', value: '10' },
                    },
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'order_by' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'term' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: {
                                    kind: 'Name',
                                    value: 'total_market_cap',
                                  },
                                  value: { kind: 'EnumValue', value: 'desc' },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'subject' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetListsTagsQuery__
 *
 * To run a query within a React component, call `useGetListsTagsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetListsTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetListsTagsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      triplesWhere: // value for 'triplesWhere'
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useGetListsTagsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetListsTagsQuery,
    GetListsTagsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetListsTagsQuery, GetListsTagsQueryVariables>(
    GetListsTagsDocument,
    options,
  )
}
export function useGetListsTagsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetListsTagsQuery,
    GetListsTagsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetListsTagsQuery, GetListsTagsQueryVariables>(
    GetListsTagsDocument,
    options,
  )
}
export function useGetListsTagsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetListsTagsQuery,
        GetListsTagsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetListsTagsQuery, GetListsTagsQueryVariables>(
    GetListsTagsDocument,
    options,
  )
}
export type GetListsTagsQueryHookResult = ReturnType<
  typeof useGetListsTagsQuery
>
export type GetListsTagsLazyQueryHookResult = ReturnType<
  typeof useGetListsTagsLazyQuery
>
export type GetListsTagsSuspenseQueryHookResult = ReturnType<
  typeof useGetListsTagsSuspenseQuery
>
export type GetListsTagsQueryResult = Apollo.QueryResult<
  GetListsTagsQuery,
  GetListsTagsQueryVariables
>
export const GetTaggedObjectsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetTaggedObjects' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'objectId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'predicateId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'object_id' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_eq' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'objectId' },
                            },
                          },
                        ],
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'predicate_id' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_eq' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'predicateId' },
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'value' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'thing' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'name' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'description',
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'url' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'person' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'description',
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'vaults' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: {
                                      kind: 'Name',
                                      value: 'position_count',
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'account_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'Variable',
                                          name: {
                                            kind: 'Name',
                                            value: 'address',
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        arguments: [
                          {
                            kind: 'Argument',
                            name: { kind: 'Name', value: 'where' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: 'account_id' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: { kind: 'Name', value: '_eq' },
                                        value: {
                                          kind: 'Variable',
                                          name: {
                                            kind: 'Name',
                                            value: 'address',
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetTaggedObjectsQuery__
 *
 * To run a query within a React component, call `useGetTaggedObjectsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTaggedObjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTaggedObjectsQuery({
 *   variables: {
 *      objectId: // value for 'objectId'
 *      predicateId: // value for 'predicateId'
 *      address: // value for 'address'
 *   },
 * });
 */
export function useGetTaggedObjectsQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetTaggedObjectsQuery,
    GetTaggedObjectsQueryVariables
  > &
    (
      | { variables: GetTaggedObjectsQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetTaggedObjectsQuery, GetTaggedObjectsQueryVariables>(
    GetTaggedObjectsDocument,
    options,
  )
}
export function useGetTaggedObjectsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetTaggedObjectsQuery,
    GetTaggedObjectsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetTaggedObjectsQuery,
    GetTaggedObjectsQueryVariables
  >(GetTaggedObjectsDocument, options)
}
export function useGetTaggedObjectsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetTaggedObjectsQuery,
        GetTaggedObjectsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetTaggedObjectsQuery,
    GetTaggedObjectsQueryVariables
  >(GetTaggedObjectsDocument, options)
}
export type GetTaggedObjectsQueryHookResult = ReturnType<
  typeof useGetTaggedObjectsQuery
>
export type GetTaggedObjectsLazyQueryHookResult = ReturnType<
  typeof useGetTaggedObjectsLazyQuery
>
export type GetTaggedObjectsSuspenseQueryHookResult = ReturnType<
  typeof useGetTaggedObjectsSuspenseQuery
>
export type GetTaggedObjectsQueryResult = Apollo.QueryResult<
  GetTaggedObjectsQuery,
  GetTaggedObjectsQueryVariables
>
export const GetTriplesByCreatorDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetTriplesByCreator' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'creator_id' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_eq' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'address' },
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'creator_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'positions_aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_positions_aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetTriplesByCreatorQuery__
 *
 * To run a query within a React component, call `useGetTriplesByCreatorQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTriplesByCreatorQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTriplesByCreatorQuery({
 *   variables: {
 *      address: // value for 'address'
 *   },
 * });
 */
export function useGetTriplesByCreatorQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetTriplesByCreatorQuery,
    GetTriplesByCreatorQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetTriplesByCreatorQuery,
    GetTriplesByCreatorQueryVariables
  >(GetTriplesByCreatorDocument, options)
}
export function useGetTriplesByCreatorLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetTriplesByCreatorQuery,
    GetTriplesByCreatorQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetTriplesByCreatorQuery,
    GetTriplesByCreatorQueryVariables
  >(GetTriplesByCreatorDocument, options)
}
export function useGetTriplesByCreatorSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetTriplesByCreatorQuery,
        GetTriplesByCreatorQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetTriplesByCreatorQuery,
    GetTriplesByCreatorQueryVariables
  >(GetTriplesByCreatorDocument, options)
}
export type GetTriplesByCreatorQueryHookResult = ReturnType<
  typeof useGetTriplesByCreatorQuery
>
export type GetTriplesByCreatorLazyQueryHookResult = ReturnType<
  typeof useGetTriplesByCreatorLazyQuery
>
export type GetTriplesByCreatorSuspenseQueryHookResult = ReturnType<
  typeof useGetTriplesByCreatorSuspenseQuery
>
export type GetTriplesByCreatorQueryResult = Apollo.QueryResult<
  GetTriplesByCreatorQuery,
  GetTriplesByCreatorQueryVariables
>
export const GetTriplesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetTriples' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'triples_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'triples_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'total' },
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'TripleMetadata' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'TripleTxn' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'TripleVaultDetails' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'atom' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'triple' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'counter_term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'subject' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'total_shares' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'current_share_price' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionAggregateFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions_aggregate' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'aggregate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sum' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'subject_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'predicate_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'object_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'subject' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'predicate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'object' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'allPositions' },
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: {
                                kind: 'Name',
                                value: 'PositionAggregateFields',
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionFields' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'counter_term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'allPositions' },
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: {
                                kind: 'Name',
                                value: 'PositionAggregateFields',
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionFields' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleTxn' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'block_number' } },
          { kind: 'Field', name: { kind: 'Name', value: 'block_timestamp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'transaction_hash' } },
          { kind: 'Field', name: { kind: 'Name', value: 'creator_id' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleVaultDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'counter_term_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionDetails' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'counter_term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionDetails' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetTriplesQuery__
 *
 * To run a query within a React component, call `useGetTriplesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTriplesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTriplesQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetTriplesQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetTriplesQuery,
    GetTriplesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetTriplesQuery, GetTriplesQueryVariables>(
    GetTriplesDocument,
    options,
  )
}
export function useGetTriplesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetTriplesQuery,
    GetTriplesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetTriplesQuery, GetTriplesQueryVariables>(
    GetTriplesDocument,
    options,
  )
}
export function useGetTriplesSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetTriplesQuery,
        GetTriplesQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetTriplesQuery, GetTriplesQueryVariables>(
    GetTriplesDocument,
    options,
  )
}
export type GetTriplesQueryHookResult = ReturnType<typeof useGetTriplesQuery>
export type GetTriplesLazyQueryHookResult = ReturnType<
  typeof useGetTriplesLazyQuery
>
export type GetTriplesSuspenseQueryHookResult = ReturnType<
  typeof useGetTriplesSuspenseQuery
>
export type GetTriplesQueryResult = Apollo.QueryResult<
  GetTriplesQuery,
  GetTriplesQueryVariables
>
export const GetTriplesWithAggregatesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetTriplesWithAggregates' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'triples_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'triples_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'TripleMetadata' },
                      },
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'TripleTxn' },
                      },
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'TripleVaultDetails' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'creator' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'AccountMetadata' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'atom' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'triple' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'counter_term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'subject' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'total_shares' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'current_share_price' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionAggregateFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions_aggregate' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'aggregate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sum' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'subject_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'predicate_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'object_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'subject' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'predicate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'object' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'allPositions' },
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: {
                                kind: 'Name',
                                value: 'PositionAggregateFields',
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionFields' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'counter_term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'allPositions' },
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: {
                                kind: 'Name',
                                value: 'PositionAggregateFields',
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionFields' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleTxn' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'block_number' } },
          { kind: 'Field', name: { kind: 'Name', value: 'block_timestamp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'transaction_hash' } },
          { kind: 'Field', name: { kind: 'Name', value: 'creator_id' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleVaultDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'counter_term_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionDetails' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'counter_term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionDetails' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetTriplesWithAggregatesQuery__
 *
 * To run a query within a React component, call `useGetTriplesWithAggregatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTriplesWithAggregatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTriplesWithAggregatesQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetTriplesWithAggregatesQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetTriplesWithAggregatesQuery,
    GetTriplesWithAggregatesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetTriplesWithAggregatesQuery,
    GetTriplesWithAggregatesQueryVariables
  >(GetTriplesWithAggregatesDocument, options)
}
export function useGetTriplesWithAggregatesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetTriplesWithAggregatesQuery,
    GetTriplesWithAggregatesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetTriplesWithAggregatesQuery,
    GetTriplesWithAggregatesQueryVariables
  >(GetTriplesWithAggregatesDocument, options)
}
export function useGetTriplesWithAggregatesSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetTriplesWithAggregatesQuery,
        GetTriplesWithAggregatesQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetTriplesWithAggregatesQuery,
    GetTriplesWithAggregatesQueryVariables
  >(GetTriplesWithAggregatesDocument, options)
}
export type GetTriplesWithAggregatesQueryHookResult = ReturnType<
  typeof useGetTriplesWithAggregatesQuery
>
export type GetTriplesWithAggregatesLazyQueryHookResult = ReturnType<
  typeof useGetTriplesWithAggregatesLazyQuery
>
export type GetTriplesWithAggregatesSuspenseQueryHookResult = ReturnType<
  typeof useGetTriplesWithAggregatesSuspenseQuery
>
export type GetTriplesWithAggregatesQueryResult = Apollo.QueryResult<
  GetTriplesWithAggregatesQuery,
  GetTriplesWithAggregatesQueryVariables
>
export const GetTriplesCountDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetTriplesCount' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'triples_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  alias: { kind: 'Name', value: 'total' },
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetTriplesCountQuery__
 *
 * To run a query within a React component, call `useGetTriplesCountQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTriplesCountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTriplesCountQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetTriplesCountQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetTriplesCountQuery,
    GetTriplesCountQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetTriplesCountQuery, GetTriplesCountQueryVariables>(
    GetTriplesCountDocument,
    options,
  )
}
export function useGetTriplesCountLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetTriplesCountQuery,
    GetTriplesCountQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetTriplesCountQuery,
    GetTriplesCountQueryVariables
  >(GetTriplesCountDocument, options)
}
export function useGetTriplesCountSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetTriplesCountQuery,
        GetTriplesCountQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetTriplesCountQuery,
    GetTriplesCountQueryVariables
  >(GetTriplesCountDocument, options)
}
export type GetTriplesCountQueryHookResult = ReturnType<
  typeof useGetTriplesCountQuery
>
export type GetTriplesCountLazyQueryHookResult = ReturnType<
  typeof useGetTriplesCountLazyQuery
>
export type GetTriplesCountSuspenseQueryHookResult = ReturnType<
  typeof useGetTriplesCountSuspenseQuery
>
export type GetTriplesCountQueryResult = Apollo.QueryResult<
  GetTriplesCountQuery,
  GetTriplesCountQueryVariables
>
export const GetTripleDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetTriple' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'tripleId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triple' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'term_id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'tripleId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'TripleMetadata' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'TripleTxn' },
                },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'TripleVaultDetails' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'atom' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'image' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'triple' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'counter_term' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'vaults' },
                                    arguments: [
                                      {
                                        kind: 'Argument',
                                        name: { kind: 'Name', value: 'where' },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: 'curve_id',
                                              },
                                              value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                  {
                                                    kind: 'ObjectField',
                                                    name: {
                                                      kind: 'Name',
                                                      value: '_eq',
                                                    },
                                                    value: {
                                                      kind: 'StringValue',
                                                      value: '1',
                                                      block: false,
                                                    },
                                                  },
                                                ],
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'position_count',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'positions_aggregate',
                                          },
                                          selectionSet: {
                                            kind: 'SelectionSet',
                                            selections: [
                                              {
                                                kind: 'Field',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'aggregate',
                                                },
                                                selectionSet: {
                                                  kind: 'SelectionSet',
                                                  selections: [
                                                    {
                                                      kind: 'Field',
                                                      name: {
                                                        kind: 'Name',
                                                        value: 'sum',
                                                      },
                                                      selectionSet: {
                                                        kind: 'SelectionSet',
                                                        selections: [
                                                          {
                                                            kind: 'Field',
                                                            name: {
                                                              kind: 'Name',
                                                              value: 'shares',
                                                            },
                                                          },
                                                        ],
                                                      },
                                                    },
                                                  ],
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'subject' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'predicate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'object' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'data' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'emoji' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'type' },
                                  },
                                  {
                                    kind: 'FragmentSpread',
                                    name: { kind: 'Name', value: 'AtomValue' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'creator' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'FragmentSpread',
                                          name: {
                                            kind: 'Name',
                                            value: 'AccountMetadata',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'total_shares' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'current_share_price' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionAggregateFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions_aggregate' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'aggregate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sum' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'subject_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'predicate_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'object_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'subject' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'predicate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'object' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomValue' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'allPositions' },
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: {
                                kind: 'Name',
                                value: 'PositionAggregateFields',
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionFields' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'counter_term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        alias: { kind: 'Name', value: 'allPositions' },
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: {
                                kind: 'Name',
                                value: 'PositionAggregateFields',
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionFields' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleTxn' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'block_number' } },
          { kind: 'Field', name: { kind: 'Name', value: 'block_timestamp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'transaction_hash' } },
          { kind: 'Field', name: { kind: 'Name', value: 'creator_id' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleVaultDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'counter_term_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionDetails' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'counter_term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'FragmentSpread',
                              name: { kind: 'Name', value: 'PositionDetails' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetTripleQuery__
 *
 * To run a query within a React component, call `useGetTripleQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTripleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTripleQuery({
 *   variables: {
 *      tripleId: // value for 'tripleId'
 *   },
 * });
 */
export function useGetTripleQuery(
  baseOptions: Apollo.QueryHookOptions<
    GetTripleQuery,
    GetTripleQueryVariables
  > &
    (
      | { variables: GetTripleQueryVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetTripleQuery, GetTripleQueryVariables>(
    GetTripleDocument,
    options,
  )
}
export function useGetTripleLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetTripleQuery,
    GetTripleQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetTripleQuery, GetTripleQueryVariables>(
    GetTripleDocument,
    options,
  )
}
export function useGetTripleSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<GetTripleQuery, GetTripleQueryVariables>,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetTripleQuery, GetTripleQueryVariables>(
    GetTripleDocument,
    options,
  )
}
export type GetTripleQueryHookResult = ReturnType<typeof useGetTripleQuery>
export type GetTripleLazyQueryHookResult = ReturnType<
  typeof useGetTripleLazyQuery
>
export type GetTripleSuspenseQueryHookResult = ReturnType<
  typeof useGetTripleSuspenseQuery
>
export type GetTripleQueryResult = Apollo.QueryResult<
  GetTripleQuery,
  GetTripleQueryVariables
>
export const GetAtomTriplesWithPositionsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetAtomTriplesWithPositions' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'triples_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetAtomTriplesWithPositionsQuery__
 *
 * To run a query within a React component, call `useGetAtomTriplesWithPositionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAtomTriplesWithPositionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAtomTriplesWithPositionsQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetAtomTriplesWithPositionsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetAtomTriplesWithPositionsQuery,
    GetAtomTriplesWithPositionsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetAtomTriplesWithPositionsQuery,
    GetAtomTriplesWithPositionsQueryVariables
  >(GetAtomTriplesWithPositionsDocument, options)
}
export function useGetAtomTriplesWithPositionsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetAtomTriplesWithPositionsQuery,
    GetAtomTriplesWithPositionsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetAtomTriplesWithPositionsQuery,
    GetAtomTriplesWithPositionsQueryVariables
  >(GetAtomTriplesWithPositionsDocument, options)
}
export function useGetAtomTriplesWithPositionsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetAtomTriplesWithPositionsQuery,
        GetAtomTriplesWithPositionsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetAtomTriplesWithPositionsQuery,
    GetAtomTriplesWithPositionsQueryVariables
  >(GetAtomTriplesWithPositionsDocument, options)
}
export type GetAtomTriplesWithPositionsQueryHookResult = ReturnType<
  typeof useGetAtomTriplesWithPositionsQuery
>
export type GetAtomTriplesWithPositionsLazyQueryHookResult = ReturnType<
  typeof useGetAtomTriplesWithPositionsLazyQuery
>
export type GetAtomTriplesWithPositionsSuspenseQueryHookResult = ReturnType<
  typeof useGetAtomTriplesWithPositionsSuspenseQuery
>
export type GetAtomTriplesWithPositionsQueryResult = Apollo.QueryResult<
  GetAtomTriplesWithPositionsQuery,
  GetAtomTriplesWithPositionsQueryVariables
>
export const GetTriplesWithPositionsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetTriplesWithPositions' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'triples_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'triples_bool_exp' },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'address' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            alias: { kind: 'Name', value: 'total' },
            name: { kind: 'Name', value: 'triples_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triples' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_term_id' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'subject' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'predicate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'object' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'aggregate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'count' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'address',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'image',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'aggregate' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'count' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'total_shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'positions' },
                              arguments: [
                                {
                                  kind: 'Argument',
                                  name: { kind: 'Name', value: 'where' },
                                  value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                      {
                                        kind: 'ObjectField',
                                        name: {
                                          kind: 'Name',
                                          value: 'account_id',
                                        },
                                        value: {
                                          kind: 'ObjectValue',
                                          fields: [
                                            {
                                              kind: 'ObjectField',
                                              name: {
                                                kind: 'Name',
                                                value: '_eq',
                                              },
                                              value: {
                                                kind: 'Variable',
                                                name: {
                                                  kind: 'Name',
                                                  value: 'address',
                                                },
                                              },
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: { kind: 'Name', value: 'id' },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'image',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetTriplesWithPositionsQuery__
 *
 * To run a query within a React component, call `useGetTriplesWithPositionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTriplesWithPositionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTriplesWithPositionsQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *      address: // value for 'address'
 *   },
 * });
 */
export function useGetTriplesWithPositionsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetTriplesWithPositionsQuery,
    GetTriplesWithPositionsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    GetTriplesWithPositionsQuery,
    GetTriplesWithPositionsQueryVariables
  >(GetTriplesWithPositionsDocument, options)
}
export function useGetTriplesWithPositionsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetTriplesWithPositionsQuery,
    GetTriplesWithPositionsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    GetTriplesWithPositionsQuery,
    GetTriplesWithPositionsQueryVariables
  >(GetTriplesWithPositionsDocument, options)
}
export function useGetTriplesWithPositionsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<
        GetTriplesWithPositionsQuery,
        GetTriplesWithPositionsQueryVariables
      >,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<
    GetTriplesWithPositionsQuery,
    GetTriplesWithPositionsQueryVariables
  >(GetTriplesWithPositionsDocument, options)
}
export type GetTriplesWithPositionsQueryHookResult = ReturnType<
  typeof useGetTriplesWithPositionsQuery
>
export type GetTriplesWithPositionsLazyQueryHookResult = ReturnType<
  typeof useGetTriplesWithPositionsLazyQuery
>
export type GetTriplesWithPositionsSuspenseQueryHookResult = ReturnType<
  typeof useGetTriplesWithPositionsSuspenseQuery
>
export type GetTriplesWithPositionsQueryResult = Apollo.QueryResult<
  GetTriplesWithPositionsQuery,
  GetTriplesWithPositionsQueryVariables
>
export const GetVaultsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetVaults' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'offset' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orderBy' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'vaults_order_by' },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'where' },
          },
          type: {
            kind: 'NamedType',
            name: { kind: 'Name', value: 'vaults_bool_exp' },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vaults_aggregate' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'offset' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'offset' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orderBy' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'where' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'count' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'nodes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'atom' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                ],
                              },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'triple' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'term_id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'subject' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'predicate' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'object' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'term_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions_aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'nodes' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'account' },
                                    selectionSet: {
                                      kind: 'SelectionSet',
                                      selections: [
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'atom_id',
                                          },
                                        },
                                        {
                                          kind: 'Field',
                                          name: {
                                            kind: 'Name',
                                            value: 'label',
                                          },
                                        },
                                      ],
                                    },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'shares' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'current_share_price' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_shares' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetVaultsQuery__
 *
 * To run a query within a React component, call `useGetVaultsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetVaultsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetVaultsQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      offset: // value for 'offset'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetVaultsQuery(
  baseOptions?: Apollo.QueryHookOptions<
    GetVaultsQuery,
    GetVaultsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetVaultsQuery, GetVaultsQueryVariables>(
    GetVaultsDocument,
    options,
  )
}
export function useGetVaultsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetVaultsQuery,
    GetVaultsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetVaultsQuery, GetVaultsQueryVariables>(
    GetVaultsDocument,
    options,
  )
}
export function useGetVaultsSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<GetVaultsQuery, GetVaultsQueryVariables>,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetVaultsQuery, GetVaultsQueryVariables>(
    GetVaultsDocument,
    options,
  )
}
export type GetVaultsQueryHookResult = ReturnType<typeof useGetVaultsQuery>
export type GetVaultsLazyQueryHookResult = ReturnType<
  typeof useGetVaultsLazyQuery
>
export type GetVaultsSuspenseQueryHookResult = ReturnType<
  typeof useGetVaultsSuspenseQuery
>
export type GetVaultsQueryResult = Apollo.QueryResult<
  GetVaultsQuery,
  GetVaultsQueryVariables
>
export const GetVaultDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetVault' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'termId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'curveId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'numeric' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'term_id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'termId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'curve_id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'curveId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'VaultDetails' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultBasicDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'atom' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'triple' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'subject' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'predicate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'object' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'current_share_price' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'total_shares' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'VaultBasicDetails' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useGetVaultQuery__
 *
 * To run a query within a React component, call `useGetVaultQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetVaultQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetVaultQuery({
 *   variables: {
 *      termId: // value for 'termId'
 *      curveId: // value for 'curveId'
 *   },
 * });
 */
export function useGetVaultQuery(
  baseOptions: Apollo.QueryHookOptions<GetVaultQuery, GetVaultQueryVariables> &
    ({ variables: GetVaultQueryVariables; skip?: boolean } | { skip: boolean }),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetVaultQuery, GetVaultQueryVariables>(
    GetVaultDocument,
    options,
  )
}
export function useGetVaultLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetVaultQuery,
    GetVaultQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetVaultQuery, GetVaultQueryVariables>(
    GetVaultDocument,
    options,
  )
}
export function useGetVaultSuspenseQuery(
  baseOptions?:
    | Apollo.SkipToken
    | Apollo.SuspenseQueryHookOptions<GetVaultQuery, GetVaultQueryVariables>,
) {
  const options =
    baseOptions === Apollo.skipToken
      ? baseOptions
      : { ...defaultOptions, ...baseOptions }
  return Apollo.useSuspenseQuery<GetVaultQuery, GetVaultQueryVariables>(
    GetVaultDocument,
    options,
  )
}
export type GetVaultQueryHookResult = ReturnType<typeof useGetVaultQuery>
export type GetVaultLazyQueryHookResult = ReturnType<
  typeof useGetVaultLazyQuery
>
export type GetVaultSuspenseQueryHookResult = ReturnType<
  typeof useGetVaultSuspenseQuery
>
export type GetVaultQueryResult = Apollo.QueryResult<
  GetVaultQuery,
  GetVaultQueryVariables
>
export const EventsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'subscription',
      name: { kind: 'Name', value: 'Events' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'addresses' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'ListType',
              type: {
                kind: 'NonNullType',
                type: {
                  kind: 'NamedType',
                  name: { kind: 'Name', value: 'String' },
                },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'events' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: '_or' },
                      value: {
                        kind: 'ListValue',
                        values: [
                          {
                            kind: 'ObjectValue',
                            fields: [
                              {
                                kind: 'ObjectField',
                                name: { kind: 'Name', value: 'deposit' },
                                value: {
                                  kind: 'ObjectValue',
                                  fields: [
                                    {
                                      kind: 'ObjectField',
                                      name: {
                                        kind: 'Name',
                                        value: 'is_atom_wallet',
                                      },
                                      value: {
                                        kind: 'ObjectValue',
                                        fields: [
                                          {
                                            kind: 'ObjectField',
                                            name: {
                                              kind: 'Name',
                                              value: '_eq',
                                            },
                                            value: {
                                              kind: 'BooleanValue',
                                              value: false,
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'order_by' },
                value: {
                  kind: 'ListValue',
                  values: [
                    {
                      kind: 'ObjectValue',
                      fields: [
                        {
                          kind: 'ObjectField',
                          name: { kind: 'Name', value: 'block_number' },
                          value: { kind: 'EnumValue', value: 'desc' },
                        },
                      ],
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EventDetailsSubscription' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AccountMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'accounts' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomValue' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'value' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'person' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'thing' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'organization' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'url' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AtomMetadata' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'atoms' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'data' } },
          { kind: 'Field', name: { kind: 'Name', value: 'image' } },
          { kind: 'Field', name: { kind: 'Name', value: 'label' } },
          { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'wallet_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
              ],
            },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'AtomValue' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'DepositEventFragment' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'events' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'deposit' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
                {
                  kind: 'Field',
                  name: {
                    kind: 'Name',
                    value: 'sender_assets_after_total_fees',
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'shares_for_receiver' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'receiver' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'sender' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EventDetailsSubscription' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'events' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'block_number' } },
          { kind: 'Field', name: { kind: 'Name', value: 'block_timestamp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
          { kind: 'Field', name: { kind: 'Name', value: 'transaction_hash' } },
          { kind: 'Field', name: { kind: 'Name', value: 'atom_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'triple_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'deposit_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'redemption_id' } },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'DepositEventFragment' },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'RedemptionEventFragment' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'atom' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AtomMetadata' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'term' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'total_market_cap' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'vaults' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'position_count' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'positions' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'shares' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'account' },
                              selectionSet: {
                                kind: 'SelectionSet',
                                selections: [
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'label' },
                                  },
                                  {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'image' },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'triple' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'TripleMetadataSubscription' },
                },
                {
                  kind: 'FragmentSpread',
                  name: {
                    kind: 'Name',
                    value: 'TripleVaultCouterVaultDetailsWithPositions',
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'counter_term_id' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'positions_aggregate' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'aggregate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'count' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'PositionFields' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'positions' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'shares' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'vault' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'total_shares' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'current_share_price' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'RedemptionEventFragment' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'events' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'redemption' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'receiver_id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'shares_redeemed_by_sender' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'assets_for_receiver' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: {
        kind: 'Name',
        value: 'TripleVaultCouterVaultDetailsWithPositions',
      },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'counter_term_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: {
                          kind: 'Name',
                          value: 'VaultDetailsWithFilteredPositions',
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'counter_term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'vaults' },
                  arguments: [
                    {
                      kind: 'Argument',
                      name: { kind: 'Name', value: 'where' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: 'curve_id' },
                            value: {
                              kind: 'ObjectValue',
                              fields: [
                                {
                                  kind: 'ObjectField',
                                  name: { kind: 'Name', value: '_eq' },
                                  value: {
                                    kind: 'StringValue',
                                    value: '1',
                                    block: false,
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: {
                          kind: 'Name',
                          value: 'VaultDetailsWithFilteredPositions',
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'TripleMetadataSubscription' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'triples' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'creator' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'creator_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'subject_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'predicate_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'object_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'subject' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'predicate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'object' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'data' } },
                { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'image' } },
                { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                { kind: 'Field', name: { kind: 'Name', value: 'emoji' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'creator' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AccountMetadata' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultBasicDetails' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'term_id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'curve_id' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'term' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'atom' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'label' } },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'triple' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'term_id' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'subject' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'predicate' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'object' },
                        selectionSet: {
                          kind: 'SelectionSet',
                          selections: [
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'term_id' },
                            },
                            {
                              kind: 'Field',
                              name: { kind: 'Name', value: 'label' },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'current_share_price' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'total_shares' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultFilteredPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'positions' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'where' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'account_id' },
                      value: {
                        kind: 'ObjectValue',
                        fields: [
                          {
                            kind: 'ObjectField',
                            name: { kind: 'Name', value: '_in' },
                            value: {
                              kind: 'Variable',
                              name: { kind: 'Name', value: 'addresses' },
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'PositionFields' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'VaultDetailsWithFilteredPositions' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'vaults' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'VaultBasicDetails' },
          },
          {
            kind: 'FragmentSpread',
            name: { kind: 'Name', value: 'VaultFilteredPositions' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode

/**
 * __useEventsSubscription__
 *
 * To run a query within a React component, call `useEventsSubscription` and pass it any options that fit your needs.
 * When your component renders, `useEventsSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useEventsSubscription({
 *   variables: {
 *      addresses: // value for 'addresses'
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useEventsSubscription(
  baseOptions: Apollo.SubscriptionHookOptions<
    EventsSubscription,
    EventsSubscriptionVariables
  > &
    (
      | { variables: EventsSubscriptionVariables; skip?: boolean }
      | { skip: boolean }
    ),
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useSubscription<
    EventsSubscription,
    EventsSubscriptionVariables
  >(EventsDocument, options)
}
export type EventsSubscriptionHookResult = ReturnType<
  typeof useEventsSubscription
>
export type EventsSubscriptionResult =
  Apollo.SubscriptionResult<EventsSubscription>
