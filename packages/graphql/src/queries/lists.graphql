# predicateId = 4 for tags on dev, 3 on prod

# GetLists query for Exploring Lists
query GetLists($where: predicate_objects_bool_exp) {
  predicate_objects_aggregate(where: $where) {
    aggregate {
      count
    }
  }
  predicate_objects(
    where: $where
    order_by: [{ claim_count: desc }, { triple_count: desc }]
  ) {
    id
    claim_count
    triple_count
    object {
      term_id
      label
      image
    }
  }
}

query GetListItems($predicateId: numeric, $objectId: numeric) {
  triples_aggregate(
    where: { predicate_id: { _eq: predicateId }, object_id: { _eq: $objectId } }
    order_by: [
      {
        term: { positions_aggregate: { count: desc } }
        counter_term: { positions_aggregate: { count: desc } }
      }
    ]
  ) {
    aggregate {
      count
    }
    nodes {
      ...TripleVaultDetails
    }
  }
}

# GetListDetails query for List Details page
## Combines the aggregates and nodes within since we don't need pagination on the tags yet
## If we do, we'd need to paginate the triples and tags separately and split
## SG: This appears to be getting the aggregate sum of shares across all positions in the vault....
## We will correct this to just get the total_shares in the pro rata vault.
query GetListDetails(
  $globalWhere: triples_bool_exp
  $tagPredicateId: numeric
  $limit: Int
  $offset: Int
  $orderBy: [triples_order_by!]
) {
  globalTriplesAggregate: triples_aggregate(where: $globalWhere) {
    aggregate {
      count
    }
  }
  globalTriples: triples(
    where: $globalWhere
    limit: $limit
    offset: $offset
    order_by: $orderBy
  ) {
    term_id
    counter_term_id
    subject {
      term_id
      label
      wallet_id
      image
      type
      tags: as_subject_triples_aggregate(
        where: { predicate_id: { _eq: $tagPredicateId } }
      ) {
        nodes {
          object {
            label
            term_id
            taggedIdentities: as_object_triples_aggregate {
              nodes {
                subject {
                  label
                  term_id
                }
                term_id
              }
              aggregate {
                count
              }
            }
          }
        }
        aggregate {
          count
        }
      }
    }
    object {
      term_id
      label
      wallet_id
      image
      type
    }
    predicate {
      term_id
      label
      wallet_id
      image
      type
    }
    term {
      vaults(where: { curve_id: { _eq: "1" } }) {
        current_share_price
        position_count
        total_shares
      }
    }
    counter_term {
      vaults(where: { curve_id: { _eq: "1" } }) {
        current_share_price
        position_count
        total_shares
      }
    }
  }
}

query GetListDetailsWithPosition(
  $globalWhere: triples_bool_exp
  $tagPredicateId: numeric
  $address: String
  $limit: Int
  $offset: Int
  $orderBy: [triples_order_by!]
) {
  globalTriplesAggregate: triples_aggregate(where: $globalWhere) {
    aggregate {
      count
    }
  }
  globalTriples: triples(
    where: $globalWhere
    limit: $limit
    offset: $offset
    order_by: $orderBy
  ) {
    term_id
    counter_term_id
    subject {
      term_id
      label
      wallet_id
      image
      type
      tags: as_subject_triples_aggregate(
        where: { predicate_id: { _eq: $tagPredicateId } }
      ) {
        nodes {
          object {
            label
            term_id
            taggedIdentities: as_object_triples_aggregate {
              nodes {
                subject {
                  label
                  term_id
                }
                term_id
              }
              aggregate {
                count
              }
            }
          }
        }
        aggregate {
          count
        }
      }
    }
    object {
      term_id
      label
      wallet_id
      image
      type
    }
    predicate {
      term_id
      label
      wallet_id
      image
      type
    }
    term {
      vaults {
        current_share_price
        position_count
        total_shares
      }
      positions(where: { account_id: { _eq: $address } }) {
        account {
          id
          label
          image
        }
        shares
      }
    }
    counter_term {
      vaults {
        current_share_price
        position_count
        total_shares
      }
      positions(where: { account_id: { _eq: $address } }) {
        account {
          id
          label
          image
        }
        shares
      }
    }
  }
}

query GetListDetailsWithUser(
  $globalWhere: triples_bool_exp
  $userWhere: triples_bool_exp
  $tagPredicateId: numeric
  $address: String
  $limit: Int
  $offset: Int
  $orderBy: [triples_order_by!]
) {
  globalTriplesAggregate: triples_aggregate(where: $globalWhere) {
    aggregate {
      count
    }
  }
  globalTriples: triples(
    where: $globalWhere
    limit: $limit
    offset: $offset
    order_by: $orderBy
  ) {
    term_id
    counter_term_id
    subject {
      term_id
      label
      wallet_id
      image
      type
      tags: as_subject_triples_aggregate(
        where: { predicate_id: { _eq: $tagPredicateId } }
      ) {
        nodes {
          object {
            label
            term_id
            taggedIdentities: as_object_triples_aggregate {
              nodes {
                subject {
                  label
                  term_id
                }
                term_id
              }
              aggregate {
                count
              }
            }
          }
        }
        aggregate {
          count
        }
      }
    }
    object {
      term_id
      label
      wallet_id
      image
      type
    }
    predicate {
      term_id
      label
      wallet_id
      image
      type
    }
    term {
      vaults {
        current_share_price
        position_count
        total_shares
      }
      positions(where: { account_id: { _eq: $address } }) {
        account {
          id
          label
          image
        }
        shares
      }
    }
    counter_term {
      vaults {
        current_share_price
        position_count
        total_shares
      }
      positions(where: { account_id: { _eq: $address } }) {
        account {
          id
          label
          image
        }
        shares
      }
    }
  }
  userTriplesAggregate: triples_aggregate(where: $userWhere) {
    aggregate {
      count
    }
  }
  userTriples: triples(where: $userWhere) {
    term_id
    counter_term_id
    subject {
      term_id
      label
      wallet_id
      image
      type
      tags: as_subject_triples_aggregate(
        where: { predicate_id: { _eq: $tagPredicateId } }
      ) {
        nodes {
          object {
            label
            term_id
            taggedIdentities: as_object_triples_aggregate {
              nodes {
                subject {
                  label
                  term_id
                }
                term_id
              }
              aggregate {
                count
              }
            }
          }
        }
        aggregate {
          count
        }
      }
    }
    object {
      term_id
      label
      wallet_id
      image
      type
    }
    predicate {
      term_id
      label
      wallet_id
      image
      type
    }
    term {
      vaults {
        current_share_price
        position_count
        total_shares
      }
      positions(where: { account_id: { _eq: $address } }) {
        account {
          id
          label
          image
        }
        shares
      }
    }
    counter_term {
      vaults {
        current_share_price
        position_count
        total_shares
      }
      positions(where: { account_id: { _eq: $address } }) {
        account {
          id
          label
          image
        }
        shares
      }
    }
  }
}
