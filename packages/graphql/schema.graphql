schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
  """
  refresh the cache entry
  """
  refresh: Boolean! = false
  """
  measured in seconds
  """
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

input PinOrganizationInput {
  description: String
  email: String
  image: String
  name: String
  url: String
}

type PinOutput {
  uri: String
}

input PinPersonInput {
  description: String
  email: String
  identifier: String
  image: String
  name: String
  url: String
}

input PinThingInput {
  description: String
  image: String
  name: String
  url: String
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  """
  does the column match the given case-insensitive pattern
  """
  _ilike: String
  _in: [String!]
  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean
  """
  does the column match the given pattern
  """
  _like: String
  _lt: String
  _lte: String
  _neq: String
  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: String
  _nin: [String!]
  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String
  """
  does the column NOT match the given pattern
  """
  _nlike: String
  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String
  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: String
  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String
  """
  does the column match the given SQL regular expression
  """
  _similar: String
}

scalar _text

scalar account_type

"""
Boolean expression to compare columns of type "account_type". All fields are combined with logical 'AND'.
"""
input account_type_comparison_exp {
  _eq: account_type
  _gt: account_type
  _gte: account_type
  _in: [account_type!]
  _is_null: Boolean
  _lt: account_type
  _lte: account_type
  _neq: account_type
  _nin: [account_type!]
}

"""
columns and relationships of "account"
"""
type accounts {
  """
  An object relationship
  """
  atom: atoms
  atom_id: numeric
  """
  An array relationship
  """
  atoms(
    """
    distinct select on columns
    """
    distinct_on: [atoms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [atoms_order_by!]
    """
    filter the rows returned
    """
    where: atoms_bool_exp
  ): [atoms!]!
  """
  An aggregate relationship
  """
  atoms_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [atoms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [atoms_order_by!]
    """
    filter the rows returned
    """
    where: atoms_bool_exp
  ): atoms_aggregate!
  cached_image: cached_images_cached_image
  """
  An array relationship
  """
  deposits_received(
    """
    distinct select on columns
    """
    distinct_on: [deposits_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [deposits_order_by!]
    """
    filter the rows returned
    """
    where: deposits_bool_exp
  ): [deposits!]!
  """
  An aggregate relationship
  """
  deposits_received_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [deposits_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [deposits_order_by!]
    """
    filter the rows returned
    """
    where: deposits_bool_exp
  ): deposits_aggregate!
  """
  An array relationship
  """
  deposits_sent(
    """
    distinct select on columns
    """
    distinct_on: [deposits_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [deposits_order_by!]
    """
    filter the rows returned
    """
    where: deposits_bool_exp
  ): [deposits!]!
  """
  An aggregate relationship
  """
  deposits_sent_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [deposits_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [deposits_order_by!]
    """
    filter the rows returned
    """
    where: deposits_bool_exp
  ): deposits_aggregate!
  """
  An array relationship
  """
  fee_transfers(
    """
    distinct select on columns
    """
    distinct_on: [fee_transfers_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [fee_transfers_order_by!]
    """
    filter the rows returned
    """
    where: fee_transfers_bool_exp
  ): [fee_transfers!]!
  """
  An aggregate relationship
  """
  fee_transfers_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [fee_transfers_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [fee_transfers_order_by!]
    """
    filter the rows returned
    """
    where: fee_transfers_bool_exp
  ): fee_transfers_aggregate!
  id: String!
  image: String
  label: String!
  """
  An array relationship
  """
  positions(
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): [positions!]!
  """
  An aggregate relationship
  """
  positions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): positions_aggregate!
  """
  An array relationship
  """
  redemptions_received(
    """
    distinct select on columns
    """
    distinct_on: [redemptions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [redemptions_order_by!]
    """
    filter the rows returned
    """
    where: redemptions_bool_exp
  ): [redemptions!]!
  """
  An aggregate relationship
  """
  redemptions_received_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [redemptions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [redemptions_order_by!]
    """
    filter the rows returned
    """
    where: redemptions_bool_exp
  ): redemptions_aggregate!
  """
  An array relationship
  """
  redemptions_sent(
    """
    distinct select on columns
    """
    distinct_on: [redemptions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [redemptions_order_by!]
    """
    filter the rows returned
    """
    where: redemptions_bool_exp
  ): [redemptions!]!
  """
  An aggregate relationship
  """
  redemptions_sent_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [redemptions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [redemptions_order_by!]
    """
    filter the rows returned
    """
    where: redemptions_bool_exp
  ): redemptions_aggregate!
  """
  An array relationship
  """
  signals(
    """
    distinct select on columns
    """
    distinct_on: [signals_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signals_order_by!]
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): [signals!]!
  """
  An aggregate relationship
  """
  signals_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [signals_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signals_order_by!]
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): signals_aggregate!
  """
  An array relationship
  """
  triples(
    """
    distinct select on columns
    """
    distinct_on: [triples_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [triples_order_by!]
    """
    filter the rows returned
    """
    where: triples_bool_exp
  ): [triples!]!
  """
  An aggregate relationship
  """
  triples_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [triples_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [triples_order_by!]
    """
    filter the rows returned
    """
    where: triples_bool_exp
  ): triples_aggregate!
  type: account_type!
}

"""
aggregated selection of "account"
"""
type accounts_aggregate {
  aggregate: accounts_aggregate_fields
  nodes: [accounts!]!
}

input accounts_aggregate_bool_exp {
  count: accounts_aggregate_bool_exp_count
}

input accounts_aggregate_bool_exp_count {
  arguments: [accounts_select_column!]
  distinct: Boolean
  filter: accounts_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "account"
"""
type accounts_aggregate_fields {
  avg: accounts_avg_fields
  count(columns: [accounts_select_column!], distinct: Boolean): Int!
  max: accounts_max_fields
  min: accounts_min_fields
  stddev: accounts_stddev_fields
  stddev_pop: accounts_stddev_pop_fields
  stddev_samp: accounts_stddev_samp_fields
  sum: accounts_sum_fields
  var_pop: accounts_var_pop_fields
  var_samp: accounts_var_samp_fields
  variance: accounts_variance_fields
}

"""
order by aggregate values of table "account"
"""
input accounts_aggregate_order_by {
  avg: accounts_avg_order_by
  count: order_by
  max: accounts_max_order_by
  min: accounts_min_order_by
  stddev: accounts_stddev_order_by
  stddev_pop: accounts_stddev_pop_order_by
  stddev_samp: accounts_stddev_samp_order_by
  sum: accounts_sum_order_by
  var_pop: accounts_var_pop_order_by
  var_samp: accounts_var_samp_order_by
  variance: accounts_variance_order_by
}

"""
aggregate avg on columns
"""
type accounts_avg_fields {
  atom_id: Float
}

"""
order by avg() on columns of table "account"
"""
input accounts_avg_order_by {
  atom_id: order_by
}

"""
Boolean expression to filter rows from the table "account". All fields are combined with a logical 'AND'.
"""
input accounts_bool_exp {
  _and: [accounts_bool_exp!]
  _not: accounts_bool_exp
  _or: [accounts_bool_exp!]
  atom: atoms_bool_exp
  atom_id: numeric_comparison_exp
  atoms: atoms_bool_exp
  atoms_aggregate: atoms_aggregate_bool_exp
  deposits_received: deposits_bool_exp
  deposits_received_aggregate: deposits_aggregate_bool_exp
  deposits_sent: deposits_bool_exp
  deposits_sent_aggregate: deposits_aggregate_bool_exp
  fee_transfers: fee_transfers_bool_exp
  fee_transfers_aggregate: fee_transfers_aggregate_bool_exp
  id: String_comparison_exp
  image: String_comparison_exp
  label: String_comparison_exp
  positions: positions_bool_exp
  positions_aggregate: positions_aggregate_bool_exp
  redemptions_received: redemptions_bool_exp
  redemptions_received_aggregate: redemptions_aggregate_bool_exp
  redemptions_sent: redemptions_bool_exp
  redemptions_sent_aggregate: redemptions_aggregate_bool_exp
  signals: signals_bool_exp
  signals_aggregate: signals_aggregate_bool_exp
  triples: triples_bool_exp
  triples_aggregate: triples_aggregate_bool_exp
  type: account_type_comparison_exp
}

"""
aggregate max on columns
"""
type accounts_max_fields {
  atom_id: numeric
  id: String
  image: String
  label: String
  type: account_type
}

"""
order by max() on columns of table "account"
"""
input accounts_max_order_by {
  atom_id: order_by
  id: order_by
  image: order_by
  label: order_by
  type: order_by
}

"""
aggregate min on columns
"""
type accounts_min_fields {
  atom_id: numeric
  id: String
  image: String
  label: String
  type: account_type
}

"""
order by min() on columns of table "account"
"""
input accounts_min_order_by {
  atom_id: order_by
  id: order_by
  image: order_by
  label: order_by
  type: order_by
}

"""
Ordering options when selecting data from "account".
"""
input accounts_order_by {
  atom: atoms_order_by
  atom_id: order_by
  atoms_aggregate: atoms_aggregate_order_by
  deposits_received_aggregate: deposits_aggregate_order_by
  deposits_sent_aggregate: deposits_aggregate_order_by
  fee_transfers_aggregate: fee_transfers_aggregate_order_by
  id: order_by
  image: order_by
  label: order_by
  positions_aggregate: positions_aggregate_order_by
  redemptions_received_aggregate: redemptions_aggregate_order_by
  redemptions_sent_aggregate: redemptions_aggregate_order_by
  signals_aggregate: signals_aggregate_order_by
  triples_aggregate: triples_aggregate_order_by
  type: order_by
}

"""
select columns of table "account"
"""
enum accounts_select_column {
  """
  column name
  """
  atom_id
  """
  column name
  """
  id
  """
  column name
  """
  image
  """
  column name
  """
  label
  """
  column name
  """
  type
}

"""
aggregate stddev on columns
"""
type accounts_stddev_fields {
  atom_id: Float
}

"""
order by stddev() on columns of table "account"
"""
input accounts_stddev_order_by {
  atom_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type accounts_stddev_pop_fields {
  atom_id: Float
}

"""
order by stddev_pop() on columns of table "account"
"""
input accounts_stddev_pop_order_by {
  atom_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type accounts_stddev_samp_fields {
  atom_id: Float
}

"""
order by stddev_samp() on columns of table "account"
"""
input accounts_stddev_samp_order_by {
  atom_id: order_by
}

"""
Streaming cursor of the table "accounts"
"""
input accounts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: accounts_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input accounts_stream_cursor_value_input {
  atom_id: numeric
  id: String
  image: String
  label: String
  type: account_type
}

"""
aggregate sum on columns
"""
type accounts_sum_fields {
  atom_id: numeric
}

"""
order by sum() on columns of table "account"
"""
input accounts_sum_order_by {
  atom_id: order_by
}

"""
aggregate var_pop on columns
"""
type accounts_var_pop_fields {
  atom_id: Float
}

"""
order by var_pop() on columns of table "account"
"""
input accounts_var_pop_order_by {
  atom_id: order_by
}

"""
aggregate var_samp on columns
"""
type accounts_var_samp_fields {
  atom_id: Float
}

"""
order by var_samp() on columns of table "account"
"""
input accounts_var_samp_order_by {
  atom_id: order_by
}

"""
aggregate variance on columns
"""
type accounts_variance_fields {
  atom_id: Float
}

"""
order by variance() on columns of table "account"
"""
input accounts_variance_order_by {
  atom_id: order_by
}

scalar atom_type

"""
Boolean expression to compare columns of type "atom_type". All fields are combined with logical 'AND'.
"""
input atom_type_comparison_exp {
  _eq: atom_type
  _gt: atom_type
  _gte: atom_type
  _in: [atom_type!]
  _is_null: Boolean
  _lt: atom_type
  _lte: atom_type
  _neq: atom_type
  _nin: [atom_type!]
}

"""
columns and relationships of "atom_value"
"""
type atom_values {
  """
  An object relationship
  """
  account: accounts
  account_id: String
  """
  An object relationship
  """
  atom: atoms!
  """
  An object relationship
  """
  book: books
  book_id: numeric
  """
  An object relationship
  """
  byte_object: byte_object
  byte_object_id: numeric
  """
  An object relationship
  """
  caip10: caip10
  id: numeric!
  """
  An object relationship
  """
  json_object: json_objects
  json_object_id: numeric
  """
  An object relationship
  """
  organization: organizations
  organization_id: numeric
  """
  An object relationship
  """
  person: persons
  person_id: numeric
  """
  An object relationship
  """
  text_object: text_objects
  text_object_id: numeric
  """
  An object relationship
  """
  thing: things
  thing_id: numeric
}

"""
aggregated selection of "atom_value"
"""
type atom_values_aggregate {
  aggregate: atom_values_aggregate_fields
  nodes: [atom_values!]!
}

"""
aggregate fields of "atom_value"
"""
type atom_values_aggregate_fields {
  avg: atom_values_avg_fields
  count(columns: [atom_values_select_column!], distinct: Boolean): Int!
  max: atom_values_max_fields
  min: atom_values_min_fields
  stddev: atom_values_stddev_fields
  stddev_pop: atom_values_stddev_pop_fields
  stddev_samp: atom_values_stddev_samp_fields
  sum: atom_values_sum_fields
  var_pop: atom_values_var_pop_fields
  var_samp: atom_values_var_samp_fields
  variance: atom_values_variance_fields
}

"""
aggregate avg on columns
"""
type atom_values_avg_fields {
  book_id: Float
  byte_object_id: Float
  id: Float
  json_object_id: Float
  organization_id: Float
  person_id: Float
  text_object_id: Float
  thing_id: Float
}

"""
Boolean expression to filter rows from the table "atom_value". All fields are combined with a logical 'AND'.
"""
input atom_values_bool_exp {
  _and: [atom_values_bool_exp!]
  _not: atom_values_bool_exp
  _or: [atom_values_bool_exp!]
  account: accounts_bool_exp
  account_id: String_comparison_exp
  atom: atoms_bool_exp
  book: books_bool_exp
  book_id: numeric_comparison_exp
  byte_object: byte_object_bool_exp
  byte_object_id: numeric_comparison_exp
  caip10: caip10_bool_exp
  id: numeric_comparison_exp
  json_object: json_objects_bool_exp
  json_object_id: numeric_comparison_exp
  organization: organizations_bool_exp
  organization_id: numeric_comparison_exp
  person: persons_bool_exp
  person_id: numeric_comparison_exp
  text_object: text_objects_bool_exp
  text_object_id: numeric_comparison_exp
  thing: things_bool_exp
  thing_id: numeric_comparison_exp
}

"""
aggregate max on columns
"""
type atom_values_max_fields {
  account_id: String
  book_id: numeric
  byte_object_id: numeric
  id: numeric
  json_object_id: numeric
  organization_id: numeric
  person_id: numeric
  text_object_id: numeric
  thing_id: numeric
}

"""
aggregate min on columns
"""
type atom_values_min_fields {
  account_id: String
  book_id: numeric
  byte_object_id: numeric
  id: numeric
  json_object_id: numeric
  organization_id: numeric
  person_id: numeric
  text_object_id: numeric
  thing_id: numeric
}

"""
Ordering options when selecting data from "atom_value".
"""
input atom_values_order_by {
  account: accounts_order_by
  account_id: order_by
  atom: atoms_order_by
  book: books_order_by
  book_id: order_by
  byte_object: byte_object_order_by
  byte_object_id: order_by
  caip10: caip10_order_by
  id: order_by
  json_object: json_objects_order_by
  json_object_id: order_by
  organization: organizations_order_by
  organization_id: order_by
  person: persons_order_by
  person_id: order_by
  text_object: text_objects_order_by
  text_object_id: order_by
  thing: things_order_by
  thing_id: order_by
}

"""
select columns of table "atom_value"
"""
enum atom_values_select_column {
  """
  column name
  """
  account_id
  """
  column name
  """
  book_id
  """
  column name
  """
  byte_object_id
  """
  column name
  """
  id
  """
  column name
  """
  json_object_id
  """
  column name
  """
  organization_id
  """
  column name
  """
  person_id
  """
  column name
  """
  text_object_id
  """
  column name
  """
  thing_id
}

"""
aggregate stddev on columns
"""
type atom_values_stddev_fields {
  book_id: Float
  byte_object_id: Float
  id: Float
  json_object_id: Float
  organization_id: Float
  person_id: Float
  text_object_id: Float
  thing_id: Float
}

"""
aggregate stddev_pop on columns
"""
type atom_values_stddev_pop_fields {
  book_id: Float
  byte_object_id: Float
  id: Float
  json_object_id: Float
  organization_id: Float
  person_id: Float
  text_object_id: Float
  thing_id: Float
}

"""
aggregate stddev_samp on columns
"""
type atom_values_stddev_samp_fields {
  book_id: Float
  byte_object_id: Float
  id: Float
  json_object_id: Float
  organization_id: Float
  person_id: Float
  text_object_id: Float
  thing_id: Float
}

"""
Streaming cursor of the table "atom_values"
"""
input atom_values_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: atom_values_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input atom_values_stream_cursor_value_input {
  account_id: String
  book_id: numeric
  byte_object_id: numeric
  id: numeric
  json_object_id: numeric
  organization_id: numeric
  person_id: numeric
  text_object_id: numeric
  thing_id: numeric
}

"""
aggregate sum on columns
"""
type atom_values_sum_fields {
  book_id: numeric
  byte_object_id: numeric
  id: numeric
  json_object_id: numeric
  organization_id: numeric
  person_id: numeric
  text_object_id: numeric
  thing_id: numeric
}

"""
aggregate var_pop on columns
"""
type atom_values_var_pop_fields {
  book_id: Float
  byte_object_id: Float
  id: Float
  json_object_id: Float
  organization_id: Float
  person_id: Float
  text_object_id: Float
  thing_id: Float
}

"""
aggregate var_samp on columns
"""
type atom_values_var_samp_fields {
  book_id: Float
  byte_object_id: Float
  id: Float
  json_object_id: Float
  organization_id: Float
  person_id: Float
  text_object_id: Float
  thing_id: Float
}

"""
aggregate variance on columns
"""
type atom_values_variance_fields {
  book_id: Float
  byte_object_id: Float
  id: Float
  json_object_id: Float
  organization_id: Float
  person_id: Float
  text_object_id: Float
  thing_id: Float
}

"""
columns and relationships of "atom"
"""
type atoms {
  """
  An array relationship
  """
  accounts(
    """
    distinct select on columns
    """
    distinct_on: [accounts_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [accounts_order_by!]
    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): [accounts!]!
  """
  An aggregate relationship
  """
  accounts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [accounts_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [accounts_order_by!]
    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): accounts_aggregate!
  """
  An array relationship
  """
  as_object_predicate_objects(
    """
    distinct select on columns
    """
    distinct_on: [predicate_objects_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [predicate_objects_order_by!]
    """
    filter the rows returned
    """
    where: predicate_objects_bool_exp
  ): [predicate_objects!]!
  """
  An aggregate relationship
  """
  as_object_predicate_objects_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [predicate_objects_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [predicate_objects_order_by!]
    """
    filter the rows returned
    """
    where: predicate_objects_bool_exp
  ): predicate_objects_aggregate!
  """
  An array relationship
  """
  as_object_triples(
    """
    distinct select on columns
    """
    distinct_on: [triples_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [triples_order_by!]
    """
    filter the rows returned
    """
    where: triples_bool_exp
  ): [triples!]!
  """
  An aggregate relationship
  """
  as_object_triples_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [triples_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [triples_order_by!]
    """
    filter the rows returned
    """
    where: triples_bool_exp
  ): triples_aggregate!
  """
  An array relationship
  """
  as_predicate_predicate_objects(
    """
    distinct select on columns
    """
    distinct_on: [predicate_objects_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [predicate_objects_order_by!]
    """
    filter the rows returned
    """
    where: predicate_objects_bool_exp
  ): [predicate_objects!]!
  """
  An aggregate relationship
  """
  as_predicate_predicate_objects_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [predicate_objects_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [predicate_objects_order_by!]
    """
    filter the rows returned
    """
    where: predicate_objects_bool_exp
  ): predicate_objects_aggregate!
  """
  An array relationship
  """
  as_predicate_triples(
    """
    distinct select on columns
    """
    distinct_on: [triples_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [triples_order_by!]
    """
    filter the rows returned
    """
    where: triples_bool_exp
  ): [triples!]!
  """
  An aggregate relationship
  """
  as_predicate_triples_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [triples_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [triples_order_by!]
    """
    filter the rows returned
    """
    where: triples_bool_exp
  ): triples_aggregate!
  """
  An array relationship
  """
  as_subject_triples(
    """
    distinct select on columns
    """
    distinct_on: [triples_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [triples_order_by!]
    """
    filter the rows returned
    """
    where: triples_bool_exp
  ): [triples!]!
  """
  An aggregate relationship
  """
  as_subject_triples_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [triples_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [triples_order_by!]
    """
    filter the rows returned
    """
    where: triples_bool_exp
  ): triples_aggregate!
  block_number: numeric!
  cached_image: cached_images_cached_image
  """
  An object relationship
  """
  controller: accounts
  created_at: timestamptz!
  """
  An object relationship
  """
  creator: accounts!
  creator_id: String!
  data: String
  emoji: String
  image: String
  label: String
  """
  An array relationship
  """
  positions(
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): [positions!]!
  """
  An aggregate relationship
  """
  positions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): positions_aggregate!
  """
  An array relationship
  """
  signals(
    """
    distinct select on columns
    """
    distinct_on: [signals_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signals_order_by!]
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): [signals!]!
  """
  An aggregate relationship
  """
  signals_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [signals_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signals_order_by!]
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): signals_aggregate!
  """
  An object relationship
  """
  term: terms!
  term_id: numeric!
  transaction_hash: String!
  type: atom_type!
  updated_at: timestamptz!
  """
  An object relationship
  """
  value: atom_values
  value_id: numeric
  wallet_id: String!
}

"""
aggregated selection of "atom"
"""
type atoms_aggregate {
  aggregate: atoms_aggregate_fields
  nodes: [atoms!]!
}

input atoms_aggregate_bool_exp {
  count: atoms_aggregate_bool_exp_count
}

input atoms_aggregate_bool_exp_count {
  arguments: [atoms_select_column!]
  distinct: Boolean
  filter: atoms_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "atom"
"""
type atoms_aggregate_fields {
  avg: atoms_avg_fields
  count(columns: [atoms_select_column!], distinct: Boolean): Int!
  max: atoms_max_fields
  min: atoms_min_fields
  stddev: atoms_stddev_fields
  stddev_pop: atoms_stddev_pop_fields
  stddev_samp: atoms_stddev_samp_fields
  sum: atoms_sum_fields
  var_pop: atoms_var_pop_fields
  var_samp: atoms_var_samp_fields
  variance: atoms_variance_fields
}

"""
order by aggregate values of table "atom"
"""
input atoms_aggregate_order_by {
  avg: atoms_avg_order_by
  count: order_by
  max: atoms_max_order_by
  min: atoms_min_order_by
  stddev: atoms_stddev_order_by
  stddev_pop: atoms_stddev_pop_order_by
  stddev_samp: atoms_stddev_samp_order_by
  sum: atoms_sum_order_by
  var_pop: atoms_var_pop_order_by
  var_samp: atoms_var_samp_order_by
  variance: atoms_variance_order_by
}

"""
aggregate avg on columns
"""
type atoms_avg_fields {
  block_number: Float
  term_id: Float
  value_id: Float
}

"""
order by avg() on columns of table "atom"
"""
input atoms_avg_order_by {
  block_number: order_by
  term_id: order_by
  value_id: order_by
}

"""
Boolean expression to filter rows from the table "atom". All fields are combined with a logical 'AND'.
"""
input atoms_bool_exp {
  _and: [atoms_bool_exp!]
  _not: atoms_bool_exp
  _or: [atoms_bool_exp!]
  accounts: accounts_bool_exp
  accounts_aggregate: accounts_aggregate_bool_exp
  as_object_predicate_objects: predicate_objects_bool_exp
  as_object_predicate_objects_aggregate: predicate_objects_aggregate_bool_exp
  as_object_triples: triples_bool_exp
  as_object_triples_aggregate: triples_aggregate_bool_exp
  as_predicate_predicate_objects: predicate_objects_bool_exp
  as_predicate_predicate_objects_aggregate: predicate_objects_aggregate_bool_exp
  as_predicate_triples: triples_bool_exp
  as_predicate_triples_aggregate: triples_aggregate_bool_exp
  as_subject_triples: triples_bool_exp
  as_subject_triples_aggregate: triples_aggregate_bool_exp
  block_number: numeric_comparison_exp
  controller: accounts_bool_exp
  created_at: timestamptz_comparison_exp
  creator: accounts_bool_exp
  creator_id: String_comparison_exp
  data: String_comparison_exp
  emoji: String_comparison_exp
  image: String_comparison_exp
  label: String_comparison_exp
  positions: positions_bool_exp
  positions_aggregate: positions_aggregate_bool_exp
  signals: signals_bool_exp
  signals_aggregate: signals_aggregate_bool_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
  transaction_hash: String_comparison_exp
  type: atom_type_comparison_exp
  updated_at: timestamptz_comparison_exp
  value: atom_values_bool_exp
  value_id: numeric_comparison_exp
  wallet_id: String_comparison_exp
}

"""
aggregate max on columns
"""
type atoms_max_fields {
  block_number: numeric
  created_at: timestamptz
  creator_id: String
  data: String
  emoji: String
  image: String
  label: String
  term_id: numeric
  transaction_hash: String
  type: atom_type
  updated_at: timestamptz
  value_id: numeric
  wallet_id: String
}

"""
order by max() on columns of table "atom"
"""
input atoms_max_order_by {
  block_number: order_by
  created_at: order_by
  creator_id: order_by
  data: order_by
  emoji: order_by
  image: order_by
  label: order_by
  term_id: order_by
  transaction_hash: order_by
  type: order_by
  updated_at: order_by
  value_id: order_by
  wallet_id: order_by
}

"""
aggregate min on columns
"""
type atoms_min_fields {
  block_number: numeric
  created_at: timestamptz
  creator_id: String
  data: String
  emoji: String
  image: String
  label: String
  term_id: numeric
  transaction_hash: String
  type: atom_type
  updated_at: timestamptz
  value_id: numeric
  wallet_id: String
}

"""
order by min() on columns of table "atom"
"""
input atoms_min_order_by {
  block_number: order_by
  created_at: order_by
  creator_id: order_by
  data: order_by
  emoji: order_by
  image: order_by
  label: order_by
  term_id: order_by
  transaction_hash: order_by
  type: order_by
  updated_at: order_by
  value_id: order_by
  wallet_id: order_by
}

"""
Ordering options when selecting data from "atom".
"""
input atoms_order_by {
  accounts_aggregate: accounts_aggregate_order_by
  as_object_predicate_objects_aggregate: predicate_objects_aggregate_order_by
  as_object_triples_aggregate: triples_aggregate_order_by
  as_predicate_predicate_objects_aggregate: predicate_objects_aggregate_order_by
  as_predicate_triples_aggregate: triples_aggregate_order_by
  as_subject_triples_aggregate: triples_aggregate_order_by
  block_number: order_by
  controller: accounts_order_by
  created_at: order_by
  creator: accounts_order_by
  creator_id: order_by
  data: order_by
  emoji: order_by
  image: order_by
  label: order_by
  positions_aggregate: positions_aggregate_order_by
  signals_aggregate: signals_aggregate_order_by
  term: terms_order_by
  term_id: order_by
  transaction_hash: order_by
  type: order_by
  updated_at: order_by
  value: atom_values_order_by
  value_id: order_by
  wallet_id: order_by
}

"""
select columns of table "atom"
"""
enum atoms_select_column {
  """
  column name
  """
  block_number
  """
  column name
  """
  created_at
  """
  column name
  """
  creator_id
  """
  column name
  """
  data
  """
  column name
  """
  emoji
  """
  column name
  """
  image
  """
  column name
  """
  label
  """
  column name
  """
  term_id
  """
  column name
  """
  transaction_hash
  """
  column name
  """
  type
  """
  column name
  """
  updated_at
  """
  column name
  """
  value_id
  """
  column name
  """
  wallet_id
}

"""
aggregate stddev on columns
"""
type atoms_stddev_fields {
  block_number: Float
  term_id: Float
  value_id: Float
}

"""
order by stddev() on columns of table "atom"
"""
input atoms_stddev_order_by {
  block_number: order_by
  term_id: order_by
  value_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type atoms_stddev_pop_fields {
  block_number: Float
  term_id: Float
  value_id: Float
}

"""
order by stddev_pop() on columns of table "atom"
"""
input atoms_stddev_pop_order_by {
  block_number: order_by
  term_id: order_by
  value_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type atoms_stddev_samp_fields {
  block_number: Float
  term_id: Float
  value_id: Float
}

"""
order by stddev_samp() on columns of table "atom"
"""
input atoms_stddev_samp_order_by {
  block_number: order_by
  term_id: order_by
  value_id: order_by
}

"""
Streaming cursor of the table "atoms"
"""
input atoms_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: atoms_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input atoms_stream_cursor_value_input {
  block_number: numeric
  created_at: timestamptz
  creator_id: String
  data: String
  emoji: String
  image: String
  label: String
  term_id: numeric
  transaction_hash: String
  type: atom_type
  updated_at: timestamptz
  value_id: numeric
  wallet_id: String
}

"""
aggregate sum on columns
"""
type atoms_sum_fields {
  block_number: numeric
  term_id: numeric
  value_id: numeric
}

"""
order by sum() on columns of table "atom"
"""
input atoms_sum_order_by {
  block_number: order_by
  term_id: order_by
  value_id: order_by
}

"""
aggregate var_pop on columns
"""
type atoms_var_pop_fields {
  block_number: Float
  term_id: Float
  value_id: Float
}

"""
order by var_pop() on columns of table "atom"
"""
input atoms_var_pop_order_by {
  block_number: order_by
  term_id: order_by
  value_id: order_by
}

"""
aggregate var_samp on columns
"""
type atoms_var_samp_fields {
  block_number: Float
  term_id: Float
  value_id: Float
}

"""
order by var_samp() on columns of table "atom"
"""
input atoms_var_samp_order_by {
  block_number: order_by
  term_id: order_by
  value_id: order_by
}

"""
aggregate variance on columns
"""
type atoms_variance_fields {
  block_number: Float
  term_id: Float
  value_id: Float
}

"""
order by variance() on columns of table "atom"
"""
input atoms_variance_order_by {
  block_number: order_by
  term_id: order_by
  value_id: order_by
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "book"
"""
type books {
  """
  An object relationship
  """
  atom: atoms
  description: String
  genre: String
  id: numeric!
  name: String
  url: String
}

"""
aggregated selection of "book"
"""
type books_aggregate {
  aggregate: books_aggregate_fields
  nodes: [books!]!
}

"""
aggregate fields of "book"
"""
type books_aggregate_fields {
  avg: books_avg_fields
  count(columns: [books_select_column!], distinct: Boolean): Int!
  max: books_max_fields
  min: books_min_fields
  stddev: books_stddev_fields
  stddev_pop: books_stddev_pop_fields
  stddev_samp: books_stddev_samp_fields
  sum: books_sum_fields
  var_pop: books_var_pop_fields
  var_samp: books_var_samp_fields
  variance: books_variance_fields
}

"""
aggregate avg on columns
"""
type books_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "book". All fields are combined with a logical 'AND'.
"""
input books_bool_exp {
  _and: [books_bool_exp!]
  _not: books_bool_exp
  _or: [books_bool_exp!]
  atom: atoms_bool_exp
  description: String_comparison_exp
  genre: String_comparison_exp
  id: numeric_comparison_exp
  name: String_comparison_exp
  url: String_comparison_exp
}

"""
aggregate max on columns
"""
type books_max_fields {
  description: String
  genre: String
  id: numeric
  name: String
  url: String
}

"""
aggregate min on columns
"""
type books_min_fields {
  description: String
  genre: String
  id: numeric
  name: String
  url: String
}

"""
Ordering options when selecting data from "book".
"""
input books_order_by {
  atom: atoms_order_by
  description: order_by
  genre: order_by
  id: order_by
  name: order_by
  url: order_by
}

"""
select columns of table "book"
"""
enum books_select_column {
  """
  column name
  """
  description
  """
  column name
  """
  genre
  """
  column name
  """
  id
  """
  column name
  """
  name
  """
  column name
  """
  url
}

"""
aggregate stddev on columns
"""
type books_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type books_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type books_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "books"
"""
input books_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: books_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input books_stream_cursor_value_input {
  description: String
  genre: String
  id: numeric
  name: String
  url: String
}

"""
aggregate sum on columns
"""
type books_sum_fields {
  id: numeric
}

"""
aggregate var_pop on columns
"""
type books_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type books_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type books_variance_fields {
  id: Float
}

"""
columns and relationships of "byte_object"
"""
type byte_object {
  """
  An object relationship
  """
  atom: atoms
  data: bytea!
  id: numeric!
}

"""
aggregated selection of "byte_object"
"""
type byte_object_aggregate {
  aggregate: byte_object_aggregate_fields
  nodes: [byte_object!]!
}

"""
aggregate fields of "byte_object"
"""
type byte_object_aggregate_fields {
  avg: byte_object_avg_fields
  count(columns: [byte_object_select_column!], distinct: Boolean): Int!
  max: byte_object_max_fields
  min: byte_object_min_fields
  stddev: byte_object_stddev_fields
  stddev_pop: byte_object_stddev_pop_fields
  stddev_samp: byte_object_stddev_samp_fields
  sum: byte_object_sum_fields
  var_pop: byte_object_var_pop_fields
  var_samp: byte_object_var_samp_fields
  variance: byte_object_variance_fields
}

"""
aggregate avg on columns
"""
type byte_object_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "byte_object". All fields are combined with a logical 'AND'.
"""
input byte_object_bool_exp {
  _and: [byte_object_bool_exp!]
  _not: byte_object_bool_exp
  _or: [byte_object_bool_exp!]
  atom: atoms_bool_exp
  data: bytea_comparison_exp
  id: numeric_comparison_exp
}

"""
aggregate max on columns
"""
type byte_object_max_fields {
  id: numeric
}

"""
aggregate min on columns
"""
type byte_object_min_fields {
  id: numeric
}

"""
Ordering options when selecting data from "byte_object".
"""
input byte_object_order_by {
  atom: atoms_order_by
  data: order_by
  id: order_by
}

"""
select columns of table "byte_object"
"""
enum byte_object_select_column {
  """
  column name
  """
  data
  """
  column name
  """
  id
}

"""
aggregate stddev on columns
"""
type byte_object_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type byte_object_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type byte_object_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "byte_object"
"""
input byte_object_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: byte_object_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input byte_object_stream_cursor_value_input {
  data: bytea
  id: numeric
}

"""
aggregate sum on columns
"""
type byte_object_sum_fields {
  id: numeric
}

"""
aggregate var_pop on columns
"""
type byte_object_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type byte_object_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type byte_object_variance_fields {
  id: Float
}

scalar bytea

"""
Boolean expression to compare columns of type "bytea". All fields are combined with logical 'AND'.
"""
input bytea_comparison_exp {
  _eq: bytea
  _gt: bytea
  _gte: bytea
  _in: [bytea!]
  _is_null: Boolean
  _lt: bytea
  _lte: bytea
  _neq: bytea
  _nin: [bytea!]
}

"""
columns and relationships of "cached_images.cached_image"
"""
type cached_images_cached_image {
  created_at: timestamptz!
  model: String
  original_url: String!
  safe: Boolean!
  score(
    """
    JSON select path
    """
    path: String
  ): jsonb
  url: String!
}

"""
Boolean expression to filter rows from the table "cached_images.cached_image". All fields are combined with a logical 'AND'.
"""
input cached_images_cached_image_bool_exp {
  _and: [cached_images_cached_image_bool_exp!]
  _not: cached_images_cached_image_bool_exp
  _or: [cached_images_cached_image_bool_exp!]
  created_at: timestamptz_comparison_exp
  model: String_comparison_exp
  original_url: String_comparison_exp
  safe: Boolean_comparison_exp
  score: jsonb_comparison_exp
  url: String_comparison_exp
}

"""
Ordering options when selecting data from "cached_images.cached_image".
"""
input cached_images_cached_image_order_by {
  created_at: order_by
  model: order_by
  original_url: order_by
  safe: order_by
  score: order_by
  url: order_by
}

"""
select columns of table "cached_images.cached_image"
"""
enum cached_images_cached_image_select_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  model
  """
  column name
  """
  original_url
  """
  column name
  """
  safe
  """
  column name
  """
  score
  """
  column name
  """
  url
}

"""
Streaming cursor of the table "cached_images_cached_image"
"""
input cached_images_cached_image_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: cached_images_cached_image_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input cached_images_cached_image_stream_cursor_value_input {
  created_at: timestamptz
  model: String
  original_url: String
  safe: Boolean
  score: jsonb
  url: String
}

"""
columns and relationships of "caip10"
"""
type caip10 {
  account_address: String!
  """
  An object relationship
  """
  atom: atoms
  chain_id: Int!
  id: numeric!
  namespace: String!
}

"""
aggregated selection of "caip10"
"""
type caip10_aggregate {
  aggregate: caip10_aggregate_fields
  nodes: [caip10!]!
}

"""
aggregate fields of "caip10"
"""
type caip10_aggregate_fields {
  avg: caip10_avg_fields
  count(columns: [caip10_select_column!], distinct: Boolean): Int!
  max: caip10_max_fields
  min: caip10_min_fields
  stddev: caip10_stddev_fields
  stddev_pop: caip10_stddev_pop_fields
  stddev_samp: caip10_stddev_samp_fields
  sum: caip10_sum_fields
  var_pop: caip10_var_pop_fields
  var_samp: caip10_var_samp_fields
  variance: caip10_variance_fields
}

"""
aggregate avg on columns
"""
type caip10_avg_fields {
  chain_id: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "caip10". All fields are combined with a logical 'AND'.
"""
input caip10_bool_exp {
  _and: [caip10_bool_exp!]
  _not: caip10_bool_exp
  _or: [caip10_bool_exp!]
  account_address: String_comparison_exp
  atom: atoms_bool_exp
  chain_id: Int_comparison_exp
  id: numeric_comparison_exp
  namespace: String_comparison_exp
}

"""
aggregate max on columns
"""
type caip10_max_fields {
  account_address: String
  chain_id: Int
  id: numeric
  namespace: String
}

"""
aggregate min on columns
"""
type caip10_min_fields {
  account_address: String
  chain_id: Int
  id: numeric
  namespace: String
}

"""
Ordering options when selecting data from "caip10".
"""
input caip10_order_by {
  account_address: order_by
  atom: atoms_order_by
  chain_id: order_by
  id: order_by
  namespace: order_by
}

"""
select columns of table "caip10"
"""
enum caip10_select_column {
  """
  column name
  """
  account_address
  """
  column name
  """
  chain_id
  """
  column name
  """
  id
  """
  column name
  """
  namespace
}

"""
aggregate stddev on columns
"""
type caip10_stddev_fields {
  chain_id: Float
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type caip10_stddev_pop_fields {
  chain_id: Float
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type caip10_stddev_samp_fields {
  chain_id: Float
  id: Float
}

"""
Streaming cursor of the table "caip10"
"""
input caip10_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: caip10_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input caip10_stream_cursor_value_input {
  account_address: String
  chain_id: Int
  id: numeric
  namespace: String
}

"""
aggregate sum on columns
"""
type caip10_sum_fields {
  chain_id: Int
  id: numeric
}

"""
aggregate var_pop on columns
"""
type caip10_var_pop_fields {
  chain_id: Float
  id: Float
}

"""
aggregate var_samp on columns
"""
type caip10_var_samp_fields {
  chain_id: Float
  id: Float
}

"""
aggregate variance on columns
"""
type caip10_variance_fields {
  chain_id: Float
  id: Float
}

"""
columns and relationships of "chainlink_price"
"""
type chainlink_prices {
  id: numeric!
  usd: float8
}

"""
Boolean expression to filter rows from the table "chainlink_price". All fields are combined with a logical 'AND'.
"""
input chainlink_prices_bool_exp {
  _and: [chainlink_prices_bool_exp!]
  _not: chainlink_prices_bool_exp
  _or: [chainlink_prices_bool_exp!]
  id: numeric_comparison_exp
  usd: float8_comparison_exp
}

"""
Ordering options when selecting data from "chainlink_price".
"""
input chainlink_prices_order_by {
  id: order_by
  usd: order_by
}

"""
select columns of table "chainlink_price"
"""
enum chainlink_prices_select_column {
  """
  column name
  """
  id
  """
  column name
  """
  usd
}

"""
Streaming cursor of the table "chainlink_prices"
"""
input chainlink_prices_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: chainlink_prices_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input chainlink_prices_stream_cursor_value_input {
  id: numeric
  usd: float8
}

"""
ordering argument of a cursor
"""
enum cursor_ordering {
  """
  ascending ordering of the cursor
  """
  ASC
  """
  descending ordering of the cursor
  """
  DESC
}

"""
columns and relationships of "deposit"
"""
type deposits {
  block_number: numeric!
  created_at: timestamptz!
  curve_id: numeric!
  entry_fee: numeric!
  id: String!
  is_atom_wallet: Boolean!
  is_triple: Boolean!
  """
  An object relationship
  """
  receiver: accounts!
  receiver_id: String!
  receiver_total_shares_in_vault: numeric!
  """
  An object relationship
  """
  sender: accounts
  sender_assets_after_total_fees: numeric!
  sender_id: String!
  shares_for_receiver: numeric!
  """
  An object relationship
  """
  term: terms!
  term_id: numeric!
  transaction_hash: String!
  """
  An object relationship
  """
  vault: vaults
}

"""
aggregated selection of "deposit"
"""
type deposits_aggregate {
  aggregate: deposits_aggregate_fields
  nodes: [deposits!]!
}

input deposits_aggregate_bool_exp {
  bool_and: deposits_aggregate_bool_exp_bool_and
  bool_or: deposits_aggregate_bool_exp_bool_or
  count: deposits_aggregate_bool_exp_count
}

input deposits_aggregate_bool_exp_bool_and {
  arguments: deposits_select_column_deposits_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: deposits_bool_exp
  predicate: Boolean_comparison_exp!
}

input deposits_aggregate_bool_exp_bool_or {
  arguments: deposits_select_column_deposits_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: deposits_bool_exp
  predicate: Boolean_comparison_exp!
}

input deposits_aggregate_bool_exp_count {
  arguments: [deposits_select_column!]
  distinct: Boolean
  filter: deposits_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "deposit"
"""
type deposits_aggregate_fields {
  avg: deposits_avg_fields
  count(columns: [deposits_select_column!], distinct: Boolean): Int!
  max: deposits_max_fields
  min: deposits_min_fields
  stddev: deposits_stddev_fields
  stddev_pop: deposits_stddev_pop_fields
  stddev_samp: deposits_stddev_samp_fields
  sum: deposits_sum_fields
  var_pop: deposits_var_pop_fields
  var_samp: deposits_var_samp_fields
  variance: deposits_variance_fields
}

"""
order by aggregate values of table "deposit"
"""
input deposits_aggregate_order_by {
  avg: deposits_avg_order_by
  count: order_by
  max: deposits_max_order_by
  min: deposits_min_order_by
  stddev: deposits_stddev_order_by
  stddev_pop: deposits_stddev_pop_order_by
  stddev_samp: deposits_stddev_samp_order_by
  sum: deposits_sum_order_by
  var_pop: deposits_var_pop_order_by
  var_samp: deposits_var_samp_order_by
  variance: deposits_variance_order_by
}

"""
aggregate avg on columns
"""
type deposits_avg_fields {
  block_number: Float
  curve_id: Float
  entry_fee: Float
  receiver_total_shares_in_vault: Float
  sender_assets_after_total_fees: Float
  shares_for_receiver: Float
  term_id: Float
}

"""
order by avg() on columns of table "deposit"
"""
input deposits_avg_order_by {
  block_number: order_by
  curve_id: order_by
  entry_fee: order_by
  receiver_total_shares_in_vault: order_by
  sender_assets_after_total_fees: order_by
  shares_for_receiver: order_by
  term_id: order_by
}

"""
Boolean expression to filter rows from the table "deposit". All fields are combined with a logical 'AND'.
"""
input deposits_bool_exp {
  _and: [deposits_bool_exp!]
  _not: deposits_bool_exp
  _or: [deposits_bool_exp!]
  block_number: numeric_comparison_exp
  created_at: timestamptz_comparison_exp
  curve_id: numeric_comparison_exp
  entry_fee: numeric_comparison_exp
  id: String_comparison_exp
  is_atom_wallet: Boolean_comparison_exp
  is_triple: Boolean_comparison_exp
  receiver: accounts_bool_exp
  receiver_id: String_comparison_exp
  receiver_total_shares_in_vault: numeric_comparison_exp
  sender: accounts_bool_exp
  sender_assets_after_total_fees: numeric_comparison_exp
  sender_id: String_comparison_exp
  shares_for_receiver: numeric_comparison_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
  transaction_hash: String_comparison_exp
  vault: vaults_bool_exp
}

"""
aggregate max on columns
"""
type deposits_max_fields {
  block_number: numeric
  created_at: timestamptz
  curve_id: numeric
  entry_fee: numeric
  id: String
  receiver_id: String
  receiver_total_shares_in_vault: numeric
  sender_assets_after_total_fees: numeric
  sender_id: String
  shares_for_receiver: numeric
  term_id: numeric
  transaction_hash: String
}

"""
order by max() on columns of table "deposit"
"""
input deposits_max_order_by {
  block_number: order_by
  created_at: order_by
  curve_id: order_by
  entry_fee: order_by
  id: order_by
  receiver_id: order_by
  receiver_total_shares_in_vault: order_by
  sender_assets_after_total_fees: order_by
  sender_id: order_by
  shares_for_receiver: order_by
  term_id: order_by
  transaction_hash: order_by
}

"""
aggregate min on columns
"""
type deposits_min_fields {
  block_number: numeric
  created_at: timestamptz
  curve_id: numeric
  entry_fee: numeric
  id: String
  receiver_id: String
  receiver_total_shares_in_vault: numeric
  sender_assets_after_total_fees: numeric
  sender_id: String
  shares_for_receiver: numeric
  term_id: numeric
  transaction_hash: String
}

"""
order by min() on columns of table "deposit"
"""
input deposits_min_order_by {
  block_number: order_by
  created_at: order_by
  curve_id: order_by
  entry_fee: order_by
  id: order_by
  receiver_id: order_by
  receiver_total_shares_in_vault: order_by
  sender_assets_after_total_fees: order_by
  sender_id: order_by
  shares_for_receiver: order_by
  term_id: order_by
  transaction_hash: order_by
}

"""
Ordering options when selecting data from "deposit".
"""
input deposits_order_by {
  block_number: order_by
  created_at: order_by
  curve_id: order_by
  entry_fee: order_by
  id: order_by
  is_atom_wallet: order_by
  is_triple: order_by
  receiver: accounts_order_by
  receiver_id: order_by
  receiver_total_shares_in_vault: order_by
  sender: accounts_order_by
  sender_assets_after_total_fees: order_by
  sender_id: order_by
  shares_for_receiver: order_by
  term: terms_order_by
  term_id: order_by
  transaction_hash: order_by
  vault: vaults_order_by
}

"""
select columns of table "deposit"
"""
enum deposits_select_column {
  """
  column name
  """
  block_number
  """
  column name
  """
  created_at
  """
  column name
  """
  curve_id
  """
  column name
  """
  entry_fee
  """
  column name
  """
  id
  """
  column name
  """
  is_atom_wallet
  """
  column name
  """
  is_triple
  """
  column name
  """
  receiver_id
  """
  column name
  """
  receiver_total_shares_in_vault
  """
  column name
  """
  sender_assets_after_total_fees
  """
  column name
  """
  sender_id
  """
  column name
  """
  shares_for_receiver
  """
  column name
  """
  term_id
  """
  column name
  """
  transaction_hash
}

"""
select "deposits_aggregate_bool_exp_bool_and_arguments_columns" columns of table "deposit"
"""
enum deposits_select_column_deposits_aggregate_bool_exp_bool_and_arguments_columns {
  """
  column name
  """
  is_atom_wallet
  """
  column name
  """
  is_triple
}

"""
select "deposits_aggregate_bool_exp_bool_or_arguments_columns" columns of table "deposit"
"""
enum deposits_select_column_deposits_aggregate_bool_exp_bool_or_arguments_columns {
  """
  column name
  """
  is_atom_wallet
  """
  column name
  """
  is_triple
}

"""
aggregate stddev on columns
"""
type deposits_stddev_fields {
  block_number: Float
  curve_id: Float
  entry_fee: Float
  receiver_total_shares_in_vault: Float
  sender_assets_after_total_fees: Float
  shares_for_receiver: Float
  term_id: Float
}

"""
order by stddev() on columns of table "deposit"
"""
input deposits_stddev_order_by {
  block_number: order_by
  curve_id: order_by
  entry_fee: order_by
  receiver_total_shares_in_vault: order_by
  sender_assets_after_total_fees: order_by
  shares_for_receiver: order_by
  term_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type deposits_stddev_pop_fields {
  block_number: Float
  curve_id: Float
  entry_fee: Float
  receiver_total_shares_in_vault: Float
  sender_assets_after_total_fees: Float
  shares_for_receiver: Float
  term_id: Float
}

"""
order by stddev_pop() on columns of table "deposit"
"""
input deposits_stddev_pop_order_by {
  block_number: order_by
  curve_id: order_by
  entry_fee: order_by
  receiver_total_shares_in_vault: order_by
  sender_assets_after_total_fees: order_by
  shares_for_receiver: order_by
  term_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type deposits_stddev_samp_fields {
  block_number: Float
  curve_id: Float
  entry_fee: Float
  receiver_total_shares_in_vault: Float
  sender_assets_after_total_fees: Float
  shares_for_receiver: Float
  term_id: Float
}

"""
order by stddev_samp() on columns of table "deposit"
"""
input deposits_stddev_samp_order_by {
  block_number: order_by
  curve_id: order_by
  entry_fee: order_by
  receiver_total_shares_in_vault: order_by
  sender_assets_after_total_fees: order_by
  shares_for_receiver: order_by
  term_id: order_by
}

"""
Streaming cursor of the table "deposits"
"""
input deposits_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: deposits_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input deposits_stream_cursor_value_input {
  block_number: numeric
  created_at: timestamptz
  curve_id: numeric
  entry_fee: numeric
  id: String
  is_atom_wallet: Boolean
  is_triple: Boolean
  receiver_id: String
  receiver_total_shares_in_vault: numeric
  sender_assets_after_total_fees: numeric
  sender_id: String
  shares_for_receiver: numeric
  term_id: numeric
  transaction_hash: String
}

"""
aggregate sum on columns
"""
type deposits_sum_fields {
  block_number: numeric
  curve_id: numeric
  entry_fee: numeric
  receiver_total_shares_in_vault: numeric
  sender_assets_after_total_fees: numeric
  shares_for_receiver: numeric
  term_id: numeric
}

"""
order by sum() on columns of table "deposit"
"""
input deposits_sum_order_by {
  block_number: order_by
  curve_id: order_by
  entry_fee: order_by
  receiver_total_shares_in_vault: order_by
  sender_assets_after_total_fees: order_by
  shares_for_receiver: order_by
  term_id: order_by
}

"""
aggregate var_pop on columns
"""
type deposits_var_pop_fields {
  block_number: Float
  curve_id: Float
  entry_fee: Float
  receiver_total_shares_in_vault: Float
  sender_assets_after_total_fees: Float
  shares_for_receiver: Float
  term_id: Float
}

"""
order by var_pop() on columns of table "deposit"
"""
input deposits_var_pop_order_by {
  block_number: order_by
  curve_id: order_by
  entry_fee: order_by
  receiver_total_shares_in_vault: order_by
  sender_assets_after_total_fees: order_by
  shares_for_receiver: order_by
  term_id: order_by
}

"""
aggregate var_samp on columns
"""
type deposits_var_samp_fields {
  block_number: Float
  curve_id: Float
  entry_fee: Float
  receiver_total_shares_in_vault: Float
  sender_assets_after_total_fees: Float
  shares_for_receiver: Float
  term_id: Float
}

"""
order by var_samp() on columns of table "deposit"
"""
input deposits_var_samp_order_by {
  block_number: order_by
  curve_id: order_by
  entry_fee: order_by
  receiver_total_shares_in_vault: order_by
  sender_assets_after_total_fees: order_by
  shares_for_receiver: order_by
  term_id: order_by
}

"""
aggregate variance on columns
"""
type deposits_variance_fields {
  block_number: Float
  curve_id: Float
  entry_fee: Float
  receiver_total_shares_in_vault: Float
  sender_assets_after_total_fees: Float
  shares_for_receiver: Float
  term_id: Float
}

"""
order by variance() on columns of table "deposit"
"""
input deposits_variance_order_by {
  block_number: order_by
  curve_id: order_by
  entry_fee: order_by
  receiver_total_shares_in_vault: order_by
  sender_assets_after_total_fees: order_by
  shares_for_receiver: order_by
  term_id: order_by
}

scalar event_type

"""
Boolean expression to compare columns of type "event_type". All fields are combined with logical 'AND'.
"""
input event_type_comparison_exp {
  _eq: event_type
  _gt: event_type
  _gte: event_type
  _in: [event_type!]
  _is_null: Boolean
  _lt: event_type
  _lte: event_type
  _neq: event_type
  _nin: [event_type!]
}

"""
columns and relationships of "event"
"""
type events {
  """
  An object relationship
  """
  atom: atoms
  atom_id: numeric
  block_number: numeric!
  created_at: timestamptz!
  """
  An object relationship
  """
  deposit: deposits
  deposit_id: String
  """
  An object relationship
  """
  fee_transfer: fee_transfers
  fee_transfer_id: String
  id: String!
  """
  An object relationship
  """
  redemption: redemptions
  redemption_id: String
  transaction_hash: String!
  """
  An object relationship
  """
  triple: triples
  triple_id: numeric
  type: event_type!
}

"""
aggregated selection of "event"
"""
type events_aggregate {
  aggregate: events_aggregate_fields
  nodes: [events!]!
}

"""
aggregate fields of "event"
"""
type events_aggregate_fields {
  avg: events_avg_fields
  count(columns: [events_select_column!], distinct: Boolean): Int!
  max: events_max_fields
  min: events_min_fields
  stddev: events_stddev_fields
  stddev_pop: events_stddev_pop_fields
  stddev_samp: events_stddev_samp_fields
  sum: events_sum_fields
  var_pop: events_var_pop_fields
  var_samp: events_var_samp_fields
  variance: events_variance_fields
}

"""
aggregate avg on columns
"""
type events_avg_fields {
  atom_id: Float
  block_number: Float
  triple_id: Float
}

"""
Boolean expression to filter rows from the table "event". All fields are combined with a logical 'AND'.
"""
input events_bool_exp {
  _and: [events_bool_exp!]
  _not: events_bool_exp
  _or: [events_bool_exp!]
  atom: atoms_bool_exp
  atom_id: numeric_comparison_exp
  block_number: numeric_comparison_exp
  created_at: timestamptz_comparison_exp
  deposit: deposits_bool_exp
  deposit_id: String_comparison_exp
  fee_transfer: fee_transfers_bool_exp
  fee_transfer_id: String_comparison_exp
  id: String_comparison_exp
  redemption: redemptions_bool_exp
  redemption_id: String_comparison_exp
  transaction_hash: String_comparison_exp
  triple: triples_bool_exp
  triple_id: numeric_comparison_exp
  type: event_type_comparison_exp
}

"""
aggregate max on columns
"""
type events_max_fields {
  atom_id: numeric
  block_number: numeric
  created_at: timestamptz
  deposit_id: String
  fee_transfer_id: String
  id: String
  redemption_id: String
  transaction_hash: String
  triple_id: numeric
  type: event_type
}

"""
aggregate min on columns
"""
type events_min_fields {
  atom_id: numeric
  block_number: numeric
  created_at: timestamptz
  deposit_id: String
  fee_transfer_id: String
  id: String
  redemption_id: String
  transaction_hash: String
  triple_id: numeric
  type: event_type
}

"""
Ordering options when selecting data from "event".
"""
input events_order_by {
  atom: atoms_order_by
  atom_id: order_by
  block_number: order_by
  created_at: order_by
  deposit: deposits_order_by
  deposit_id: order_by
  fee_transfer: fee_transfers_order_by
  fee_transfer_id: order_by
  id: order_by
  redemption: redemptions_order_by
  redemption_id: order_by
  transaction_hash: order_by
  triple: triples_order_by
  triple_id: order_by
  type: order_by
}

"""
select columns of table "event"
"""
enum events_select_column {
  """
  column name
  """
  atom_id
  """
  column name
  """
  block_number
  """
  column name
  """
  created_at
  """
  column name
  """
  deposit_id
  """
  column name
  """
  fee_transfer_id
  """
  column name
  """
  id
  """
  column name
  """
  redemption_id
  """
  column name
  """
  transaction_hash
  """
  column name
  """
  triple_id
  """
  column name
  """
  type
}

"""
aggregate stddev on columns
"""
type events_stddev_fields {
  atom_id: Float
  block_number: Float
  triple_id: Float
}

"""
aggregate stddev_pop on columns
"""
type events_stddev_pop_fields {
  atom_id: Float
  block_number: Float
  triple_id: Float
}

"""
aggregate stddev_samp on columns
"""
type events_stddev_samp_fields {
  atom_id: Float
  block_number: Float
  triple_id: Float
}

"""
Streaming cursor of the table "events"
"""
input events_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: events_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input events_stream_cursor_value_input {
  atom_id: numeric
  block_number: numeric
  created_at: timestamptz
  deposit_id: String
  fee_transfer_id: String
  id: String
  redemption_id: String
  transaction_hash: String
  triple_id: numeric
  type: event_type
}

"""
aggregate sum on columns
"""
type events_sum_fields {
  atom_id: numeric
  block_number: numeric
  triple_id: numeric
}

"""
aggregate var_pop on columns
"""
type events_var_pop_fields {
  atom_id: Float
  block_number: Float
  triple_id: Float
}

"""
aggregate var_samp on columns
"""
type events_var_samp_fields {
  atom_id: Float
  block_number: Float
  triple_id: Float
}

"""
aggregate variance on columns
"""
type events_variance_fields {
  atom_id: Float
  block_number: Float
  triple_id: Float
}

"""
columns and relationships of "fee_transfer"
"""
type fee_transfers {
  amount: numeric!
  block_number: numeric!
  created_at: timestamptz!
  id: String!
  """
  An object relationship
  """
  receiver: accounts!
  receiver_id: String!
  """
  An object relationship
  """
  sender: accounts
  sender_id: String!
  transaction_hash: String!
}

"""
aggregated selection of "fee_transfer"
"""
type fee_transfers_aggregate {
  aggregate: fee_transfers_aggregate_fields
  nodes: [fee_transfers!]!
}

input fee_transfers_aggregate_bool_exp {
  count: fee_transfers_aggregate_bool_exp_count
}

input fee_transfers_aggregate_bool_exp_count {
  arguments: [fee_transfers_select_column!]
  distinct: Boolean
  filter: fee_transfers_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "fee_transfer"
"""
type fee_transfers_aggregate_fields {
  avg: fee_transfers_avg_fields
  count(columns: [fee_transfers_select_column!], distinct: Boolean): Int!
  max: fee_transfers_max_fields
  min: fee_transfers_min_fields
  stddev: fee_transfers_stddev_fields
  stddev_pop: fee_transfers_stddev_pop_fields
  stddev_samp: fee_transfers_stddev_samp_fields
  sum: fee_transfers_sum_fields
  var_pop: fee_transfers_var_pop_fields
  var_samp: fee_transfers_var_samp_fields
  variance: fee_transfers_variance_fields
}

"""
order by aggregate values of table "fee_transfer"
"""
input fee_transfers_aggregate_order_by {
  avg: fee_transfers_avg_order_by
  count: order_by
  max: fee_transfers_max_order_by
  min: fee_transfers_min_order_by
  stddev: fee_transfers_stddev_order_by
  stddev_pop: fee_transfers_stddev_pop_order_by
  stddev_samp: fee_transfers_stddev_samp_order_by
  sum: fee_transfers_sum_order_by
  var_pop: fee_transfers_var_pop_order_by
  var_samp: fee_transfers_var_samp_order_by
  variance: fee_transfers_variance_order_by
}

"""
aggregate avg on columns
"""
type fee_transfers_avg_fields {
  amount: Float
  block_number: Float
}

"""
order by avg() on columns of table "fee_transfer"
"""
input fee_transfers_avg_order_by {
  amount: order_by
  block_number: order_by
}

"""
Boolean expression to filter rows from the table "fee_transfer". All fields are combined with a logical 'AND'.
"""
input fee_transfers_bool_exp {
  _and: [fee_transfers_bool_exp!]
  _not: fee_transfers_bool_exp
  _or: [fee_transfers_bool_exp!]
  amount: numeric_comparison_exp
  block_number: numeric_comparison_exp
  created_at: timestamptz_comparison_exp
  id: String_comparison_exp
  receiver: accounts_bool_exp
  receiver_id: String_comparison_exp
  sender: accounts_bool_exp
  sender_id: String_comparison_exp
  transaction_hash: String_comparison_exp
}

"""
aggregate max on columns
"""
type fee_transfers_max_fields {
  amount: numeric
  block_number: numeric
  created_at: timestamptz
  id: String
  receiver_id: String
  sender_id: String
  transaction_hash: String
}

"""
order by max() on columns of table "fee_transfer"
"""
input fee_transfers_max_order_by {
  amount: order_by
  block_number: order_by
  created_at: order_by
  id: order_by
  receiver_id: order_by
  sender_id: order_by
  transaction_hash: order_by
}

"""
aggregate min on columns
"""
type fee_transfers_min_fields {
  amount: numeric
  block_number: numeric
  created_at: timestamptz
  id: String
  receiver_id: String
  sender_id: String
  transaction_hash: String
}

"""
order by min() on columns of table "fee_transfer"
"""
input fee_transfers_min_order_by {
  amount: order_by
  block_number: order_by
  created_at: order_by
  id: order_by
  receiver_id: order_by
  sender_id: order_by
  transaction_hash: order_by
}

"""
Ordering options when selecting data from "fee_transfer".
"""
input fee_transfers_order_by {
  amount: order_by
  block_number: order_by
  created_at: order_by
  id: order_by
  receiver: accounts_order_by
  receiver_id: order_by
  sender: accounts_order_by
  sender_id: order_by
  transaction_hash: order_by
}

"""
select columns of table "fee_transfer"
"""
enum fee_transfers_select_column {
  """
  column name
  """
  amount
  """
  column name
  """
  block_number
  """
  column name
  """
  created_at
  """
  column name
  """
  id
  """
  column name
  """
  receiver_id
  """
  column name
  """
  sender_id
  """
  column name
  """
  transaction_hash
}

"""
aggregate stddev on columns
"""
type fee_transfers_stddev_fields {
  amount: Float
  block_number: Float
}

"""
order by stddev() on columns of table "fee_transfer"
"""
input fee_transfers_stddev_order_by {
  amount: order_by
  block_number: order_by
}

"""
aggregate stddev_pop on columns
"""
type fee_transfers_stddev_pop_fields {
  amount: Float
  block_number: Float
}

"""
order by stddev_pop() on columns of table "fee_transfer"
"""
input fee_transfers_stddev_pop_order_by {
  amount: order_by
  block_number: order_by
}

"""
aggregate stddev_samp on columns
"""
type fee_transfers_stddev_samp_fields {
  amount: Float
  block_number: Float
}

"""
order by stddev_samp() on columns of table "fee_transfer"
"""
input fee_transfers_stddev_samp_order_by {
  amount: order_by
  block_number: order_by
}

"""
Streaming cursor of the table "fee_transfers"
"""
input fee_transfers_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: fee_transfers_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input fee_transfers_stream_cursor_value_input {
  amount: numeric
  block_number: numeric
  created_at: timestamptz
  id: String
  receiver_id: String
  sender_id: String
  transaction_hash: String
}

"""
aggregate sum on columns
"""
type fee_transfers_sum_fields {
  amount: numeric
  block_number: numeric
}

"""
order by sum() on columns of table "fee_transfer"
"""
input fee_transfers_sum_order_by {
  amount: order_by
  block_number: order_by
}

"""
aggregate var_pop on columns
"""
type fee_transfers_var_pop_fields {
  amount: Float
  block_number: Float
}

"""
order by var_pop() on columns of table "fee_transfer"
"""
input fee_transfers_var_pop_order_by {
  amount: order_by
  block_number: order_by
}

"""
aggregate var_samp on columns
"""
type fee_transfers_var_samp_fields {
  amount: Float
  block_number: Float
}

"""
order by var_samp() on columns of table "fee_transfer"
"""
input fee_transfers_var_samp_order_by {
  amount: order_by
  block_number: order_by
}

"""
aggregate variance on columns
"""
type fee_transfers_variance_fields {
  amount: Float
  block_number: Float
}

"""
order by variance() on columns of table "fee_transfer"
"""
input fee_transfers_variance_order_by {
  amount: order_by
  block_number: order_by
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

input following_args {
  address: String
}

"""
columns and relationships of "json_object"
"""
type json_objects {
  """
  An object relationship
  """
  atom: atoms
  data(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  id: numeric!
}

"""
aggregated selection of "json_object"
"""
type json_objects_aggregate {
  aggregate: json_objects_aggregate_fields
  nodes: [json_objects!]!
}

"""
aggregate fields of "json_object"
"""
type json_objects_aggregate_fields {
  avg: json_objects_avg_fields
  count(columns: [json_objects_select_column!], distinct: Boolean): Int!
  max: json_objects_max_fields
  min: json_objects_min_fields
  stddev: json_objects_stddev_fields
  stddev_pop: json_objects_stddev_pop_fields
  stddev_samp: json_objects_stddev_samp_fields
  sum: json_objects_sum_fields
  var_pop: json_objects_var_pop_fields
  var_samp: json_objects_var_samp_fields
  variance: json_objects_variance_fields
}

"""
aggregate avg on columns
"""
type json_objects_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "json_object". All fields are combined with a logical 'AND'.
"""
input json_objects_bool_exp {
  _and: [json_objects_bool_exp!]
  _not: json_objects_bool_exp
  _or: [json_objects_bool_exp!]
  atom: atoms_bool_exp
  data: jsonb_comparison_exp
  id: numeric_comparison_exp
}

"""
aggregate max on columns
"""
type json_objects_max_fields {
  id: numeric
}

"""
aggregate min on columns
"""
type json_objects_min_fields {
  id: numeric
}

"""
Ordering options when selecting data from "json_object".
"""
input json_objects_order_by {
  atom: atoms_order_by
  data: order_by
  id: order_by
}

"""
select columns of table "json_object"
"""
enum json_objects_select_column {
  """
  column name
  """
  data
  """
  column name
  """
  id
}

"""
aggregate stddev on columns
"""
type json_objects_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type json_objects_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type json_objects_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "json_objects"
"""
input json_objects_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: json_objects_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input json_objects_stream_cursor_value_input {
  data: jsonb
  id: numeric
}

"""
aggregate sum on columns
"""
type json_objects_sum_fields {
  id: numeric
}

"""
aggregate var_pop on columns
"""
type json_objects_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type json_objects_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type json_objects_variance_fields {
  id: Float
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp
  """
  is the column contained in the given json value
  """
  _contained_in: jsonb
  """
  does the column contain the given json value at the top level
  """
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb
  """
  does the string exist as a top-level key in the column
  """
  _has_key: String
  """
  do all of these strings exist as top-level keys in the column
  """
  _has_keys_all: [String!]
  """
  do any of these strings exist as top-level keys in the column
  """
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
mutation root
"""
type mutation_root {
  """
  Uploads and pins Organization to IPFS
  """
  pinOrganization(organization: PinOrganizationInput!): PinOutput
  """
  Uploads and pins Person to IPFS
  """
  pinPerson(person: PinPersonInput!): PinOutput
  """
  Uploads and pins Thing to IPFS
  """
  pinThing(thing: PinThingInput!): PinOutput
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""
column ordering options
"""
enum order_by {
  """
  in ascending order, nulls last
  """
  asc
  """
  in ascending order, nulls first
  """
  asc_nulls_first
  """
  in ascending order, nulls last
  """
  asc_nulls_last
  """
  in descending order, nulls first
  """
  desc
  """
  in descending order, nulls first
  """
  desc_nulls_first
  """
  in descending order, nulls last
  """
  desc_nulls_last
}

"""
columns and relationships of "organization"
"""
type organizations {
  """
  An object relationship
  """
  atom: atoms
  description: String
  email: String
  id: numeric!
  image: String
  name: String
  url: String
}

"""
aggregated selection of "organization"
"""
type organizations_aggregate {
  aggregate: organizations_aggregate_fields
  nodes: [organizations!]!
}

"""
aggregate fields of "organization"
"""
type organizations_aggregate_fields {
  avg: organizations_avg_fields
  count(columns: [organizations_select_column!], distinct: Boolean): Int!
  max: organizations_max_fields
  min: organizations_min_fields
  stddev: organizations_stddev_fields
  stddev_pop: organizations_stddev_pop_fields
  stddev_samp: organizations_stddev_samp_fields
  sum: organizations_sum_fields
  var_pop: organizations_var_pop_fields
  var_samp: organizations_var_samp_fields
  variance: organizations_variance_fields
}

"""
aggregate avg on columns
"""
type organizations_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "organization". All fields are combined with a logical 'AND'.
"""
input organizations_bool_exp {
  _and: [organizations_bool_exp!]
  _not: organizations_bool_exp
  _or: [organizations_bool_exp!]
  atom: atoms_bool_exp
  description: String_comparison_exp
  email: String_comparison_exp
  id: numeric_comparison_exp
  image: String_comparison_exp
  name: String_comparison_exp
  url: String_comparison_exp
}

"""
aggregate max on columns
"""
type organizations_max_fields {
  description: String
  email: String
  id: numeric
  image: String
  name: String
  url: String
}

"""
aggregate min on columns
"""
type organizations_min_fields {
  description: String
  email: String
  id: numeric
  image: String
  name: String
  url: String
}

"""
Ordering options when selecting data from "organization".
"""
input organizations_order_by {
  atom: atoms_order_by
  description: order_by
  email: order_by
  id: order_by
  image: order_by
  name: order_by
  url: order_by
}

"""
select columns of table "organization"
"""
enum organizations_select_column {
  """
  column name
  """
  description
  """
  column name
  """
  email
  """
  column name
  """
  id
  """
  column name
  """
  image
  """
  column name
  """
  name
  """
  column name
  """
  url
}

"""
aggregate stddev on columns
"""
type organizations_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type organizations_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type organizations_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "organizations"
"""
input organizations_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: organizations_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input organizations_stream_cursor_value_input {
  description: String
  email: String
  id: numeric
  image: String
  name: String
  url: String
}

"""
aggregate sum on columns
"""
type organizations_sum_fields {
  id: numeric
}

"""
aggregate var_pop on columns
"""
type organizations_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type organizations_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type organizations_variance_fields {
  id: Float
}

"""
columns and relationships of "person"
"""
type persons {
  """
  An object relationship
  """
  atom: atoms
  cached_image: cached_images_cached_image
  description: String
  email: String
  id: numeric!
  identifier: String
  image: String
  name: String
  url: String
}

"""
aggregated selection of "person"
"""
type persons_aggregate {
  aggregate: persons_aggregate_fields
  nodes: [persons!]!
}

"""
aggregate fields of "person"
"""
type persons_aggregate_fields {
  avg: persons_avg_fields
  count(columns: [persons_select_column!], distinct: Boolean): Int!
  max: persons_max_fields
  min: persons_min_fields
  stddev: persons_stddev_fields
  stddev_pop: persons_stddev_pop_fields
  stddev_samp: persons_stddev_samp_fields
  sum: persons_sum_fields
  var_pop: persons_var_pop_fields
  var_samp: persons_var_samp_fields
  variance: persons_variance_fields
}

"""
aggregate avg on columns
"""
type persons_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "person". All fields are combined with a logical 'AND'.
"""
input persons_bool_exp {
  _and: [persons_bool_exp!]
  _not: persons_bool_exp
  _or: [persons_bool_exp!]
  atom: atoms_bool_exp
  description: String_comparison_exp
  email: String_comparison_exp
  id: numeric_comparison_exp
  identifier: String_comparison_exp
  image: String_comparison_exp
  name: String_comparison_exp
  url: String_comparison_exp
}

"""
aggregate max on columns
"""
type persons_max_fields {
  description: String
  email: String
  id: numeric
  identifier: String
  image: String
  name: String
  url: String
}

"""
aggregate min on columns
"""
type persons_min_fields {
  description: String
  email: String
  id: numeric
  identifier: String
  image: String
  name: String
  url: String
}

"""
Ordering options when selecting data from "person".
"""
input persons_order_by {
  atom: atoms_order_by
  description: order_by
  email: order_by
  id: order_by
  identifier: order_by
  image: order_by
  name: order_by
  url: order_by
}

"""
select columns of table "person"
"""
enum persons_select_column {
  """
  column name
  """
  description
  """
  column name
  """
  email
  """
  column name
  """
  id
  """
  column name
  """
  identifier
  """
  column name
  """
  image
  """
  column name
  """
  name
  """
  column name
  """
  url
}

"""
aggregate stddev on columns
"""
type persons_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type persons_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type persons_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "persons"
"""
input persons_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: persons_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input persons_stream_cursor_value_input {
  description: String
  email: String
  id: numeric
  identifier: String
  image: String
  name: String
  url: String
}

"""
aggregate sum on columns
"""
type persons_sum_fields {
  id: numeric
}

"""
aggregate var_pop on columns
"""
type persons_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type persons_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type persons_variance_fields {
  id: Float
}

"""
columns and relationships of "position"
"""
type positions {
  """
  An object relationship
  """
  account: accounts
  account_id: String!
  created_at: timestamptz!
  curve_id: numeric!
  id: String!
  shares: numeric!
  """
  An object relationship
  """
  term: terms!
  term_id: numeric!
  updated_at: timestamptz!
  """
  An object relationship
  """
  vault: vaults
}

"""
aggregated selection of "position"
"""
type positions_aggregate {
  aggregate: positions_aggregate_fields
  nodes: [positions!]!
}

input positions_aggregate_bool_exp {
  count: positions_aggregate_bool_exp_count
}

input positions_aggregate_bool_exp_count {
  arguments: [positions_select_column!]
  distinct: Boolean
  filter: positions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "position"
"""
type positions_aggregate_fields {
  avg: positions_avg_fields
  count(columns: [positions_select_column!], distinct: Boolean): Int!
  max: positions_max_fields
  min: positions_min_fields
  stddev: positions_stddev_fields
  stddev_pop: positions_stddev_pop_fields
  stddev_samp: positions_stddev_samp_fields
  sum: positions_sum_fields
  var_pop: positions_var_pop_fields
  var_samp: positions_var_samp_fields
  variance: positions_variance_fields
}

"""
order by aggregate values of table "position"
"""
input positions_aggregate_order_by {
  avg: positions_avg_order_by
  count: order_by
  max: positions_max_order_by
  min: positions_min_order_by
  stddev: positions_stddev_order_by
  stddev_pop: positions_stddev_pop_order_by
  stddev_samp: positions_stddev_samp_order_by
  sum: positions_sum_order_by
  var_pop: positions_var_pop_order_by
  var_samp: positions_var_samp_order_by
  variance: positions_variance_order_by
}

"""
aggregate avg on columns
"""
type positions_avg_fields {
  curve_id: Float
  shares: Float
  term_id: Float
}

"""
order by avg() on columns of table "position"
"""
input positions_avg_order_by {
  curve_id: order_by
  shares: order_by
  term_id: order_by
}

"""
Boolean expression to filter rows from the table "position". All fields are combined with a logical 'AND'.
"""
input positions_bool_exp {
  _and: [positions_bool_exp!]
  _not: positions_bool_exp
  _or: [positions_bool_exp!]
  account: accounts_bool_exp
  account_id: String_comparison_exp
  created_at: timestamptz_comparison_exp
  curve_id: numeric_comparison_exp
  id: String_comparison_exp
  shares: numeric_comparison_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
  updated_at: timestamptz_comparison_exp
  vault: vaults_bool_exp
}

input positions_from_following_args {
  address: String
}

"""
aggregate max on columns
"""
type positions_max_fields {
  account_id: String
  created_at: timestamptz
  curve_id: numeric
  id: String
  shares: numeric
  term_id: numeric
  updated_at: timestamptz
}

"""
order by max() on columns of table "position"
"""
input positions_max_order_by {
  account_id: order_by
  created_at: order_by
  curve_id: order_by
  id: order_by
  shares: order_by
  term_id: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type positions_min_fields {
  account_id: String
  created_at: timestamptz
  curve_id: numeric
  id: String
  shares: numeric
  term_id: numeric
  updated_at: timestamptz
}

"""
order by min() on columns of table "position"
"""
input positions_min_order_by {
  account_id: order_by
  created_at: order_by
  curve_id: order_by
  id: order_by
  shares: order_by
  term_id: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "position".
"""
input positions_order_by {
  account: accounts_order_by
  account_id: order_by
  created_at: order_by
  curve_id: order_by
  id: order_by
  shares: order_by
  term: terms_order_by
  term_id: order_by
  updated_at: order_by
  vault: vaults_order_by
}

"""
select columns of table "position"
"""
enum positions_select_column {
  """
  column name
  """
  account_id
  """
  column name
  """
  created_at
  """
  column name
  """
  curve_id
  """
  column name
  """
  id
  """
  column name
  """
  shares
  """
  column name
  """
  term_id
  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type positions_stddev_fields {
  curve_id: Float
  shares: Float
  term_id: Float
}

"""
order by stddev() on columns of table "position"
"""
input positions_stddev_order_by {
  curve_id: order_by
  shares: order_by
  term_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type positions_stddev_pop_fields {
  curve_id: Float
  shares: Float
  term_id: Float
}

"""
order by stddev_pop() on columns of table "position"
"""
input positions_stddev_pop_order_by {
  curve_id: order_by
  shares: order_by
  term_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type positions_stddev_samp_fields {
  curve_id: Float
  shares: Float
  term_id: Float
}

"""
order by stddev_samp() on columns of table "position"
"""
input positions_stddev_samp_order_by {
  curve_id: order_by
  shares: order_by
  term_id: order_by
}

"""
Streaming cursor of the table "positions"
"""
input positions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: positions_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input positions_stream_cursor_value_input {
  account_id: String
  created_at: timestamptz
  curve_id: numeric
  id: String
  shares: numeric
  term_id: numeric
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type positions_sum_fields {
  curve_id: numeric
  shares: numeric
  term_id: numeric
}

"""
order by sum() on columns of table "position"
"""
input positions_sum_order_by {
  curve_id: order_by
  shares: order_by
  term_id: order_by
}

"""
aggregate var_pop on columns
"""
type positions_var_pop_fields {
  curve_id: Float
  shares: Float
  term_id: Float
}

"""
order by var_pop() on columns of table "position"
"""
input positions_var_pop_order_by {
  curve_id: order_by
  shares: order_by
  term_id: order_by
}

"""
aggregate var_samp on columns
"""
type positions_var_samp_fields {
  curve_id: Float
  shares: Float
  term_id: Float
}

"""
order by var_samp() on columns of table "position"
"""
input positions_var_samp_order_by {
  curve_id: order_by
  shares: order_by
  term_id: order_by
}

"""
aggregate variance on columns
"""
type positions_variance_fields {
  curve_id: Float
  shares: Float
  term_id: Float
}

"""
order by variance() on columns of table "position"
"""
input positions_variance_order_by {
  curve_id: order_by
  shares: order_by
  term_id: order_by
}

"""
columns and relationships of "predicate_object"
"""
type predicate_objects {
  id: String!
  """
  An object relationship
  """
  object: atoms!
  object_id: numeric!
  """
  An object relationship
  """
  predicate: atoms!
  predicate_id: numeric!
  triple_count: Int!
}

"""
aggregated selection of "predicate_object"
"""
type predicate_objects_aggregate {
  aggregate: predicate_objects_aggregate_fields
  nodes: [predicate_objects!]!
}

input predicate_objects_aggregate_bool_exp {
  count: predicate_objects_aggregate_bool_exp_count
}

input predicate_objects_aggregate_bool_exp_count {
  arguments: [predicate_objects_select_column!]
  distinct: Boolean
  filter: predicate_objects_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "predicate_object"
"""
type predicate_objects_aggregate_fields {
  avg: predicate_objects_avg_fields
  count(columns: [predicate_objects_select_column!], distinct: Boolean): Int!
  max: predicate_objects_max_fields
  min: predicate_objects_min_fields
  stddev: predicate_objects_stddev_fields
  stddev_pop: predicate_objects_stddev_pop_fields
  stddev_samp: predicate_objects_stddev_samp_fields
  sum: predicate_objects_sum_fields
  var_pop: predicate_objects_var_pop_fields
  var_samp: predicate_objects_var_samp_fields
  variance: predicate_objects_variance_fields
}

"""
order by aggregate values of table "predicate_object"
"""
input predicate_objects_aggregate_order_by {
  avg: predicate_objects_avg_order_by
  count: order_by
  max: predicate_objects_max_order_by
  min: predicate_objects_min_order_by
  stddev: predicate_objects_stddev_order_by
  stddev_pop: predicate_objects_stddev_pop_order_by
  stddev_samp: predicate_objects_stddev_samp_order_by
  sum: predicate_objects_sum_order_by
  var_pop: predicate_objects_var_pop_order_by
  var_samp: predicate_objects_var_samp_order_by
  variance: predicate_objects_variance_order_by
}

"""
aggregate avg on columns
"""
type predicate_objects_avg_fields {
  object_id: Float
  predicate_id: Float
  triple_count: Float
}

"""
order by avg() on columns of table "predicate_object"
"""
input predicate_objects_avg_order_by {
  object_id: order_by
  predicate_id: order_by
  triple_count: order_by
}

"""
Boolean expression to filter rows from the table "predicate_object". All fields are combined with a logical 'AND'.
"""
input predicate_objects_bool_exp {
  _and: [predicate_objects_bool_exp!]
  _not: predicate_objects_bool_exp
  _or: [predicate_objects_bool_exp!]
  id: String_comparison_exp
  object: atoms_bool_exp
  object_id: numeric_comparison_exp
  predicate: atoms_bool_exp
  predicate_id: numeric_comparison_exp
  triple_count: Int_comparison_exp
}

"""
aggregate max on columns
"""
type predicate_objects_max_fields {
  id: String
  object_id: numeric
  predicate_id: numeric
  triple_count: Int
}

"""
order by max() on columns of table "predicate_object"
"""
input predicate_objects_max_order_by {
  id: order_by
  object_id: order_by
  predicate_id: order_by
  triple_count: order_by
}

"""
aggregate min on columns
"""
type predicate_objects_min_fields {
  id: String
  object_id: numeric
  predicate_id: numeric
  triple_count: Int
}

"""
order by min() on columns of table "predicate_object"
"""
input predicate_objects_min_order_by {
  id: order_by
  object_id: order_by
  predicate_id: order_by
  triple_count: order_by
}

"""
Ordering options when selecting data from "predicate_object".
"""
input predicate_objects_order_by {
  id: order_by
  object: atoms_order_by
  object_id: order_by
  predicate: atoms_order_by
  predicate_id: order_by
  triple_count: order_by
}

"""
select columns of table "predicate_object"
"""
enum predicate_objects_select_column {
  """
  column name
  """
  id
  """
  column name
  """
  object_id
  """
  column name
  """
  predicate_id
  """
  column name
  """
  triple_count
}

"""
aggregate stddev on columns
"""
type predicate_objects_stddev_fields {
  object_id: Float
  predicate_id: Float
  triple_count: Float
}

"""
order by stddev() on columns of table "predicate_object"
"""
input predicate_objects_stddev_order_by {
  object_id: order_by
  predicate_id: order_by
  triple_count: order_by
}

"""
aggregate stddev_pop on columns
"""
type predicate_objects_stddev_pop_fields {
  object_id: Float
  predicate_id: Float
  triple_count: Float
}

"""
order by stddev_pop() on columns of table "predicate_object"
"""
input predicate_objects_stddev_pop_order_by {
  object_id: order_by
  predicate_id: order_by
  triple_count: order_by
}

"""
aggregate stddev_samp on columns
"""
type predicate_objects_stddev_samp_fields {
  object_id: Float
  predicate_id: Float
  triple_count: Float
}

"""
order by stddev_samp() on columns of table "predicate_object"
"""
input predicate_objects_stddev_samp_order_by {
  object_id: order_by
  predicate_id: order_by
  triple_count: order_by
}

"""
Streaming cursor of the table "predicate_objects"
"""
input predicate_objects_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: predicate_objects_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input predicate_objects_stream_cursor_value_input {
  id: String
  object_id: numeric
  predicate_id: numeric
  triple_count: Int
}

"""
aggregate sum on columns
"""
type predicate_objects_sum_fields {
  object_id: numeric
  predicate_id: numeric
  triple_count: Int
}

"""
order by sum() on columns of table "predicate_object"
"""
input predicate_objects_sum_order_by {
  object_id: order_by
  predicate_id: order_by
  triple_count: order_by
}

"""
aggregate var_pop on columns
"""
type predicate_objects_var_pop_fields {
  object_id: Float
  predicate_id: Float
  triple_count: Float
}

"""
order by var_pop() on columns of table "predicate_object"
"""
input predicate_objects_var_pop_order_by {
  object_id: order_by
  predicate_id: order_by
  triple_count: order_by
}

"""
aggregate var_samp on columns
"""
type predicate_objects_var_samp_fields {
  object_id: Float
  predicate_id: Float
  triple_count: Float
}

"""
order by var_samp() on columns of table "predicate_object"
"""
input predicate_objects_var_samp_order_by {
  object_id: order_by
  predicate_id: order_by
  triple_count: order_by
}

"""
aggregate variance on columns
"""
type predicate_objects_variance_fields {
  object_id: Float
  predicate_id: Float
  triple_count: Float
}

"""
order by variance() on columns of table "predicate_object"
"""
input predicate_objects_variance_order_by {
  object_id: order_by
  predicate_id: order_by
  triple_count: order_by
}

type query_root {
  """
  fetch data from the table: "account" using primary key columns
  """
  account(id: String!): accounts
  """
  An array relationship
  """
  accounts(
    """
    distinct select on columns
    """
    distinct_on: [accounts_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [accounts_order_by!]
    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): [accounts!]!
  """
  An aggregate relationship
  """
  accounts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [accounts_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [accounts_order_by!]
    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): accounts_aggregate!
  """
  fetch data from the table: "atom" using primary key columns
  """
  atom(term_id: numeric!): atoms
  """
  fetch data from the table: "atom_value" using primary key columns
  """
  atom_value(id: numeric!): atom_values
  """
  fetch data from the table: "atom_value"
  """
  atom_values(
    """
    distinct select on columns
    """
    distinct_on: [atom_values_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [atom_values_order_by!]
    """
    filter the rows returned
    """
    where: atom_values_bool_exp
  ): [atom_values!]!
  """
  fetch aggregated fields from the table: "atom_value"
  """
  atom_values_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [atom_values_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [atom_values_order_by!]
    """
    filter the rows returned
    """
    where: atom_values_bool_exp
  ): atom_values_aggregate!
  """
  An array relationship
  """
  atoms(
    """
    distinct select on columns
    """
    distinct_on: [atoms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [atoms_order_by!]
    """
    filter the rows returned
    """
    where: atoms_bool_exp
  ): [atoms!]!
  """
  An aggregate relationship
  """
  atoms_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [atoms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [atoms_order_by!]
    """
    filter the rows returned
    """
    where: atoms_bool_exp
  ): atoms_aggregate!
  """
  fetch data from the table: "book" using primary key columns
  """
  book(id: numeric!): books
  """
  fetch data from the table: "book"
  """
  books(
    """
    distinct select on columns
    """
    distinct_on: [books_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [books_order_by!]
    """
    filter the rows returned
    """
    where: books_bool_exp
  ): [books!]!
  """
  fetch aggregated fields from the table: "book"
  """
  books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [books_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [books_order_by!]
    """
    filter the rows returned
    """
    where: books_bool_exp
  ): books_aggregate!
  """
  fetch data from the table: "byte_object"
  """
  byte_object(
    """
    distinct select on columns
    """
    distinct_on: [byte_object_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [byte_object_order_by!]
    """
    filter the rows returned
    """
    where: byte_object_bool_exp
  ): [byte_object!]!
  """
  fetch aggregated fields from the table: "byte_object"
  """
  byte_object_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [byte_object_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [byte_object_order_by!]
    """
    filter the rows returned
    """
    where: byte_object_bool_exp
  ): byte_object_aggregate!
  """
  fetch data from the table: "byte_object" using primary key columns
  """
  byte_object_by_pk(id: numeric!): byte_object
  """
  fetch data from the table: "cached_images.cached_image"
  """
  cached_images_cached_image(
    """
    distinct select on columns
    """
    distinct_on: [cached_images_cached_image_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [cached_images_cached_image_order_by!]
    """
    filter the rows returned
    """
    where: cached_images_cached_image_bool_exp
  ): [cached_images_cached_image!]!
  """
  fetch data from the table: "cached_images.cached_image" using primary key columns
  """
  cached_images_cached_image_by_pk(url: String!): cached_images_cached_image
  """
  fetch data from the table: "caip10" using primary key columns
  """
  caip10(id: numeric!): caip10
  """
  fetch aggregated fields from the table: "caip10"
  """
  caip10_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [caip10_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [caip10_order_by!]
    """
    filter the rows returned
    """
    where: caip10_bool_exp
  ): caip10_aggregate!
  """
  fetch data from the table: "caip10"
  """
  caip10s(
    """
    distinct select on columns
    """
    distinct_on: [caip10_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [caip10_order_by!]
    """
    filter the rows returned
    """
    where: caip10_bool_exp
  ): [caip10!]!
  """
  fetch data from the table: "chainlink_price" using primary key columns
  """
  chainlink_price(id: numeric!): chainlink_prices
  """
  fetch data from the table: "chainlink_price"
  """
  chainlink_prices(
    """
    distinct select on columns
    """
    distinct_on: [chainlink_prices_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [chainlink_prices_order_by!]
    """
    filter the rows returned
    """
    where: chainlink_prices_bool_exp
  ): [chainlink_prices!]!
  """
  fetch data from the table: "deposit" using primary key columns
  """
  deposit(id: String!): deposits
  """
  An array relationship
  """
  deposits(
    """
    distinct select on columns
    """
    distinct_on: [deposits_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [deposits_order_by!]
    """
    filter the rows returned
    """
    where: deposits_bool_exp
  ): [deposits!]!
  """
  An aggregate relationship
  """
  deposits_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [deposits_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [deposits_order_by!]
    """
    filter the rows returned
    """
    where: deposits_bool_exp
  ): deposits_aggregate!
  """
  fetch data from the table: "event" using primary key columns
  """
  event(id: String!): events
  """
  fetch data from the table: "event"
  """
  events(
    """
    distinct select on columns
    """
    distinct_on: [events_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [events_order_by!]
    """
    filter the rows returned
    """
    where: events_bool_exp
  ): [events!]!
  """
  fetch aggregated fields from the table: "event"
  """
  events_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [events_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [events_order_by!]
    """
    filter the rows returned
    """
    where: events_bool_exp
  ): events_aggregate!
  """
  fetch data from the table: "fee_transfer" using primary key columns
  """
  fee_transfer(id: String!): fee_transfers
  """
  An array relationship
  """
  fee_transfers(
    """
    distinct select on columns
    """
    distinct_on: [fee_transfers_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [fee_transfers_order_by!]
    """
    filter the rows returned
    """
    where: fee_transfers_bool_exp
  ): [fee_transfers!]!
  """
  An aggregate relationship
  """
  fee_transfers_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [fee_transfers_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [fee_transfers_order_by!]
    """
    filter the rows returned
    """
    where: fee_transfers_bool_exp
  ): fee_transfers_aggregate!
  """
  execute function "following" which returns "account"
  """
  following(
    """
    input parameters for function "following"
    """
    args: following_args!
    """
    distinct select on columns
    """
    distinct_on: [accounts_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [accounts_order_by!]
    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): [accounts!]!
  """
  execute function "following" and query aggregates on result of table type "account"
  """
  following_aggregate(
    """
    input parameters for function "following_aggregate"
    """
    args: following_args!
    """
    distinct select on columns
    """
    distinct_on: [accounts_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [accounts_order_by!]
    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): accounts_aggregate!
  """
  fetch data from the table: "json_object" using primary key columns
  """
  json_object(id: numeric!): json_objects
  """
  fetch data from the table: "json_object"
  """
  json_objects(
    """
    distinct select on columns
    """
    distinct_on: [json_objects_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [json_objects_order_by!]
    """
    filter the rows returned
    """
    where: json_objects_bool_exp
  ): [json_objects!]!
  """
  fetch aggregated fields from the table: "json_object"
  """
  json_objects_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [json_objects_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [json_objects_order_by!]
    """
    filter the rows returned
    """
    where: json_objects_bool_exp
  ): json_objects_aggregate!
  """
  fetch data from the table: "organization" using primary key columns
  """
  organization(id: numeric!): organizations
  """
  fetch data from the table: "organization"
  """
  organizations(
    """
    distinct select on columns
    """
    distinct_on: [organizations_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [organizations_order_by!]
    """
    filter the rows returned
    """
    where: organizations_bool_exp
  ): [organizations!]!
  """
  fetch aggregated fields from the table: "organization"
  """
  organizations_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [organizations_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [organizations_order_by!]
    """
    filter the rows returned
    """
    where: organizations_bool_exp
  ): organizations_aggregate!
  """
  fetch data from the table: "person" using primary key columns
  """
  person(id: numeric!): persons
  """
  fetch data from the table: "person"
  """
  persons(
    """
    distinct select on columns
    """
    distinct_on: [persons_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [persons_order_by!]
    """
    filter the rows returned
    """
    where: persons_bool_exp
  ): [persons!]!
  """
  fetch aggregated fields from the table: "person"
  """
  persons_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [persons_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [persons_order_by!]
    """
    filter the rows returned
    """
    where: persons_bool_exp
  ): persons_aggregate!
  """
  fetch data from the table: "position" using primary key columns
  """
  position(id: String!): positions
  """
  An array relationship
  """
  positions(
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): [positions!]!
  """
  An aggregate relationship
  """
  positions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): positions_aggregate!
  """
  execute function "positions_from_following" which returns "position"
  """
  positions_from_following(
    """
    input parameters for function "positions_from_following"
    """
    args: positions_from_following_args!
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): [positions!]!
  """
  execute function "positions_from_following" and query aggregates on result of table type "position"
  """
  positions_from_following_aggregate(
    """
    input parameters for function "positions_from_following_aggregate"
    """
    args: positions_from_following_args!
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): positions_aggregate!
  """
  fetch data from the table: "predicate_object"
  """
  predicate_objects(
    """
    distinct select on columns
    """
    distinct_on: [predicate_objects_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [predicate_objects_order_by!]
    """
    filter the rows returned
    """
    where: predicate_objects_bool_exp
  ): [predicate_objects!]!
  """
  fetch aggregated fields from the table: "predicate_object"
  """
  predicate_objects_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [predicate_objects_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [predicate_objects_order_by!]
    """
    filter the rows returned
    """
    where: predicate_objects_bool_exp
  ): predicate_objects_aggregate!
  """
  fetch data from the table: "predicate_object" using primary key columns
  """
  predicate_objects_by_pk(id: String!): predicate_objects
  """
  fetch data from the table: "redemption" using primary key columns
  """
  redemption(id: String!): redemptions
  """
  An array relationship
  """
  redemptions(
    """
    distinct select on columns
    """
    distinct_on: [redemptions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [redemptions_order_by!]
    """
    filter the rows returned
    """
    where: redemptions_bool_exp
  ): [redemptions!]!
  """
  An aggregate relationship
  """
  redemptions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [redemptions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [redemptions_order_by!]
    """
    filter the rows returned
    """
    where: redemptions_bool_exp
  ): redemptions_aggregate!
  """
  execute function "search_positions_on_subject" which returns "position"
  """
  search_positions_on_subject(
    """
    input parameters for function "search_positions_on_subject"
    """
    args: search_positions_on_subject_args!
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): [positions!]!
  """
  execute function "search_positions_on_subject" and query aggregates on result of table type "position"
  """
  search_positions_on_subject_aggregate(
    """
    input parameters for function "search_positions_on_subject_aggregate"
    """
    args: search_positions_on_subject_args!
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): positions_aggregate!
  """
  execute function "search_term" which returns "term"
  """
  search_term(
    """
    input parameters for function "search_term"
    """
    args: search_term_args!
    """
    distinct select on columns
    """
    distinct_on: [terms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [terms_order_by!]
    """
    filter the rows returned
    """
    where: terms_bool_exp
  ): [terms!]!
  """
  execute function "search_term" and query aggregates on result of table type "term"
  """
  search_term_aggregate(
    """
    input parameters for function "search_term_aggregate"
    """
    args: search_term_args!
    """
    distinct select on columns
    """
    distinct_on: [terms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [terms_order_by!]
    """
    filter the rows returned
    """
    where: terms_bool_exp
  ): terms_aggregate!
  """
  execute function "search_term_from_following" which returns "term"
  """
  search_term_from_following(
    """
    input parameters for function "search_term_from_following"
    """
    args: search_term_from_following_args!
    """
    distinct select on columns
    """
    distinct_on: [terms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [terms_order_by!]
    """
    filter the rows returned
    """
    where: terms_bool_exp
  ): [terms!]!
  """
  execute function "search_term_from_following" and query aggregates on result of table type "term"
  """
  search_term_from_following_aggregate(
    """
    input parameters for function "search_term_from_following_aggregate"
    """
    args: search_term_from_following_args!
    """
    distinct select on columns
    """
    distinct_on: [terms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [terms_order_by!]
    """
    filter the rows returned
    """
    where: terms_bool_exp
  ): terms_aggregate!
  """
  An array relationship
  """
  share_price_change_stats_daily(
    """
    distinct select on columns
    """
    distinct_on: [share_price_change_stats_daily_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_change_stats_daily_order_by!]
    """
    filter the rows returned
    """
    where: share_price_change_stats_daily_bool_exp
  ): [share_price_change_stats_daily!]!
  """
  An array relationship
  """
  share_price_change_stats_hourly(
    """
    distinct select on columns
    """
    distinct_on: [share_price_change_stats_hourly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_change_stats_hourly_order_by!]
    """
    filter the rows returned
    """
    where: share_price_change_stats_hourly_bool_exp
  ): [share_price_change_stats_hourly!]!
  """
  An array relationship
  """
  share_price_change_stats_monthly(
    """
    distinct select on columns
    """
    distinct_on: [share_price_change_stats_monthly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_change_stats_monthly_order_by!]
    """
    filter the rows returned
    """
    where: share_price_change_stats_monthly_bool_exp
  ): [share_price_change_stats_monthly!]!
  """
  An array relationship
  """
  share_price_change_stats_weekly(
    """
    distinct select on columns
    """
    distinct_on: [share_price_change_stats_weekly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_change_stats_weekly_order_by!]
    """
    filter the rows returned
    """
    where: share_price_change_stats_weekly_bool_exp
  ): [share_price_change_stats_weekly!]!
  """
  An array relationship
  """
  share_price_changes(
    """
    distinct select on columns
    """
    distinct_on: [share_price_changes_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_changes_order_by!]
    """
    filter the rows returned
    """
    where: share_price_changes_bool_exp
  ): [share_price_changes!]!
  """
  An aggregate relationship
  """
  share_price_changes_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [share_price_changes_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_changes_order_by!]
    """
    filter the rows returned
    """
    where: share_price_changes_bool_exp
  ): share_price_changes_aggregate!
  """
  fetch data from the table: "signal_stats_daily"
  """
  signal_stats_daily(
    """
    distinct select on columns
    """
    distinct_on: [signal_stats_daily_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signal_stats_daily_order_by!]
    """
    filter the rows returned
    """
    where: signal_stats_daily_bool_exp
  ): [signal_stats_daily!]!
  """
  fetch data from the table: "signal_stats_hourly"
  """
  signal_stats_hourly(
    """
    distinct select on columns
    """
    distinct_on: [signal_stats_hourly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signal_stats_hourly_order_by!]
    """
    filter the rows returned
    """
    where: signal_stats_hourly_bool_exp
  ): [signal_stats_hourly!]!
  """
  fetch data from the table: "signal_stats_monthly"
  """
  signal_stats_monthly(
    """
    distinct select on columns
    """
    distinct_on: [signal_stats_monthly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signal_stats_monthly_order_by!]
    """
    filter the rows returned
    """
    where: signal_stats_monthly_bool_exp
  ): [signal_stats_monthly!]!
  """
  fetch data from the table: "signal_stats_weekly"
  """
  signal_stats_weekly(
    """
    distinct select on columns
    """
    distinct_on: [signal_stats_weekly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signal_stats_weekly_order_by!]
    """
    filter the rows returned
    """
    where: signal_stats_weekly_bool_exp
  ): [signal_stats_weekly!]!
  """
  An array relationship
  """
  signals(
    """
    distinct select on columns
    """
    distinct_on: [signals_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signals_order_by!]
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): [signals!]!
  """
  An aggregate relationship
  """
  signals_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [signals_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signals_order_by!]
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): signals_aggregate!
  """
  execute function "signals_from_following" which returns "signal"
  """
  signals_from_following(
    """
    input parameters for function "signals_from_following"
    """
    args: signals_from_following_args!
    """
    distinct select on columns
    """
    distinct_on: [signals_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signals_order_by!]
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): [signals!]!
  """
  execute function "signals_from_following" and query aggregates on result of table type "signal"
  """
  signals_from_following_aggregate(
    """
    input parameters for function "signals_from_following_aggregate"
    """
    args: signals_from_following_args!
    """
    distinct select on columns
    """
    distinct_on: [signals_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signals_order_by!]
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): signals_aggregate!
  """
  fetch data from the table: "stats" using primary key columns
  """
  stat(id: Int!): stats
  """
  fetch data from the table: "stats"
  """
  stats(
    """
    distinct select on columns
    """
    distinct_on: [stats_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [stats_order_by!]
    """
    filter the rows returned
    """
    where: stats_bool_exp
  ): [stats!]!
  """
  fetch aggregated fields from the table: "stats"
  """
  stats_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [stats_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [stats_order_by!]
    """
    filter the rows returned
    """
    where: stats_bool_exp
  ): stats_aggregate!
  """
  fetch data from the table: "term" using primary key columns
  """
  term(id: numeric!): terms
  """
  fetch data from the table: "term"
  """
  terms(
    """
    distinct select on columns
    """
    distinct_on: [terms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [terms_order_by!]
    """
    filter the rows returned
    """
    where: terms_bool_exp
  ): [terms!]!
  """
  fetch aggregated fields from the table: "term"
  """
  terms_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [terms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [terms_order_by!]
    """
    filter the rows returned
    """
    where: terms_bool_exp
  ): terms_aggregate!
  """
  fetch data from the table: "text_object" using primary key columns
  """
  text_object(id: numeric!): text_objects
  """
  fetch data from the table: "text_object"
  """
  text_objects(
    """
    distinct select on columns
    """
    distinct_on: [text_objects_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [text_objects_order_by!]
    """
    filter the rows returned
    """
    where: text_objects_bool_exp
  ): [text_objects!]!
  """
  fetch aggregated fields from the table: "text_object"
  """
  text_objects_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [text_objects_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [text_objects_order_by!]
    """
    filter the rows returned
    """
    where: text_objects_bool_exp
  ): text_objects_aggregate!
  """
  fetch data from the table: "thing" using primary key columns
  """
  thing(id: numeric!): things
  """
  fetch data from the table: "thing"
  """
  things(
    """
    distinct select on columns
    """
    distinct_on: [things_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [things_order_by!]
    """
    filter the rows returned
    """
    where: things_bool_exp
  ): [things!]!
  """
  fetch aggregated fields from the table: "thing"
  """
  things_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [things_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [things_order_by!]
    """
    filter the rows returned
    """
    where: things_bool_exp
  ): things_aggregate!
  """
  fetch data from the table: "triple" using primary key columns
  """
  triple(term_id: numeric!): triples
  """
  fetch data from the table: "triple_term" using primary key columns
  """
  triple_term(term_id: numeric!): triple_term
  """
  fetch data from the table: "triple_term"
  """
  triple_terms(
    """
    distinct select on columns
    """
    distinct_on: [triple_term_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [triple_term_order_by!]
    """
    filter the rows returned
    """
    where: triple_term_bool_exp
  ): [triple_term!]!
  """
  fetch data from the table: "triple_vault" using primary key columns
  """
  triple_vault(curve_id: numeric!, term_id: numeric!): triple_vault
  """
  fetch data from the table: "triple_vault"
  """
  triple_vaults(
    """
    distinct select on columns
    """
    distinct_on: [triple_vault_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [triple_vault_order_by!]
    """
    filter the rows returned
    """
    where: triple_vault_bool_exp
  ): [triple_vault!]!
  """
  An array relationship
  """
  triples(
    """
    distinct select on columns
    """
    distinct_on: [triples_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [triples_order_by!]
    """
    filter the rows returned
    """
    where: triples_bool_exp
  ): [triples!]!
  """
  An aggregate relationship
  """
  triples_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [triples_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [triples_order_by!]
    """
    filter the rows returned
    """
    where: triples_bool_exp
  ): triples_aggregate!
  """
  fetch data from the table: "vault" using primary key columns
  """
  vault(curve_id: numeric!, term_id: numeric!): vaults
  """
  An array relationship
  """
  vaults(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]
    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): [vaults!]!
  """
  An aggregate relationship
  """
  vaults_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]
    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): vaults_aggregate!
}

"""
columns and relationships of "redemption"
"""
type redemptions {
  assets_for_receiver: numeric!
  block_number: numeric!
  created_at: timestamptz!
  curve_id: numeric!
  exit_fee: numeric!
  id: String!
  """
  An object relationship
  """
  receiver: accounts!
  receiver_id: String!
  """
  An object relationship
  """
  sender: accounts
  sender_id: String!
  sender_total_shares_in_vault: numeric!
  shares_redeemed_by_sender: numeric!
  """
  An object relationship
  """
  term: terms!
  term_id: numeric!
  transaction_hash: String!
  """
  An object relationship
  """
  vault: vaults
}

"""
aggregated selection of "redemption"
"""
type redemptions_aggregate {
  aggregate: redemptions_aggregate_fields
  nodes: [redemptions!]!
}

input redemptions_aggregate_bool_exp {
  count: redemptions_aggregate_bool_exp_count
}

input redemptions_aggregate_bool_exp_count {
  arguments: [redemptions_select_column!]
  distinct: Boolean
  filter: redemptions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "redemption"
"""
type redemptions_aggregate_fields {
  avg: redemptions_avg_fields
  count(columns: [redemptions_select_column!], distinct: Boolean): Int!
  max: redemptions_max_fields
  min: redemptions_min_fields
  stddev: redemptions_stddev_fields
  stddev_pop: redemptions_stddev_pop_fields
  stddev_samp: redemptions_stddev_samp_fields
  sum: redemptions_sum_fields
  var_pop: redemptions_var_pop_fields
  var_samp: redemptions_var_samp_fields
  variance: redemptions_variance_fields
}

"""
order by aggregate values of table "redemption"
"""
input redemptions_aggregate_order_by {
  avg: redemptions_avg_order_by
  count: order_by
  max: redemptions_max_order_by
  min: redemptions_min_order_by
  stddev: redemptions_stddev_order_by
  stddev_pop: redemptions_stddev_pop_order_by
  stddev_samp: redemptions_stddev_samp_order_by
  sum: redemptions_sum_order_by
  var_pop: redemptions_var_pop_order_by
  var_samp: redemptions_var_samp_order_by
  variance: redemptions_variance_order_by
}

"""
aggregate avg on columns
"""
type redemptions_avg_fields {
  assets_for_receiver: Float
  block_number: Float
  curve_id: Float
  exit_fee: Float
  sender_total_shares_in_vault: Float
  shares_redeemed_by_sender: Float
  term_id: Float
}

"""
order by avg() on columns of table "redemption"
"""
input redemptions_avg_order_by {
  assets_for_receiver: order_by
  block_number: order_by
  curve_id: order_by
  exit_fee: order_by
  sender_total_shares_in_vault: order_by
  shares_redeemed_by_sender: order_by
  term_id: order_by
}

"""
Boolean expression to filter rows from the table "redemption". All fields are combined with a logical 'AND'.
"""
input redemptions_bool_exp {
  _and: [redemptions_bool_exp!]
  _not: redemptions_bool_exp
  _or: [redemptions_bool_exp!]
  assets_for_receiver: numeric_comparison_exp
  block_number: numeric_comparison_exp
  created_at: timestamptz_comparison_exp
  curve_id: numeric_comparison_exp
  exit_fee: numeric_comparison_exp
  id: String_comparison_exp
  receiver: accounts_bool_exp
  receiver_id: String_comparison_exp
  sender: accounts_bool_exp
  sender_id: String_comparison_exp
  sender_total_shares_in_vault: numeric_comparison_exp
  shares_redeemed_by_sender: numeric_comparison_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
  transaction_hash: String_comparison_exp
  vault: vaults_bool_exp
}

"""
aggregate max on columns
"""
type redemptions_max_fields {
  assets_for_receiver: numeric
  block_number: numeric
  created_at: timestamptz
  curve_id: numeric
  exit_fee: numeric
  id: String
  receiver_id: String
  sender_id: String
  sender_total_shares_in_vault: numeric
  shares_redeemed_by_sender: numeric
  term_id: numeric
  transaction_hash: String
}

"""
order by max() on columns of table "redemption"
"""
input redemptions_max_order_by {
  assets_for_receiver: order_by
  block_number: order_by
  created_at: order_by
  curve_id: order_by
  exit_fee: order_by
  id: order_by
  receiver_id: order_by
  sender_id: order_by
  sender_total_shares_in_vault: order_by
  shares_redeemed_by_sender: order_by
  term_id: order_by
  transaction_hash: order_by
}

"""
aggregate min on columns
"""
type redemptions_min_fields {
  assets_for_receiver: numeric
  block_number: numeric
  created_at: timestamptz
  curve_id: numeric
  exit_fee: numeric
  id: String
  receiver_id: String
  sender_id: String
  sender_total_shares_in_vault: numeric
  shares_redeemed_by_sender: numeric
  term_id: numeric
  transaction_hash: String
}

"""
order by min() on columns of table "redemption"
"""
input redemptions_min_order_by {
  assets_for_receiver: order_by
  block_number: order_by
  created_at: order_by
  curve_id: order_by
  exit_fee: order_by
  id: order_by
  receiver_id: order_by
  sender_id: order_by
  sender_total_shares_in_vault: order_by
  shares_redeemed_by_sender: order_by
  term_id: order_by
  transaction_hash: order_by
}

"""
Ordering options when selecting data from "redemption".
"""
input redemptions_order_by {
  assets_for_receiver: order_by
  block_number: order_by
  created_at: order_by
  curve_id: order_by
  exit_fee: order_by
  id: order_by
  receiver: accounts_order_by
  receiver_id: order_by
  sender: accounts_order_by
  sender_id: order_by
  sender_total_shares_in_vault: order_by
  shares_redeemed_by_sender: order_by
  term: terms_order_by
  term_id: order_by
  transaction_hash: order_by
  vault: vaults_order_by
}

"""
select columns of table "redemption"
"""
enum redemptions_select_column {
  """
  column name
  """
  assets_for_receiver
  """
  column name
  """
  block_number
  """
  column name
  """
  created_at
  """
  column name
  """
  curve_id
  """
  column name
  """
  exit_fee
  """
  column name
  """
  id
  """
  column name
  """
  receiver_id
  """
  column name
  """
  sender_id
  """
  column name
  """
  sender_total_shares_in_vault
  """
  column name
  """
  shares_redeemed_by_sender
  """
  column name
  """
  term_id
  """
  column name
  """
  transaction_hash
}

"""
aggregate stddev on columns
"""
type redemptions_stddev_fields {
  assets_for_receiver: Float
  block_number: Float
  curve_id: Float
  exit_fee: Float
  sender_total_shares_in_vault: Float
  shares_redeemed_by_sender: Float
  term_id: Float
}

"""
order by stddev() on columns of table "redemption"
"""
input redemptions_stddev_order_by {
  assets_for_receiver: order_by
  block_number: order_by
  curve_id: order_by
  exit_fee: order_by
  sender_total_shares_in_vault: order_by
  shares_redeemed_by_sender: order_by
  term_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type redemptions_stddev_pop_fields {
  assets_for_receiver: Float
  block_number: Float
  curve_id: Float
  exit_fee: Float
  sender_total_shares_in_vault: Float
  shares_redeemed_by_sender: Float
  term_id: Float
}

"""
order by stddev_pop() on columns of table "redemption"
"""
input redemptions_stddev_pop_order_by {
  assets_for_receiver: order_by
  block_number: order_by
  curve_id: order_by
  exit_fee: order_by
  sender_total_shares_in_vault: order_by
  shares_redeemed_by_sender: order_by
  term_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type redemptions_stddev_samp_fields {
  assets_for_receiver: Float
  block_number: Float
  curve_id: Float
  exit_fee: Float
  sender_total_shares_in_vault: Float
  shares_redeemed_by_sender: Float
  term_id: Float
}

"""
order by stddev_samp() on columns of table "redemption"
"""
input redemptions_stddev_samp_order_by {
  assets_for_receiver: order_by
  block_number: order_by
  curve_id: order_by
  exit_fee: order_by
  sender_total_shares_in_vault: order_by
  shares_redeemed_by_sender: order_by
  term_id: order_by
}

"""
Streaming cursor of the table "redemptions"
"""
input redemptions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: redemptions_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input redemptions_stream_cursor_value_input {
  assets_for_receiver: numeric
  block_number: numeric
  created_at: timestamptz
  curve_id: numeric
  exit_fee: numeric
  id: String
  receiver_id: String
  sender_id: String
  sender_total_shares_in_vault: numeric
  shares_redeemed_by_sender: numeric
  term_id: numeric
  transaction_hash: String
}

"""
aggregate sum on columns
"""
type redemptions_sum_fields {
  assets_for_receiver: numeric
  block_number: numeric
  curve_id: numeric
  exit_fee: numeric
  sender_total_shares_in_vault: numeric
  shares_redeemed_by_sender: numeric
  term_id: numeric
}

"""
order by sum() on columns of table "redemption"
"""
input redemptions_sum_order_by {
  assets_for_receiver: order_by
  block_number: order_by
  curve_id: order_by
  exit_fee: order_by
  sender_total_shares_in_vault: order_by
  shares_redeemed_by_sender: order_by
  term_id: order_by
}

"""
aggregate var_pop on columns
"""
type redemptions_var_pop_fields {
  assets_for_receiver: Float
  block_number: Float
  curve_id: Float
  exit_fee: Float
  sender_total_shares_in_vault: Float
  shares_redeemed_by_sender: Float
  term_id: Float
}

"""
order by var_pop() on columns of table "redemption"
"""
input redemptions_var_pop_order_by {
  assets_for_receiver: order_by
  block_number: order_by
  curve_id: order_by
  exit_fee: order_by
  sender_total_shares_in_vault: order_by
  shares_redeemed_by_sender: order_by
  term_id: order_by
}

"""
aggregate var_samp on columns
"""
type redemptions_var_samp_fields {
  assets_for_receiver: Float
  block_number: Float
  curve_id: Float
  exit_fee: Float
  sender_total_shares_in_vault: Float
  shares_redeemed_by_sender: Float
  term_id: Float
}

"""
order by var_samp() on columns of table "redemption"
"""
input redemptions_var_samp_order_by {
  assets_for_receiver: order_by
  block_number: order_by
  curve_id: order_by
  exit_fee: order_by
  sender_total_shares_in_vault: order_by
  shares_redeemed_by_sender: order_by
  term_id: order_by
}

"""
aggregate variance on columns
"""
type redemptions_variance_fields {
  assets_for_receiver: Float
  block_number: Float
  curve_id: Float
  exit_fee: Float
  sender_total_shares_in_vault: Float
  shares_redeemed_by_sender: Float
  term_id: Float
}

"""
order by variance() on columns of table "redemption"
"""
input redemptions_variance_order_by {
  assets_for_receiver: order_by
  block_number: order_by
  curve_id: order_by
  exit_fee: order_by
  sender_total_shares_in_vault: order_by
  shares_redeemed_by_sender: order_by
  term_id: order_by
}

input search_positions_on_subject_args {
  addresses: _text
  search_fields: jsonb
}

input search_term_args {
  query: String
}

input search_term_from_following_args {
  address: String
  query: String
}

"""
columns and relationships of "share_price_change_stats_daily"
"""
type share_price_change_stats_daily {
  bucket: timestamptz
  change_count: numeric
  curve_id: numeric
  difference: numeric
  first_share_price: numeric
  last_share_price: numeric
  """
  An object relationship
  """
  term: terms
  term_id: numeric
}

"""
order by aggregate values of table "share_price_change_stats_daily"
"""
input share_price_change_stats_daily_aggregate_order_by {
  avg: share_price_change_stats_daily_avg_order_by
  count: order_by
  max: share_price_change_stats_daily_max_order_by
  min: share_price_change_stats_daily_min_order_by
  stddev: share_price_change_stats_daily_stddev_order_by
  stddev_pop: share_price_change_stats_daily_stddev_pop_order_by
  stddev_samp: share_price_change_stats_daily_stddev_samp_order_by
  sum: share_price_change_stats_daily_sum_order_by
  var_pop: share_price_change_stats_daily_var_pop_order_by
  var_samp: share_price_change_stats_daily_var_samp_order_by
  variance: share_price_change_stats_daily_variance_order_by
}

"""
order by avg() on columns of table "share_price_change_stats_daily"
"""
input share_price_change_stats_daily_avg_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
Boolean expression to filter rows from the table "share_price_change_stats_daily". All fields are combined with a logical 'AND'.
"""
input share_price_change_stats_daily_bool_exp {
  _and: [share_price_change_stats_daily_bool_exp!]
  _not: share_price_change_stats_daily_bool_exp
  _or: [share_price_change_stats_daily_bool_exp!]
  bucket: timestamptz_comparison_exp
  change_count: numeric_comparison_exp
  curve_id: numeric_comparison_exp
  difference: numeric_comparison_exp
  first_share_price: numeric_comparison_exp
  last_share_price: numeric_comparison_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
}

"""
order by max() on columns of table "share_price_change_stats_daily"
"""
input share_price_change_stats_daily_max_order_by {
  bucket: order_by
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by min() on columns of table "share_price_change_stats_daily"
"""
input share_price_change_stats_daily_min_order_by {
  bucket: order_by
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
Ordering options when selecting data from "share_price_change_stats_daily".
"""
input share_price_change_stats_daily_order_by {
  bucket: order_by
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term: terms_order_by
  term_id: order_by
}

"""
select columns of table "share_price_change_stats_daily"
"""
enum share_price_change_stats_daily_select_column {
  """
  column name
  """
  bucket
  """
  column name
  """
  change_count
  """
  column name
  """
  curve_id
  """
  column name
  """
  difference
  """
  column name
  """
  first_share_price
  """
  column name
  """
  last_share_price
  """
  column name
  """
  term_id
}

"""
order by stddev() on columns of table "share_price_change_stats_daily"
"""
input share_price_change_stats_daily_stddev_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by stddev_pop() on columns of table "share_price_change_stats_daily"
"""
input share_price_change_stats_daily_stddev_pop_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by stddev_samp() on columns of table "share_price_change_stats_daily"
"""
input share_price_change_stats_daily_stddev_samp_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
Streaming cursor of the table "share_price_change_stats_daily"
"""
input share_price_change_stats_daily_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: share_price_change_stats_daily_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input share_price_change_stats_daily_stream_cursor_value_input {
  bucket: timestamptz
  change_count: numeric
  curve_id: numeric
  difference: numeric
  first_share_price: numeric
  last_share_price: numeric
  term_id: numeric
}

"""
order by sum() on columns of table "share_price_change_stats_daily"
"""
input share_price_change_stats_daily_sum_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by var_pop() on columns of table "share_price_change_stats_daily"
"""
input share_price_change_stats_daily_var_pop_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by var_samp() on columns of table "share_price_change_stats_daily"
"""
input share_price_change_stats_daily_var_samp_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by variance() on columns of table "share_price_change_stats_daily"
"""
input share_price_change_stats_daily_variance_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
columns and relationships of "share_price_change_stats_hourly"
"""
type share_price_change_stats_hourly {
  bucket: timestamptz
  change_count: bigint
  curve_id: numeric
  difference: numeric
  first_share_price: numeric
  last_share_price: numeric
  """
  An object relationship
  """
  term: terms
  term_id: numeric
}

"""
order by aggregate values of table "share_price_change_stats_hourly"
"""
input share_price_change_stats_hourly_aggregate_order_by {
  avg: share_price_change_stats_hourly_avg_order_by
  count: order_by
  max: share_price_change_stats_hourly_max_order_by
  min: share_price_change_stats_hourly_min_order_by
  stddev: share_price_change_stats_hourly_stddev_order_by
  stddev_pop: share_price_change_stats_hourly_stddev_pop_order_by
  stddev_samp: share_price_change_stats_hourly_stddev_samp_order_by
  sum: share_price_change_stats_hourly_sum_order_by
  var_pop: share_price_change_stats_hourly_var_pop_order_by
  var_samp: share_price_change_stats_hourly_var_samp_order_by
  variance: share_price_change_stats_hourly_variance_order_by
}

"""
order by avg() on columns of table "share_price_change_stats_hourly"
"""
input share_price_change_stats_hourly_avg_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
Boolean expression to filter rows from the table "share_price_change_stats_hourly". All fields are combined with a logical 'AND'.
"""
input share_price_change_stats_hourly_bool_exp {
  _and: [share_price_change_stats_hourly_bool_exp!]
  _not: share_price_change_stats_hourly_bool_exp
  _or: [share_price_change_stats_hourly_bool_exp!]
  bucket: timestamptz_comparison_exp
  change_count: bigint_comparison_exp
  curve_id: numeric_comparison_exp
  difference: numeric_comparison_exp
  first_share_price: numeric_comparison_exp
  last_share_price: numeric_comparison_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
}

"""
order by max() on columns of table "share_price_change_stats_hourly"
"""
input share_price_change_stats_hourly_max_order_by {
  bucket: order_by
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by min() on columns of table "share_price_change_stats_hourly"
"""
input share_price_change_stats_hourly_min_order_by {
  bucket: order_by
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
Ordering options when selecting data from "share_price_change_stats_hourly".
"""
input share_price_change_stats_hourly_order_by {
  bucket: order_by
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term: terms_order_by
  term_id: order_by
}

"""
select columns of table "share_price_change_stats_hourly"
"""
enum share_price_change_stats_hourly_select_column {
  """
  column name
  """
  bucket
  """
  column name
  """
  change_count
  """
  column name
  """
  curve_id
  """
  column name
  """
  difference
  """
  column name
  """
  first_share_price
  """
  column name
  """
  last_share_price
  """
  column name
  """
  term_id
}

"""
order by stddev() on columns of table "share_price_change_stats_hourly"
"""
input share_price_change_stats_hourly_stddev_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by stddev_pop() on columns of table "share_price_change_stats_hourly"
"""
input share_price_change_stats_hourly_stddev_pop_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by stddev_samp() on columns of table "share_price_change_stats_hourly"
"""
input share_price_change_stats_hourly_stddev_samp_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
Streaming cursor of the table "share_price_change_stats_hourly"
"""
input share_price_change_stats_hourly_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: share_price_change_stats_hourly_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input share_price_change_stats_hourly_stream_cursor_value_input {
  bucket: timestamptz
  change_count: bigint
  curve_id: numeric
  difference: numeric
  first_share_price: numeric
  last_share_price: numeric
  term_id: numeric
}

"""
order by sum() on columns of table "share_price_change_stats_hourly"
"""
input share_price_change_stats_hourly_sum_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by var_pop() on columns of table "share_price_change_stats_hourly"
"""
input share_price_change_stats_hourly_var_pop_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by var_samp() on columns of table "share_price_change_stats_hourly"
"""
input share_price_change_stats_hourly_var_samp_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by variance() on columns of table "share_price_change_stats_hourly"
"""
input share_price_change_stats_hourly_variance_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
columns and relationships of "share_price_change_stats_monthly"
"""
type share_price_change_stats_monthly {
  bucket: timestamptz
  change_count: numeric
  curve_id: numeric
  difference: numeric
  first_share_price: numeric
  last_share_price: numeric
  """
  An object relationship
  """
  term: terms
  term_id: numeric
}

"""
order by aggregate values of table "share_price_change_stats_monthly"
"""
input share_price_change_stats_monthly_aggregate_order_by {
  avg: share_price_change_stats_monthly_avg_order_by
  count: order_by
  max: share_price_change_stats_monthly_max_order_by
  min: share_price_change_stats_monthly_min_order_by
  stddev: share_price_change_stats_monthly_stddev_order_by
  stddev_pop: share_price_change_stats_monthly_stddev_pop_order_by
  stddev_samp: share_price_change_stats_monthly_stddev_samp_order_by
  sum: share_price_change_stats_monthly_sum_order_by
  var_pop: share_price_change_stats_monthly_var_pop_order_by
  var_samp: share_price_change_stats_monthly_var_samp_order_by
  variance: share_price_change_stats_monthly_variance_order_by
}

"""
order by avg() on columns of table "share_price_change_stats_monthly"
"""
input share_price_change_stats_monthly_avg_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
Boolean expression to filter rows from the table "share_price_change_stats_monthly". All fields are combined with a logical 'AND'.
"""
input share_price_change_stats_monthly_bool_exp {
  _and: [share_price_change_stats_monthly_bool_exp!]
  _not: share_price_change_stats_monthly_bool_exp
  _or: [share_price_change_stats_monthly_bool_exp!]
  bucket: timestamptz_comparison_exp
  change_count: numeric_comparison_exp
  curve_id: numeric_comparison_exp
  difference: numeric_comparison_exp
  first_share_price: numeric_comparison_exp
  last_share_price: numeric_comparison_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
}

"""
order by max() on columns of table "share_price_change_stats_monthly"
"""
input share_price_change_stats_monthly_max_order_by {
  bucket: order_by
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by min() on columns of table "share_price_change_stats_monthly"
"""
input share_price_change_stats_monthly_min_order_by {
  bucket: order_by
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
Ordering options when selecting data from "share_price_change_stats_monthly".
"""
input share_price_change_stats_monthly_order_by {
  bucket: order_by
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term: terms_order_by
  term_id: order_by
}

"""
select columns of table "share_price_change_stats_monthly"
"""
enum share_price_change_stats_monthly_select_column {
  """
  column name
  """
  bucket
  """
  column name
  """
  change_count
  """
  column name
  """
  curve_id
  """
  column name
  """
  difference
  """
  column name
  """
  first_share_price
  """
  column name
  """
  last_share_price
  """
  column name
  """
  term_id
}

"""
order by stddev() on columns of table "share_price_change_stats_monthly"
"""
input share_price_change_stats_monthly_stddev_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by stddev_pop() on columns of table "share_price_change_stats_monthly"
"""
input share_price_change_stats_monthly_stddev_pop_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by stddev_samp() on columns of table "share_price_change_stats_monthly"
"""
input share_price_change_stats_monthly_stddev_samp_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
Streaming cursor of the table "share_price_change_stats_monthly"
"""
input share_price_change_stats_monthly_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: share_price_change_stats_monthly_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input share_price_change_stats_monthly_stream_cursor_value_input {
  bucket: timestamptz
  change_count: numeric
  curve_id: numeric
  difference: numeric
  first_share_price: numeric
  last_share_price: numeric
  term_id: numeric
}

"""
order by sum() on columns of table "share_price_change_stats_monthly"
"""
input share_price_change_stats_monthly_sum_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by var_pop() on columns of table "share_price_change_stats_monthly"
"""
input share_price_change_stats_monthly_var_pop_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by var_samp() on columns of table "share_price_change_stats_monthly"
"""
input share_price_change_stats_monthly_var_samp_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by variance() on columns of table "share_price_change_stats_monthly"
"""
input share_price_change_stats_monthly_variance_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
columns and relationships of "share_price_change_stats_weekly"
"""
type share_price_change_stats_weekly {
  bucket: timestamptz
  change_count: numeric
  curve_id: numeric
  difference: numeric
  first_share_price: numeric
  last_share_price: numeric
  """
  An object relationship
  """
  term: terms
  term_id: numeric
}

"""
order by aggregate values of table "share_price_change_stats_weekly"
"""
input share_price_change_stats_weekly_aggregate_order_by {
  avg: share_price_change_stats_weekly_avg_order_by
  count: order_by
  max: share_price_change_stats_weekly_max_order_by
  min: share_price_change_stats_weekly_min_order_by
  stddev: share_price_change_stats_weekly_stddev_order_by
  stddev_pop: share_price_change_stats_weekly_stddev_pop_order_by
  stddev_samp: share_price_change_stats_weekly_stddev_samp_order_by
  sum: share_price_change_stats_weekly_sum_order_by
  var_pop: share_price_change_stats_weekly_var_pop_order_by
  var_samp: share_price_change_stats_weekly_var_samp_order_by
  variance: share_price_change_stats_weekly_variance_order_by
}

"""
order by avg() on columns of table "share_price_change_stats_weekly"
"""
input share_price_change_stats_weekly_avg_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
Boolean expression to filter rows from the table "share_price_change_stats_weekly". All fields are combined with a logical 'AND'.
"""
input share_price_change_stats_weekly_bool_exp {
  _and: [share_price_change_stats_weekly_bool_exp!]
  _not: share_price_change_stats_weekly_bool_exp
  _or: [share_price_change_stats_weekly_bool_exp!]
  bucket: timestamptz_comparison_exp
  change_count: numeric_comparison_exp
  curve_id: numeric_comparison_exp
  difference: numeric_comparison_exp
  first_share_price: numeric_comparison_exp
  last_share_price: numeric_comparison_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
}

"""
order by max() on columns of table "share_price_change_stats_weekly"
"""
input share_price_change_stats_weekly_max_order_by {
  bucket: order_by
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by min() on columns of table "share_price_change_stats_weekly"
"""
input share_price_change_stats_weekly_min_order_by {
  bucket: order_by
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
Ordering options when selecting data from "share_price_change_stats_weekly".
"""
input share_price_change_stats_weekly_order_by {
  bucket: order_by
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term: terms_order_by
  term_id: order_by
}

"""
select columns of table "share_price_change_stats_weekly"
"""
enum share_price_change_stats_weekly_select_column {
  """
  column name
  """
  bucket
  """
  column name
  """
  change_count
  """
  column name
  """
  curve_id
  """
  column name
  """
  difference
  """
  column name
  """
  first_share_price
  """
  column name
  """
  last_share_price
  """
  column name
  """
  term_id
}

"""
order by stddev() on columns of table "share_price_change_stats_weekly"
"""
input share_price_change_stats_weekly_stddev_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by stddev_pop() on columns of table "share_price_change_stats_weekly"
"""
input share_price_change_stats_weekly_stddev_pop_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by stddev_samp() on columns of table "share_price_change_stats_weekly"
"""
input share_price_change_stats_weekly_stddev_samp_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
Streaming cursor of the table "share_price_change_stats_weekly"
"""
input share_price_change_stats_weekly_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: share_price_change_stats_weekly_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input share_price_change_stats_weekly_stream_cursor_value_input {
  bucket: timestamptz
  change_count: numeric
  curve_id: numeric
  difference: numeric
  first_share_price: numeric
  last_share_price: numeric
  term_id: numeric
}

"""
order by sum() on columns of table "share_price_change_stats_weekly"
"""
input share_price_change_stats_weekly_sum_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by var_pop() on columns of table "share_price_change_stats_weekly"
"""
input share_price_change_stats_weekly_var_pop_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by var_samp() on columns of table "share_price_change_stats_weekly"
"""
input share_price_change_stats_weekly_var_samp_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
order by variance() on columns of table "share_price_change_stats_weekly"
"""
input share_price_change_stats_weekly_variance_order_by {
  change_count: order_by
  curve_id: order_by
  difference: order_by
  first_share_price: order_by
  last_share_price: order_by
  term_id: order_by
}

"""
columns and relationships of "share_price_change"
"""
type share_price_changes {
  block_number: numeric!
  block_timestamp: bigint!
  curve_id: numeric!
  id: bigint!
  share_price: numeric!
  """
  An object relationship
  """
  term: terms!
  term_id: numeric!
  total_assets: numeric!
  total_shares: numeric!
  transaction_hash: String!
  updated_at: timestamptz!
  """
  An object relationship
  """
  vault: vaults
}

"""
aggregated selection of "share_price_change"
"""
type share_price_changes_aggregate {
  aggregate: share_price_changes_aggregate_fields
  nodes: [share_price_changes!]!
}

input share_price_changes_aggregate_bool_exp {
  count: share_price_changes_aggregate_bool_exp_count
}

input share_price_changes_aggregate_bool_exp_count {
  arguments: [share_price_changes_select_column!]
  distinct: Boolean
  filter: share_price_changes_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "share_price_change"
"""
type share_price_changes_aggregate_fields {
  avg: share_price_changes_avg_fields
  count(columns: [share_price_changes_select_column!], distinct: Boolean): Int!
  max: share_price_changes_max_fields
  min: share_price_changes_min_fields
  stddev: share_price_changes_stddev_fields
  stddev_pop: share_price_changes_stddev_pop_fields
  stddev_samp: share_price_changes_stddev_samp_fields
  sum: share_price_changes_sum_fields
  var_pop: share_price_changes_var_pop_fields
  var_samp: share_price_changes_var_samp_fields
  variance: share_price_changes_variance_fields
}

"""
order by aggregate values of table "share_price_change"
"""
input share_price_changes_aggregate_order_by {
  avg: share_price_changes_avg_order_by
  count: order_by
  max: share_price_changes_max_order_by
  min: share_price_changes_min_order_by
  stddev: share_price_changes_stddev_order_by
  stddev_pop: share_price_changes_stddev_pop_order_by
  stddev_samp: share_price_changes_stddev_samp_order_by
  sum: share_price_changes_sum_order_by
  var_pop: share_price_changes_var_pop_order_by
  var_samp: share_price_changes_var_samp_order_by
  variance: share_price_changes_variance_order_by
}

"""
aggregate avg on columns
"""
type share_price_changes_avg_fields {
  block_number: Float
  block_timestamp: Float
  curve_id: Float
  id: Float
  share_price: Float
  term_id: Float
  total_assets: Float
  total_shares: Float
}

"""
order by avg() on columns of table "share_price_change"
"""
input share_price_changes_avg_order_by {
  block_number: order_by
  block_timestamp: order_by
  curve_id: order_by
  id: order_by
  share_price: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
}

"""
Boolean expression to filter rows from the table "share_price_change". All fields are combined with a logical 'AND'.
"""
input share_price_changes_bool_exp {
  _and: [share_price_changes_bool_exp!]
  _not: share_price_changes_bool_exp
  _or: [share_price_changes_bool_exp!]
  block_number: numeric_comparison_exp
  block_timestamp: bigint_comparison_exp
  curve_id: numeric_comparison_exp
  id: bigint_comparison_exp
  share_price: numeric_comparison_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
  total_assets: numeric_comparison_exp
  total_shares: numeric_comparison_exp
  transaction_hash: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  vault: vaults_bool_exp
}

"""
aggregate max on columns
"""
type share_price_changes_max_fields {
  block_number: numeric
  block_timestamp: bigint
  curve_id: numeric
  id: bigint
  share_price: numeric
  term_id: numeric
  total_assets: numeric
  total_shares: numeric
  transaction_hash: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "share_price_change"
"""
input share_price_changes_max_order_by {
  block_number: order_by
  block_timestamp: order_by
  curve_id: order_by
  id: order_by
  share_price: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
  transaction_hash: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type share_price_changes_min_fields {
  block_number: numeric
  block_timestamp: bigint
  curve_id: numeric
  id: bigint
  share_price: numeric
  term_id: numeric
  total_assets: numeric
  total_shares: numeric
  transaction_hash: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "share_price_change"
"""
input share_price_changes_min_order_by {
  block_number: order_by
  block_timestamp: order_by
  curve_id: order_by
  id: order_by
  share_price: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
  transaction_hash: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "share_price_change".
"""
input share_price_changes_order_by {
  block_number: order_by
  block_timestamp: order_by
  curve_id: order_by
  id: order_by
  share_price: order_by
  term: terms_order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
  transaction_hash: order_by
  updated_at: order_by
  vault: vaults_order_by
}

"""
select columns of table "share_price_change"
"""
enum share_price_changes_select_column {
  """
  column name
  """
  block_number
  """
  column name
  """
  block_timestamp
  """
  column name
  """
  curve_id
  """
  column name
  """
  id
  """
  column name
  """
  share_price
  """
  column name
  """
  term_id
  """
  column name
  """
  total_assets
  """
  column name
  """
  total_shares
  """
  column name
  """
  transaction_hash
  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type share_price_changes_stddev_fields {
  block_number: Float
  block_timestamp: Float
  curve_id: Float
  id: Float
  share_price: Float
  term_id: Float
  total_assets: Float
  total_shares: Float
}

"""
order by stddev() on columns of table "share_price_change"
"""
input share_price_changes_stddev_order_by {
  block_number: order_by
  block_timestamp: order_by
  curve_id: order_by
  id: order_by
  share_price: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
}

"""
aggregate stddev_pop on columns
"""
type share_price_changes_stddev_pop_fields {
  block_number: Float
  block_timestamp: Float
  curve_id: Float
  id: Float
  share_price: Float
  term_id: Float
  total_assets: Float
  total_shares: Float
}

"""
order by stddev_pop() on columns of table "share_price_change"
"""
input share_price_changes_stddev_pop_order_by {
  block_number: order_by
  block_timestamp: order_by
  curve_id: order_by
  id: order_by
  share_price: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
}

"""
aggregate stddev_samp on columns
"""
type share_price_changes_stddev_samp_fields {
  block_number: Float
  block_timestamp: Float
  curve_id: Float
  id: Float
  share_price: Float
  term_id: Float
  total_assets: Float
  total_shares: Float
}

"""
order by stddev_samp() on columns of table "share_price_change"
"""
input share_price_changes_stddev_samp_order_by {
  block_number: order_by
  block_timestamp: order_by
  curve_id: order_by
  id: order_by
  share_price: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
}

"""
Streaming cursor of the table "share_price_changes"
"""
input share_price_changes_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: share_price_changes_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input share_price_changes_stream_cursor_value_input {
  block_number: numeric
  block_timestamp: bigint
  curve_id: numeric
  id: bigint
  share_price: numeric
  term_id: numeric
  total_assets: numeric
  total_shares: numeric
  transaction_hash: String
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type share_price_changes_sum_fields {
  block_number: numeric
  block_timestamp: bigint
  curve_id: numeric
  id: bigint
  share_price: numeric
  term_id: numeric
  total_assets: numeric
  total_shares: numeric
}

"""
order by sum() on columns of table "share_price_change"
"""
input share_price_changes_sum_order_by {
  block_number: order_by
  block_timestamp: order_by
  curve_id: order_by
  id: order_by
  share_price: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
}

"""
aggregate var_pop on columns
"""
type share_price_changes_var_pop_fields {
  block_number: Float
  block_timestamp: Float
  curve_id: Float
  id: Float
  share_price: Float
  term_id: Float
  total_assets: Float
  total_shares: Float
}

"""
order by var_pop() on columns of table "share_price_change"
"""
input share_price_changes_var_pop_order_by {
  block_number: order_by
  block_timestamp: order_by
  curve_id: order_by
  id: order_by
  share_price: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
}

"""
aggregate var_samp on columns
"""
type share_price_changes_var_samp_fields {
  block_number: Float
  block_timestamp: Float
  curve_id: Float
  id: Float
  share_price: Float
  term_id: Float
  total_assets: Float
  total_shares: Float
}

"""
order by var_samp() on columns of table "share_price_change"
"""
input share_price_changes_var_samp_order_by {
  block_number: order_by
  block_timestamp: order_by
  curve_id: order_by
  id: order_by
  share_price: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
}

"""
aggregate variance on columns
"""
type share_price_changes_variance_fields {
  block_number: Float
  block_timestamp: Float
  curve_id: Float
  id: Float
  share_price: Float
  term_id: Float
  total_assets: Float
  total_shares: Float
}

"""
order by variance() on columns of table "share_price_change"
"""
input share_price_changes_variance_order_by {
  block_number: order_by
  block_timestamp: order_by
  curve_id: order_by
  id: order_by
  share_price: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
}

"""
columns and relationships of "signal_stats_daily"
"""
type signal_stats_daily {
  bucket: timestamptz
  count: numeric
  curve_id: numeric
  """
  An object relationship
  """
  term: terms
  term_id: numeric
  volume: numeric
}

"""
Boolean expression to filter rows from the table "signal_stats_daily". All fields are combined with a logical 'AND'.
"""
input signal_stats_daily_bool_exp {
  _and: [signal_stats_daily_bool_exp!]
  _not: signal_stats_daily_bool_exp
  _or: [signal_stats_daily_bool_exp!]
  bucket: timestamptz_comparison_exp
  count: numeric_comparison_exp
  curve_id: numeric_comparison_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
  volume: numeric_comparison_exp
}

"""
Ordering options when selecting data from "signal_stats_daily".
"""
input signal_stats_daily_order_by {
  bucket: order_by
  count: order_by
  curve_id: order_by
  term: terms_order_by
  term_id: order_by
  volume: order_by
}

"""
select columns of table "signal_stats_daily"
"""
enum signal_stats_daily_select_column {
  """
  column name
  """
  bucket
  """
  column name
  """
  count
  """
  column name
  """
  curve_id
  """
  column name
  """
  term_id
  """
  column name
  """
  volume
}

"""
Streaming cursor of the table "signal_stats_daily"
"""
input signal_stats_daily_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: signal_stats_daily_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input signal_stats_daily_stream_cursor_value_input {
  bucket: timestamptz
  count: numeric
  curve_id: numeric
  term_id: numeric
  volume: numeric
}

"""
columns and relationships of "signal_stats_hourly"
"""
type signal_stats_hourly {
  bucket: timestamptz
  count: bigint
  curve_id: numeric
  """
  An object relationship
  """
  term: terms
  term_id: numeric
  volume: numeric
}

"""
Boolean expression to filter rows from the table "signal_stats_hourly". All fields are combined with a logical 'AND'.
"""
input signal_stats_hourly_bool_exp {
  _and: [signal_stats_hourly_bool_exp!]
  _not: signal_stats_hourly_bool_exp
  _or: [signal_stats_hourly_bool_exp!]
  bucket: timestamptz_comparison_exp
  count: bigint_comparison_exp
  curve_id: numeric_comparison_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
  volume: numeric_comparison_exp
}

"""
Ordering options when selecting data from "signal_stats_hourly".
"""
input signal_stats_hourly_order_by {
  bucket: order_by
  count: order_by
  curve_id: order_by
  term: terms_order_by
  term_id: order_by
  volume: order_by
}

"""
select columns of table "signal_stats_hourly"
"""
enum signal_stats_hourly_select_column {
  """
  column name
  """
  bucket
  """
  column name
  """
  count
  """
  column name
  """
  curve_id
  """
  column name
  """
  term_id
  """
  column name
  """
  volume
}

"""
Streaming cursor of the table "signal_stats_hourly"
"""
input signal_stats_hourly_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: signal_stats_hourly_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input signal_stats_hourly_stream_cursor_value_input {
  bucket: timestamptz
  count: bigint
  curve_id: numeric
  term_id: numeric
  volume: numeric
}

"""
columns and relationships of "signal_stats_monthly"
"""
type signal_stats_monthly {
  bucket: timestamptz
  count: numeric
  curve_id: numeric
  """
  An object relationship
  """
  term: terms
  term_id: numeric
  volume: numeric
}

"""
Boolean expression to filter rows from the table "signal_stats_monthly". All fields are combined with a logical 'AND'.
"""
input signal_stats_monthly_bool_exp {
  _and: [signal_stats_monthly_bool_exp!]
  _not: signal_stats_monthly_bool_exp
  _or: [signal_stats_monthly_bool_exp!]
  bucket: timestamptz_comparison_exp
  count: numeric_comparison_exp
  curve_id: numeric_comparison_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
  volume: numeric_comparison_exp
}

"""
Ordering options when selecting data from "signal_stats_monthly".
"""
input signal_stats_monthly_order_by {
  bucket: order_by
  count: order_by
  curve_id: order_by
  term: terms_order_by
  term_id: order_by
  volume: order_by
}

"""
select columns of table "signal_stats_monthly"
"""
enum signal_stats_monthly_select_column {
  """
  column name
  """
  bucket
  """
  column name
  """
  count
  """
  column name
  """
  curve_id
  """
  column name
  """
  term_id
  """
  column name
  """
  volume
}

"""
Streaming cursor of the table "signal_stats_monthly"
"""
input signal_stats_monthly_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: signal_stats_monthly_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input signal_stats_monthly_stream_cursor_value_input {
  bucket: timestamptz
  count: numeric
  curve_id: numeric
  term_id: numeric
  volume: numeric
}

"""
columns and relationships of "signal_stats_weekly"
"""
type signal_stats_weekly {
  bucket: timestamptz
  count: numeric
  curve_id: numeric
  """
  An object relationship
  """
  term: terms
  term_id: numeric
  volume: numeric
}

"""
Boolean expression to filter rows from the table "signal_stats_weekly". All fields are combined with a logical 'AND'.
"""
input signal_stats_weekly_bool_exp {
  _and: [signal_stats_weekly_bool_exp!]
  _not: signal_stats_weekly_bool_exp
  _or: [signal_stats_weekly_bool_exp!]
  bucket: timestamptz_comparison_exp
  count: numeric_comparison_exp
  curve_id: numeric_comparison_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
  volume: numeric_comparison_exp
}

"""
Ordering options when selecting data from "signal_stats_weekly".
"""
input signal_stats_weekly_order_by {
  bucket: order_by
  count: order_by
  curve_id: order_by
  term: terms_order_by
  term_id: order_by
  volume: order_by
}

"""
select columns of table "signal_stats_weekly"
"""
enum signal_stats_weekly_select_column {
  """
  column name
  """
  bucket
  """
  column name
  """
  count
  """
  column name
  """
  curve_id
  """
  column name
  """
  term_id
  """
  column name
  """
  volume
}

"""
Streaming cursor of the table "signal_stats_weekly"
"""
input signal_stats_weekly_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: signal_stats_weekly_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input signal_stats_weekly_stream_cursor_value_input {
  bucket: timestamptz
  count: numeric
  curve_id: numeric
  term_id: numeric
  volume: numeric
}

"""
columns and relationships of "signal"
"""
type signals {
  """
  An object relationship
  """
  account: accounts
  account_id: String!
  atom_id: numeric
  block_number: numeric!
  created_at: timestamptz!
  delta: numeric!
  """
  An object relationship
  """
  deposit: deposits
  deposit_id: String
  id: String!
  """
  An object relationship
  """
  redemption: redemptions
  redemption_id: String
  """
  An object relationship
  """
  term: terms!
  transaction_hash: String!
  triple_id: numeric
  """
  An object relationship
  """
  vault: vaults
}

"""
aggregated selection of "signal"
"""
type signals_aggregate {
  aggregate: signals_aggregate_fields
  nodes: [signals!]!
}

input signals_aggregate_bool_exp {
  count: signals_aggregate_bool_exp_count
}

input signals_aggregate_bool_exp_count {
  arguments: [signals_select_column!]
  distinct: Boolean
  filter: signals_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "signal"
"""
type signals_aggregate_fields {
  avg: signals_avg_fields
  count(columns: [signals_select_column!], distinct: Boolean): Int!
  max: signals_max_fields
  min: signals_min_fields
  stddev: signals_stddev_fields
  stddev_pop: signals_stddev_pop_fields
  stddev_samp: signals_stddev_samp_fields
  sum: signals_sum_fields
  var_pop: signals_var_pop_fields
  var_samp: signals_var_samp_fields
  variance: signals_variance_fields
}

"""
order by aggregate values of table "signal"
"""
input signals_aggregate_order_by {
  avg: signals_avg_order_by
  count: order_by
  max: signals_max_order_by
  min: signals_min_order_by
  stddev: signals_stddev_order_by
  stddev_pop: signals_stddev_pop_order_by
  stddev_samp: signals_stddev_samp_order_by
  sum: signals_sum_order_by
  var_pop: signals_var_pop_order_by
  var_samp: signals_var_samp_order_by
  variance: signals_variance_order_by
}

"""
aggregate avg on columns
"""
type signals_avg_fields {
  atom_id: Float
  block_number: Float
  delta: Float
  triple_id: Float
}

"""
order by avg() on columns of table "signal"
"""
input signals_avg_order_by {
  atom_id: order_by
  block_number: order_by
  delta: order_by
  triple_id: order_by
}

"""
Boolean expression to filter rows from the table "signal". All fields are combined with a logical 'AND'.
"""
input signals_bool_exp {
  _and: [signals_bool_exp!]
  _not: signals_bool_exp
  _or: [signals_bool_exp!]
  account: accounts_bool_exp
  account_id: String_comparison_exp
  atom_id: numeric_comparison_exp
  block_number: numeric_comparison_exp
  created_at: timestamptz_comparison_exp
  delta: numeric_comparison_exp
  deposit: deposits_bool_exp
  deposit_id: String_comparison_exp
  id: String_comparison_exp
  redemption: redemptions_bool_exp
  redemption_id: String_comparison_exp
  term: terms_bool_exp
  transaction_hash: String_comparison_exp
  triple_id: numeric_comparison_exp
  vault: vaults_bool_exp
}

input signals_from_following_args {
  address: String
}

"""
aggregate max on columns
"""
type signals_max_fields {
  account_id: String
  atom_id: numeric
  block_number: numeric
  created_at: timestamptz
  delta: numeric
  deposit_id: String
  id: String
  redemption_id: String
  transaction_hash: String
  triple_id: numeric
}

"""
order by max() on columns of table "signal"
"""
input signals_max_order_by {
  account_id: order_by
  atom_id: order_by
  block_number: order_by
  created_at: order_by
  delta: order_by
  deposit_id: order_by
  id: order_by
  redemption_id: order_by
  transaction_hash: order_by
  triple_id: order_by
}

"""
aggregate min on columns
"""
type signals_min_fields {
  account_id: String
  atom_id: numeric
  block_number: numeric
  created_at: timestamptz
  delta: numeric
  deposit_id: String
  id: String
  redemption_id: String
  transaction_hash: String
  triple_id: numeric
}

"""
order by min() on columns of table "signal"
"""
input signals_min_order_by {
  account_id: order_by
  atom_id: order_by
  block_number: order_by
  created_at: order_by
  delta: order_by
  deposit_id: order_by
  id: order_by
  redemption_id: order_by
  transaction_hash: order_by
  triple_id: order_by
}

"""
Ordering options when selecting data from "signal".
"""
input signals_order_by {
  account: accounts_order_by
  account_id: order_by
  atom_id: order_by
  block_number: order_by
  created_at: order_by
  delta: order_by
  deposit: deposits_order_by
  deposit_id: order_by
  id: order_by
  redemption: redemptions_order_by
  redemption_id: order_by
  term: terms_order_by
  transaction_hash: order_by
  triple_id: order_by
  vault: vaults_order_by
}

"""
select columns of table "signal"
"""
enum signals_select_column {
  """
  column name
  """
  account_id
  """
  column name
  """
  atom_id
  """
  column name
  """
  block_number
  """
  column name
  """
  created_at
  """
  column name
  """
  delta
  """
  column name
  """
  deposit_id
  """
  column name
  """
  id
  """
  column name
  """
  redemption_id
  """
  column name
  """
  transaction_hash
  """
  column name
  """
  triple_id
}

"""
aggregate stddev on columns
"""
type signals_stddev_fields {
  atom_id: Float
  block_number: Float
  delta: Float
  triple_id: Float
}

"""
order by stddev() on columns of table "signal"
"""
input signals_stddev_order_by {
  atom_id: order_by
  block_number: order_by
  delta: order_by
  triple_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type signals_stddev_pop_fields {
  atom_id: Float
  block_number: Float
  delta: Float
  triple_id: Float
}

"""
order by stddev_pop() on columns of table "signal"
"""
input signals_stddev_pop_order_by {
  atom_id: order_by
  block_number: order_by
  delta: order_by
  triple_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type signals_stddev_samp_fields {
  atom_id: Float
  block_number: Float
  delta: Float
  triple_id: Float
}

"""
order by stddev_samp() on columns of table "signal"
"""
input signals_stddev_samp_order_by {
  atom_id: order_by
  block_number: order_by
  delta: order_by
  triple_id: order_by
}

"""
Streaming cursor of the table "signals"
"""
input signals_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: signals_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input signals_stream_cursor_value_input {
  account_id: String
  atom_id: numeric
  block_number: numeric
  created_at: timestamptz
  delta: numeric
  deposit_id: String
  id: String
  redemption_id: String
  transaction_hash: String
  triple_id: numeric
}

"""
aggregate sum on columns
"""
type signals_sum_fields {
  atom_id: numeric
  block_number: numeric
  delta: numeric
  triple_id: numeric
}

"""
order by sum() on columns of table "signal"
"""
input signals_sum_order_by {
  atom_id: order_by
  block_number: order_by
  delta: order_by
  triple_id: order_by
}

"""
aggregate var_pop on columns
"""
type signals_var_pop_fields {
  atom_id: Float
  block_number: Float
  delta: Float
  triple_id: Float
}

"""
order by var_pop() on columns of table "signal"
"""
input signals_var_pop_order_by {
  atom_id: order_by
  block_number: order_by
  delta: order_by
  triple_id: order_by
}

"""
aggregate var_samp on columns
"""
type signals_var_samp_fields {
  atom_id: Float
  block_number: Float
  delta: Float
  triple_id: Float
}

"""
order by var_samp() on columns of table "signal"
"""
input signals_var_samp_order_by {
  atom_id: order_by
  block_number: order_by
  delta: order_by
  triple_id: order_by
}

"""
aggregate variance on columns
"""
type signals_variance_fields {
  atom_id: Float
  block_number: Float
  delta: Float
  triple_id: Float
}

"""
order by variance() on columns of table "signal"
"""
input signals_variance_order_by {
  atom_id: order_by
  block_number: order_by
  delta: order_by
  triple_id: order_by
}

"""
columns and relationships of "stats"
"""
type stats {
  contract_balance: numeric
  id: Int!
  total_accounts: Int
  total_atoms: Int
  total_fees: numeric
  total_positions: Int
  total_signals: Int
  total_triples: Int
}

"""
aggregated selection of "stats"
"""
type stats_aggregate {
  aggregate: stats_aggregate_fields
  nodes: [stats!]!
}

"""
aggregate fields of "stats"
"""
type stats_aggregate_fields {
  avg: stats_avg_fields
  count(columns: [stats_select_column!], distinct: Boolean): Int!
  max: stats_max_fields
  min: stats_min_fields
  stddev: stats_stddev_fields
  stddev_pop: stats_stddev_pop_fields
  stddev_samp: stats_stddev_samp_fields
  sum: stats_sum_fields
  var_pop: stats_var_pop_fields
  var_samp: stats_var_samp_fields
  variance: stats_variance_fields
}

"""
aggregate avg on columns
"""
type stats_avg_fields {
  contract_balance: Float
  id: Float
  total_accounts: Float
  total_atoms: Float
  total_fees: Float
  total_positions: Float
  total_signals: Float
  total_triples: Float
}

"""
Boolean expression to filter rows from the table "stats". All fields are combined with a logical 'AND'.
"""
input stats_bool_exp {
  _and: [stats_bool_exp!]
  _not: stats_bool_exp
  _or: [stats_bool_exp!]
  contract_balance: numeric_comparison_exp
  id: Int_comparison_exp
  total_accounts: Int_comparison_exp
  total_atoms: Int_comparison_exp
  total_fees: numeric_comparison_exp
  total_positions: Int_comparison_exp
  total_signals: Int_comparison_exp
  total_triples: Int_comparison_exp
}

"""
aggregate max on columns
"""
type stats_max_fields {
  contract_balance: numeric
  id: Int
  total_accounts: Int
  total_atoms: Int
  total_fees: numeric
  total_positions: Int
  total_signals: Int
  total_triples: Int
}

"""
aggregate min on columns
"""
type stats_min_fields {
  contract_balance: numeric
  id: Int
  total_accounts: Int
  total_atoms: Int
  total_fees: numeric
  total_positions: Int
  total_signals: Int
  total_triples: Int
}

"""
Ordering options when selecting data from "stats".
"""
input stats_order_by {
  contract_balance: order_by
  id: order_by
  total_accounts: order_by
  total_atoms: order_by
  total_fees: order_by
  total_positions: order_by
  total_signals: order_by
  total_triples: order_by
}

"""
select columns of table "stats"
"""
enum stats_select_column {
  """
  column name
  """
  contract_balance
  """
  column name
  """
  id
  """
  column name
  """
  total_accounts
  """
  column name
  """
  total_atoms
  """
  column name
  """
  total_fees
  """
  column name
  """
  total_positions
  """
  column name
  """
  total_signals
  """
  column name
  """
  total_triples
}

"""
aggregate stddev on columns
"""
type stats_stddev_fields {
  contract_balance: Float
  id: Float
  total_accounts: Float
  total_atoms: Float
  total_fees: Float
  total_positions: Float
  total_signals: Float
  total_triples: Float
}

"""
aggregate stddev_pop on columns
"""
type stats_stddev_pop_fields {
  contract_balance: Float
  id: Float
  total_accounts: Float
  total_atoms: Float
  total_fees: Float
  total_positions: Float
  total_signals: Float
  total_triples: Float
}

"""
aggregate stddev_samp on columns
"""
type stats_stddev_samp_fields {
  contract_balance: Float
  id: Float
  total_accounts: Float
  total_atoms: Float
  total_fees: Float
  total_positions: Float
  total_signals: Float
  total_triples: Float
}

"""
Streaming cursor of the table "stats"
"""
input stats_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: stats_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input stats_stream_cursor_value_input {
  contract_balance: numeric
  id: Int
  total_accounts: Int
  total_atoms: Int
  total_fees: numeric
  total_positions: Int
  total_signals: Int
  total_triples: Int
}

"""
aggregate sum on columns
"""
type stats_sum_fields {
  contract_balance: numeric
  id: Int
  total_accounts: Int
  total_atoms: Int
  total_fees: numeric
  total_positions: Int
  total_signals: Int
  total_triples: Int
}

"""
aggregate var_pop on columns
"""
type stats_var_pop_fields {
  contract_balance: Float
  id: Float
  total_accounts: Float
  total_atoms: Float
  total_fees: Float
  total_positions: Float
  total_signals: Float
  total_triples: Float
}

"""
aggregate var_samp on columns
"""
type stats_var_samp_fields {
  contract_balance: Float
  id: Float
  total_accounts: Float
  total_atoms: Float
  total_fees: Float
  total_positions: Float
  total_signals: Float
  total_triples: Float
}

"""
aggregate variance on columns
"""
type stats_variance_fields {
  contract_balance: Float
  id: Float
  total_accounts: Float
  total_atoms: Float
  total_fees: Float
  total_positions: Float
  total_signals: Float
  total_triples: Float
}

type subscription_root {
  """
  fetch data from the table: "account" using primary key columns
  """
  account(id: String!): accounts
  """
  An array relationship
  """
  accounts(
    """
    distinct select on columns
    """
    distinct_on: [accounts_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [accounts_order_by!]
    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): [accounts!]!
  """
  An aggregate relationship
  """
  accounts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [accounts_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [accounts_order_by!]
    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): accounts_aggregate!
  """
  fetch data from the table in a streaming manner: "account"
  """
  accounts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [accounts_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): [accounts!]!
  """
  fetch data from the table: "atom" using primary key columns
  """
  atom(term_id: numeric!): atoms
  """
  fetch data from the table: "atom_value" using primary key columns
  """
  atom_value(id: numeric!): atom_values
  """
  fetch data from the table: "atom_value"
  """
  atom_values(
    """
    distinct select on columns
    """
    distinct_on: [atom_values_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [atom_values_order_by!]
    """
    filter the rows returned
    """
    where: atom_values_bool_exp
  ): [atom_values!]!
  """
  fetch aggregated fields from the table: "atom_value"
  """
  atom_values_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [atom_values_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [atom_values_order_by!]
    """
    filter the rows returned
    """
    where: atom_values_bool_exp
  ): atom_values_aggregate!
  """
  fetch data from the table in a streaming manner: "atom_value"
  """
  atom_values_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [atom_values_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: atom_values_bool_exp
  ): [atom_values!]!
  """
  An array relationship
  """
  atoms(
    """
    distinct select on columns
    """
    distinct_on: [atoms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [atoms_order_by!]
    """
    filter the rows returned
    """
    where: atoms_bool_exp
  ): [atoms!]!
  """
  An aggregate relationship
  """
  atoms_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [atoms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [atoms_order_by!]
    """
    filter the rows returned
    """
    where: atoms_bool_exp
  ): atoms_aggregate!
  """
  fetch data from the table in a streaming manner: "atom"
  """
  atoms_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [atoms_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: atoms_bool_exp
  ): [atoms!]!
  """
  fetch data from the table: "book" using primary key columns
  """
  book(id: numeric!): books
  """
  fetch data from the table: "book"
  """
  books(
    """
    distinct select on columns
    """
    distinct_on: [books_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [books_order_by!]
    """
    filter the rows returned
    """
    where: books_bool_exp
  ): [books!]!
  """
  fetch aggregated fields from the table: "book"
  """
  books_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [books_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [books_order_by!]
    """
    filter the rows returned
    """
    where: books_bool_exp
  ): books_aggregate!
  """
  fetch data from the table in a streaming manner: "book"
  """
  books_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [books_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: books_bool_exp
  ): [books!]!
  """
  fetch data from the table: "byte_object"
  """
  byte_object(
    """
    distinct select on columns
    """
    distinct_on: [byte_object_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [byte_object_order_by!]
    """
    filter the rows returned
    """
    where: byte_object_bool_exp
  ): [byte_object!]!
  """
  fetch aggregated fields from the table: "byte_object"
  """
  byte_object_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [byte_object_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [byte_object_order_by!]
    """
    filter the rows returned
    """
    where: byte_object_bool_exp
  ): byte_object_aggregate!
  """
  fetch data from the table: "byte_object" using primary key columns
  """
  byte_object_by_pk(id: numeric!): byte_object
  """
  fetch data from the table in a streaming manner: "byte_object"
  """
  byte_object_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [byte_object_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: byte_object_bool_exp
  ): [byte_object!]!
  """
  fetch data from the table: "cached_images.cached_image"
  """
  cached_images_cached_image(
    """
    distinct select on columns
    """
    distinct_on: [cached_images_cached_image_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [cached_images_cached_image_order_by!]
    """
    filter the rows returned
    """
    where: cached_images_cached_image_bool_exp
  ): [cached_images_cached_image!]!
  """
  fetch data from the table: "cached_images.cached_image" using primary key columns
  """
  cached_images_cached_image_by_pk(url: String!): cached_images_cached_image
  """
  fetch data from the table in a streaming manner: "cached_images.cached_image"
  """
  cached_images_cached_image_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [cached_images_cached_image_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: cached_images_cached_image_bool_exp
  ): [cached_images_cached_image!]!
  """
  fetch data from the table: "caip10" using primary key columns
  """
  caip10(id: numeric!): caip10
  """
  fetch aggregated fields from the table: "caip10"
  """
  caip10_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [caip10_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [caip10_order_by!]
    """
    filter the rows returned
    """
    where: caip10_bool_exp
  ): caip10_aggregate!
  """
  fetch data from the table in a streaming manner: "caip10"
  """
  caip10_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [caip10_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: caip10_bool_exp
  ): [caip10!]!
  """
  fetch data from the table: "caip10"
  """
  caip10s(
    """
    distinct select on columns
    """
    distinct_on: [caip10_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [caip10_order_by!]
    """
    filter the rows returned
    """
    where: caip10_bool_exp
  ): [caip10!]!
  """
  fetch data from the table: "chainlink_price" using primary key columns
  """
  chainlink_price(id: numeric!): chainlink_prices
  """
  fetch data from the table: "chainlink_price"
  """
  chainlink_prices(
    """
    distinct select on columns
    """
    distinct_on: [chainlink_prices_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [chainlink_prices_order_by!]
    """
    filter the rows returned
    """
    where: chainlink_prices_bool_exp
  ): [chainlink_prices!]!
  """
  fetch data from the table in a streaming manner: "chainlink_price"
  """
  chainlink_prices_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [chainlink_prices_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: chainlink_prices_bool_exp
  ): [chainlink_prices!]!
  """
  fetch data from the table: "deposit" using primary key columns
  """
  deposit(id: String!): deposits
  """
  An array relationship
  """
  deposits(
    """
    distinct select on columns
    """
    distinct_on: [deposits_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [deposits_order_by!]
    """
    filter the rows returned
    """
    where: deposits_bool_exp
  ): [deposits!]!
  """
  An aggregate relationship
  """
  deposits_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [deposits_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [deposits_order_by!]
    """
    filter the rows returned
    """
    where: deposits_bool_exp
  ): deposits_aggregate!
  """
  fetch data from the table in a streaming manner: "deposit"
  """
  deposits_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [deposits_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: deposits_bool_exp
  ): [deposits!]!
  """
  fetch data from the table: "event" using primary key columns
  """
  event(id: String!): events
  """
  fetch data from the table: "event"
  """
  events(
    """
    distinct select on columns
    """
    distinct_on: [events_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [events_order_by!]
    """
    filter the rows returned
    """
    where: events_bool_exp
  ): [events!]!
  """
  fetch aggregated fields from the table: "event"
  """
  events_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [events_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [events_order_by!]
    """
    filter the rows returned
    """
    where: events_bool_exp
  ): events_aggregate!
  """
  fetch data from the table in a streaming manner: "event"
  """
  events_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [events_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: events_bool_exp
  ): [events!]!
  """
  fetch data from the table: "fee_transfer" using primary key columns
  """
  fee_transfer(id: String!): fee_transfers
  """
  An array relationship
  """
  fee_transfers(
    """
    distinct select on columns
    """
    distinct_on: [fee_transfers_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [fee_transfers_order_by!]
    """
    filter the rows returned
    """
    where: fee_transfers_bool_exp
  ): [fee_transfers!]!
  """
  An aggregate relationship
  """
  fee_transfers_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [fee_transfers_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [fee_transfers_order_by!]
    """
    filter the rows returned
    """
    where: fee_transfers_bool_exp
  ): fee_transfers_aggregate!
  """
  fetch data from the table in a streaming manner: "fee_transfer"
  """
  fee_transfers_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [fee_transfers_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: fee_transfers_bool_exp
  ): [fee_transfers!]!
  """
  execute function "following" which returns "account"
  """
  following(
    """
    input parameters for function "following"
    """
    args: following_args!
    """
    distinct select on columns
    """
    distinct_on: [accounts_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [accounts_order_by!]
    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): [accounts!]!
  """
  execute function "following" and query aggregates on result of table type "account"
  """
  following_aggregate(
    """
    input parameters for function "following_aggregate"
    """
    args: following_args!
    """
    distinct select on columns
    """
    distinct_on: [accounts_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [accounts_order_by!]
    """
    filter the rows returned
    """
    where: accounts_bool_exp
  ): accounts_aggregate!
  """
  fetch data from the table: "json_object" using primary key columns
  """
  json_object(id: numeric!): json_objects
  """
  fetch data from the table: "json_object"
  """
  json_objects(
    """
    distinct select on columns
    """
    distinct_on: [json_objects_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [json_objects_order_by!]
    """
    filter the rows returned
    """
    where: json_objects_bool_exp
  ): [json_objects!]!
  """
  fetch aggregated fields from the table: "json_object"
  """
  json_objects_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [json_objects_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [json_objects_order_by!]
    """
    filter the rows returned
    """
    where: json_objects_bool_exp
  ): json_objects_aggregate!
  """
  fetch data from the table in a streaming manner: "json_object"
  """
  json_objects_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [json_objects_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: json_objects_bool_exp
  ): [json_objects!]!
  """
  fetch data from the table: "organization" using primary key columns
  """
  organization(id: numeric!): organizations
  """
  fetch data from the table: "organization"
  """
  organizations(
    """
    distinct select on columns
    """
    distinct_on: [organizations_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [organizations_order_by!]
    """
    filter the rows returned
    """
    where: organizations_bool_exp
  ): [organizations!]!
  """
  fetch aggregated fields from the table: "organization"
  """
  organizations_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [organizations_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [organizations_order_by!]
    """
    filter the rows returned
    """
    where: organizations_bool_exp
  ): organizations_aggregate!
  """
  fetch data from the table in a streaming manner: "organization"
  """
  organizations_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [organizations_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: organizations_bool_exp
  ): [organizations!]!
  """
  fetch data from the table: "person" using primary key columns
  """
  person(id: numeric!): persons
  """
  fetch data from the table: "person"
  """
  persons(
    """
    distinct select on columns
    """
    distinct_on: [persons_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [persons_order_by!]
    """
    filter the rows returned
    """
    where: persons_bool_exp
  ): [persons!]!
  """
  fetch aggregated fields from the table: "person"
  """
  persons_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [persons_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [persons_order_by!]
    """
    filter the rows returned
    """
    where: persons_bool_exp
  ): persons_aggregate!
  """
  fetch data from the table in a streaming manner: "person"
  """
  persons_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [persons_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: persons_bool_exp
  ): [persons!]!
  """
  fetch data from the table: "position" using primary key columns
  """
  position(id: String!): positions
  """
  An array relationship
  """
  positions(
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): [positions!]!
  """
  An aggregate relationship
  """
  positions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): positions_aggregate!
  """
  execute function "positions_from_following" which returns "position"
  """
  positions_from_following(
    """
    input parameters for function "positions_from_following"
    """
    args: positions_from_following_args!
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): [positions!]!
  """
  execute function "positions_from_following" and query aggregates on result of table type "position"
  """
  positions_from_following_aggregate(
    """
    input parameters for function "positions_from_following_aggregate"
    """
    args: positions_from_following_args!
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): positions_aggregate!
  """
  fetch data from the table in a streaming manner: "position"
  """
  positions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [positions_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): [positions!]!
  """
  fetch data from the table: "predicate_object"
  """
  predicate_objects(
    """
    distinct select on columns
    """
    distinct_on: [predicate_objects_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [predicate_objects_order_by!]
    """
    filter the rows returned
    """
    where: predicate_objects_bool_exp
  ): [predicate_objects!]!
  """
  fetch aggregated fields from the table: "predicate_object"
  """
  predicate_objects_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [predicate_objects_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [predicate_objects_order_by!]
    """
    filter the rows returned
    """
    where: predicate_objects_bool_exp
  ): predicate_objects_aggregate!
  """
  fetch data from the table: "predicate_object" using primary key columns
  """
  predicate_objects_by_pk(id: String!): predicate_objects
  """
  fetch data from the table in a streaming manner: "predicate_object"
  """
  predicate_objects_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [predicate_objects_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: predicate_objects_bool_exp
  ): [predicate_objects!]!
  """
  fetch data from the table: "redemption" using primary key columns
  """
  redemption(id: String!): redemptions
  """
  An array relationship
  """
  redemptions(
    """
    distinct select on columns
    """
    distinct_on: [redemptions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [redemptions_order_by!]
    """
    filter the rows returned
    """
    where: redemptions_bool_exp
  ): [redemptions!]!
  """
  An aggregate relationship
  """
  redemptions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [redemptions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [redemptions_order_by!]
    """
    filter the rows returned
    """
    where: redemptions_bool_exp
  ): redemptions_aggregate!
  """
  fetch data from the table in a streaming manner: "redemption"
  """
  redemptions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [redemptions_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: redemptions_bool_exp
  ): [redemptions!]!
  """
  execute function "search_positions_on_subject" which returns "position"
  """
  search_positions_on_subject(
    """
    input parameters for function "search_positions_on_subject"
    """
    args: search_positions_on_subject_args!
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): [positions!]!
  """
  execute function "search_positions_on_subject" and query aggregates on result of table type "position"
  """
  search_positions_on_subject_aggregate(
    """
    input parameters for function "search_positions_on_subject_aggregate"
    """
    args: search_positions_on_subject_args!
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): positions_aggregate!
  """
  execute function "search_term" which returns "term"
  """
  search_term(
    """
    input parameters for function "search_term"
    """
    args: search_term_args!
    """
    distinct select on columns
    """
    distinct_on: [terms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [terms_order_by!]
    """
    filter the rows returned
    """
    where: terms_bool_exp
  ): [terms!]!
  """
  execute function "search_term" and query aggregates on result of table type "term"
  """
  search_term_aggregate(
    """
    input parameters for function "search_term_aggregate"
    """
    args: search_term_args!
    """
    distinct select on columns
    """
    distinct_on: [terms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [terms_order_by!]
    """
    filter the rows returned
    """
    where: terms_bool_exp
  ): terms_aggregate!
  """
  execute function "search_term_from_following" which returns "term"
  """
  search_term_from_following(
    """
    input parameters for function "search_term_from_following"
    """
    args: search_term_from_following_args!
    """
    distinct select on columns
    """
    distinct_on: [terms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [terms_order_by!]
    """
    filter the rows returned
    """
    where: terms_bool_exp
  ): [terms!]!
  """
  execute function "search_term_from_following" and query aggregates on result of table type "term"
  """
  search_term_from_following_aggregate(
    """
    input parameters for function "search_term_from_following_aggregate"
    """
    args: search_term_from_following_args!
    """
    distinct select on columns
    """
    distinct_on: [terms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [terms_order_by!]
    """
    filter the rows returned
    """
    where: terms_bool_exp
  ): terms_aggregate!
  """
  An array relationship
  """
  share_price_change_stats_daily(
    """
    distinct select on columns
    """
    distinct_on: [share_price_change_stats_daily_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_change_stats_daily_order_by!]
    """
    filter the rows returned
    """
    where: share_price_change_stats_daily_bool_exp
  ): [share_price_change_stats_daily!]!
  """
  fetch data from the table in a streaming manner: "share_price_change_stats_daily"
  """
  share_price_change_stats_daily_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [share_price_change_stats_daily_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: share_price_change_stats_daily_bool_exp
  ): [share_price_change_stats_daily!]!
  """
  An array relationship
  """
  share_price_change_stats_hourly(
    """
    distinct select on columns
    """
    distinct_on: [share_price_change_stats_hourly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_change_stats_hourly_order_by!]
    """
    filter the rows returned
    """
    where: share_price_change_stats_hourly_bool_exp
  ): [share_price_change_stats_hourly!]!
  """
  fetch data from the table in a streaming manner: "share_price_change_stats_hourly"
  """
  share_price_change_stats_hourly_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [share_price_change_stats_hourly_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: share_price_change_stats_hourly_bool_exp
  ): [share_price_change_stats_hourly!]!
  """
  An array relationship
  """
  share_price_change_stats_monthly(
    """
    distinct select on columns
    """
    distinct_on: [share_price_change_stats_monthly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_change_stats_monthly_order_by!]
    """
    filter the rows returned
    """
    where: share_price_change_stats_monthly_bool_exp
  ): [share_price_change_stats_monthly!]!
  """
  fetch data from the table in a streaming manner: "share_price_change_stats_monthly"
  """
  share_price_change_stats_monthly_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [share_price_change_stats_monthly_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: share_price_change_stats_monthly_bool_exp
  ): [share_price_change_stats_monthly!]!
  """
  An array relationship
  """
  share_price_change_stats_weekly(
    """
    distinct select on columns
    """
    distinct_on: [share_price_change_stats_weekly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_change_stats_weekly_order_by!]
    """
    filter the rows returned
    """
    where: share_price_change_stats_weekly_bool_exp
  ): [share_price_change_stats_weekly!]!
  """
  fetch data from the table in a streaming manner: "share_price_change_stats_weekly"
  """
  share_price_change_stats_weekly_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [share_price_change_stats_weekly_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: share_price_change_stats_weekly_bool_exp
  ): [share_price_change_stats_weekly!]!
  """
  An array relationship
  """
  share_price_changes(
    """
    distinct select on columns
    """
    distinct_on: [share_price_changes_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_changes_order_by!]
    """
    filter the rows returned
    """
    where: share_price_changes_bool_exp
  ): [share_price_changes!]!
  """
  An aggregate relationship
  """
  share_price_changes_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [share_price_changes_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_changes_order_by!]
    """
    filter the rows returned
    """
    where: share_price_changes_bool_exp
  ): share_price_changes_aggregate!
  """
  fetch data from the table in a streaming manner: "share_price_change"
  """
  share_price_changes_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [share_price_changes_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: share_price_changes_bool_exp
  ): [share_price_changes!]!
  """
  fetch data from the table: "signal_stats_daily"
  """
  signal_stats_daily(
    """
    distinct select on columns
    """
    distinct_on: [signal_stats_daily_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signal_stats_daily_order_by!]
    """
    filter the rows returned
    """
    where: signal_stats_daily_bool_exp
  ): [signal_stats_daily!]!
  """
  fetch data from the table in a streaming manner: "signal_stats_daily"
  """
  signal_stats_daily_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [signal_stats_daily_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: signal_stats_daily_bool_exp
  ): [signal_stats_daily!]!
  """
  fetch data from the table: "signal_stats_hourly"
  """
  signal_stats_hourly(
    """
    distinct select on columns
    """
    distinct_on: [signal_stats_hourly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signal_stats_hourly_order_by!]
    """
    filter the rows returned
    """
    where: signal_stats_hourly_bool_exp
  ): [signal_stats_hourly!]!
  """
  fetch data from the table in a streaming manner: "signal_stats_hourly"
  """
  signal_stats_hourly_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [signal_stats_hourly_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: signal_stats_hourly_bool_exp
  ): [signal_stats_hourly!]!
  """
  fetch data from the table: "signal_stats_monthly"
  """
  signal_stats_monthly(
    """
    distinct select on columns
    """
    distinct_on: [signal_stats_monthly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signal_stats_monthly_order_by!]
    """
    filter the rows returned
    """
    where: signal_stats_monthly_bool_exp
  ): [signal_stats_monthly!]!
  """
  fetch data from the table in a streaming manner: "signal_stats_monthly"
  """
  signal_stats_monthly_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [signal_stats_monthly_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: signal_stats_monthly_bool_exp
  ): [signal_stats_monthly!]!
  """
  fetch data from the table: "signal_stats_weekly"
  """
  signal_stats_weekly(
    """
    distinct select on columns
    """
    distinct_on: [signal_stats_weekly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signal_stats_weekly_order_by!]
    """
    filter the rows returned
    """
    where: signal_stats_weekly_bool_exp
  ): [signal_stats_weekly!]!
  """
  fetch data from the table in a streaming manner: "signal_stats_weekly"
  """
  signal_stats_weekly_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [signal_stats_weekly_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: signal_stats_weekly_bool_exp
  ): [signal_stats_weekly!]!
  """
  An array relationship
  """
  signals(
    """
    distinct select on columns
    """
    distinct_on: [signals_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signals_order_by!]
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): [signals!]!
  """
  An aggregate relationship
  """
  signals_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [signals_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signals_order_by!]
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): signals_aggregate!
  """
  execute function "signals_from_following" which returns "signal"
  """
  signals_from_following(
    """
    input parameters for function "signals_from_following"
    """
    args: signals_from_following_args!
    """
    distinct select on columns
    """
    distinct_on: [signals_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signals_order_by!]
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): [signals!]!
  """
  execute function "signals_from_following" and query aggregates on result of table type "signal"
  """
  signals_from_following_aggregate(
    """
    input parameters for function "signals_from_following_aggregate"
    """
    args: signals_from_following_args!
    """
    distinct select on columns
    """
    distinct_on: [signals_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signals_order_by!]
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): signals_aggregate!
  """
  fetch data from the table in a streaming manner: "signal"
  """
  signals_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [signals_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): [signals!]!
  """
  fetch data from the table: "stats" using primary key columns
  """
  stat(id: Int!): stats
  """
  fetch data from the table: "stats"
  """
  stats(
    """
    distinct select on columns
    """
    distinct_on: [stats_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [stats_order_by!]
    """
    filter the rows returned
    """
    where: stats_bool_exp
  ): [stats!]!
  """
  fetch aggregated fields from the table: "stats"
  """
  stats_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [stats_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [stats_order_by!]
    """
    filter the rows returned
    """
    where: stats_bool_exp
  ): stats_aggregate!
  """
  fetch data from the table in a streaming manner: "stats"
  """
  stats_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [stats_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: stats_bool_exp
  ): [stats!]!
  """
  fetch data from the table: "term" using primary key columns
  """
  term(id: numeric!): terms
  """
  fetch data from the table: "term"
  """
  terms(
    """
    distinct select on columns
    """
    distinct_on: [terms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [terms_order_by!]
    """
    filter the rows returned
    """
    where: terms_bool_exp
  ): [terms!]!
  """
  fetch aggregated fields from the table: "term"
  """
  terms_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [terms_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [terms_order_by!]
    """
    filter the rows returned
    """
    where: terms_bool_exp
  ): terms_aggregate!
  """
  fetch data from the table in a streaming manner: "term"
  """
  terms_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [terms_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: terms_bool_exp
  ): [terms!]!
  """
  fetch data from the table: "text_object" using primary key columns
  """
  text_object(id: numeric!): text_objects
  """
  fetch data from the table: "text_object"
  """
  text_objects(
    """
    distinct select on columns
    """
    distinct_on: [text_objects_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [text_objects_order_by!]
    """
    filter the rows returned
    """
    where: text_objects_bool_exp
  ): [text_objects!]!
  """
  fetch aggregated fields from the table: "text_object"
  """
  text_objects_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [text_objects_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [text_objects_order_by!]
    """
    filter the rows returned
    """
    where: text_objects_bool_exp
  ): text_objects_aggregate!
  """
  fetch data from the table in a streaming manner: "text_object"
  """
  text_objects_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [text_objects_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: text_objects_bool_exp
  ): [text_objects!]!
  """
  fetch data from the table: "thing" using primary key columns
  """
  thing(id: numeric!): things
  """
  fetch data from the table: "thing"
  """
  things(
    """
    distinct select on columns
    """
    distinct_on: [things_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [things_order_by!]
    """
    filter the rows returned
    """
    where: things_bool_exp
  ): [things!]!
  """
  fetch aggregated fields from the table: "thing"
  """
  things_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [things_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [things_order_by!]
    """
    filter the rows returned
    """
    where: things_bool_exp
  ): things_aggregate!
  """
  fetch data from the table in a streaming manner: "thing"
  """
  things_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [things_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: things_bool_exp
  ): [things!]!
  """
  fetch data from the table: "triple" using primary key columns
  """
  triple(term_id: numeric!): triples
  """
  fetch data from the table: "triple_term" using primary key columns
  """
  triple_term(term_id: numeric!): triple_term
  """
  fetch data from the table in a streaming manner: "triple_term"
  """
  triple_term_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [triple_term_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: triple_term_bool_exp
  ): [triple_term!]!
  """
  fetch data from the table: "triple_term"
  """
  triple_terms(
    """
    distinct select on columns
    """
    distinct_on: [triple_term_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [triple_term_order_by!]
    """
    filter the rows returned
    """
    where: triple_term_bool_exp
  ): [triple_term!]!
  """
  fetch data from the table: "triple_vault" using primary key columns
  """
  triple_vault(curve_id: numeric!, term_id: numeric!): triple_vault
  """
  fetch data from the table in a streaming manner: "triple_vault"
  """
  triple_vault_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [triple_vault_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: triple_vault_bool_exp
  ): [triple_vault!]!
  """
  fetch data from the table: "triple_vault"
  """
  triple_vaults(
    """
    distinct select on columns
    """
    distinct_on: [triple_vault_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [triple_vault_order_by!]
    """
    filter the rows returned
    """
    where: triple_vault_bool_exp
  ): [triple_vault!]!
  """
  An array relationship
  """
  triples(
    """
    distinct select on columns
    """
    distinct_on: [triples_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [triples_order_by!]
    """
    filter the rows returned
    """
    where: triples_bool_exp
  ): [triples!]!
  """
  An aggregate relationship
  """
  triples_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [triples_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [triples_order_by!]
    """
    filter the rows returned
    """
    where: triples_bool_exp
  ): triples_aggregate!
  """
  fetch data from the table in a streaming manner: "triple"
  """
  triples_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [triples_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: triples_bool_exp
  ): [triples!]!
  """
  fetch data from the table: "vault" using primary key columns
  """
  vault(curve_id: numeric!, term_id: numeric!): vaults
  """
  An array relationship
  """
  vaults(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]
    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): [vaults!]!
  """
  An aggregate relationship
  """
  vaults_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]
    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): vaults_aggregate!
  """
  fetch data from the table in a streaming manner: "vault"
  """
  vaults_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!
    """
    cursor to stream the results returned by the query
    """
    cursor: [vaults_stream_cursor_input]!
    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): [vaults!]!
}

scalar term_type

"""
Boolean expression to compare columns of type "term_type". All fields are combined with logical 'AND'.
"""
input term_type_comparison_exp {
  _eq: term_type
  _gt: term_type
  _gte: term_type
  _in: [term_type!]
  _is_null: Boolean
  _lt: term_type
  _lte: term_type
  _neq: term_type
  _nin: [term_type!]
}

"""
columns and relationships of "term"
"""
type terms {
  """
  An object relationship
  """
  atom: atoms
  """
  An object relationship
  """
  atomById: atoms
  atom_id: numeric
  """
  An array relationship
  """
  deposits(
    """
    distinct select on columns
    """
    distinct_on: [deposits_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [deposits_order_by!]
    """
    filter the rows returned
    """
    where: deposits_bool_exp
  ): [deposits!]!
  """
  An aggregate relationship
  """
  deposits_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [deposits_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [deposits_order_by!]
    """
    filter the rows returned
    """
    where: deposits_bool_exp
  ): deposits_aggregate!
  id: numeric!
  """
  An array relationship
  """
  positions(
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): [positions!]!
  """
  An aggregate relationship
  """
  positions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): positions_aggregate!
  """
  An array relationship
  """
  redemptions(
    """
    distinct select on columns
    """
    distinct_on: [redemptions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [redemptions_order_by!]
    """
    filter the rows returned
    """
    where: redemptions_bool_exp
  ): [redemptions!]!
  """
  An aggregate relationship
  """
  redemptions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [redemptions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [redemptions_order_by!]
    """
    filter the rows returned
    """
    where: redemptions_bool_exp
  ): redemptions_aggregate!
  """
  An array relationship
  """
  share_price_change_stats_daily(
    """
    distinct select on columns
    """
    distinct_on: [share_price_change_stats_daily_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_change_stats_daily_order_by!]
    """
    filter the rows returned
    """
    where: share_price_change_stats_daily_bool_exp
  ): [share_price_change_stats_daily!]!
  """
  An array relationship
  """
  share_price_change_stats_hourly(
    """
    distinct select on columns
    """
    distinct_on: [share_price_change_stats_hourly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_change_stats_hourly_order_by!]
    """
    filter the rows returned
    """
    where: share_price_change_stats_hourly_bool_exp
  ): [share_price_change_stats_hourly!]!
  """
  An array relationship
  """
  share_price_change_stats_monthly(
    """
    distinct select on columns
    """
    distinct_on: [share_price_change_stats_monthly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_change_stats_monthly_order_by!]
    """
    filter the rows returned
    """
    where: share_price_change_stats_monthly_bool_exp
  ): [share_price_change_stats_monthly!]!
  """
  An array relationship
  """
  share_price_change_stats_weekly(
    """
    distinct select on columns
    """
    distinct_on: [share_price_change_stats_weekly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_change_stats_weekly_order_by!]
    """
    filter the rows returned
    """
    where: share_price_change_stats_weekly_bool_exp
  ): [share_price_change_stats_weekly!]!
  """
  An array relationship
  """
  share_price_changes(
    """
    distinct select on columns
    """
    distinct_on: [share_price_changes_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_changes_order_by!]
    """
    filter the rows returned
    """
    where: share_price_changes_bool_exp
  ): [share_price_changes!]!
  """
  An aggregate relationship
  """
  share_price_changes_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [share_price_changes_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_changes_order_by!]
    """
    filter the rows returned
    """
    where: share_price_changes_bool_exp
  ): share_price_changes_aggregate!
  """
  An array relationship
  """
  signals(
    """
    distinct select on columns
    """
    distinct_on: [signals_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signals_order_by!]
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): [signals!]!
  """
  An aggregate relationship
  """
  signals_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [signals_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signals_order_by!]
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): signals_aggregate!
  total_assets: numeric
  total_market_cap: numeric
  """
  An object relationship
  """
  triple: triples
  """
  An object relationship
  """
  tripleById: triples
  triple_id: numeric
  type: term_type!
  """
  An array relationship
  """
  vaults(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]
    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): [vaults!]!
  """
  An aggregate relationship
  """
  vaults_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]
    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): vaults_aggregate!
}

type terms_aggregate {
  aggregate: terms_aggregate_fields
  nodes: [terms!]!
}

"""
aggregate fields of "term"
"""
type terms_aggregate_fields {
  avg: terms_avg_fields
  count(columns: [terms_select_column!], distinct: Boolean): Int!
  max: terms_max_fields
  min: terms_min_fields
  stddev: terms_stddev_fields
  stddev_pop: terms_stddev_pop_fields
  stddev_samp: terms_stddev_samp_fields
  sum: terms_sum_fields
  var_pop: terms_var_pop_fields
  var_samp: terms_var_samp_fields
  variance: terms_variance_fields
}

"""
aggregate avg on columns
"""
type terms_avg_fields {
  atom_id: Float
  id: Float
  total_assets: Float
  total_market_cap: Float
  triple_id: Float
}

"""
Boolean expression to filter rows from the table "term". All fields are combined with a logical 'AND'.
"""
input terms_bool_exp {
  _and: [terms_bool_exp!]
  _not: terms_bool_exp
  _or: [terms_bool_exp!]
  atom: atoms_bool_exp
  atomById: atoms_bool_exp
  atom_id: numeric_comparison_exp
  deposits: deposits_bool_exp
  deposits_aggregate: deposits_aggregate_bool_exp
  id: numeric_comparison_exp
  positions: positions_bool_exp
  positions_aggregate: positions_aggregate_bool_exp
  redemptions: redemptions_bool_exp
  redemptions_aggregate: redemptions_aggregate_bool_exp
  share_price_change_stats_daily: share_price_change_stats_daily_bool_exp
  share_price_change_stats_hourly: share_price_change_stats_hourly_bool_exp
  share_price_change_stats_monthly: share_price_change_stats_monthly_bool_exp
  share_price_change_stats_weekly: share_price_change_stats_weekly_bool_exp
  share_price_changes: share_price_changes_bool_exp
  share_price_changes_aggregate: share_price_changes_aggregate_bool_exp
  signals: signals_bool_exp
  signals_aggregate: signals_aggregate_bool_exp
  total_assets: numeric_comparison_exp
  total_market_cap: numeric_comparison_exp
  triple: triples_bool_exp
  tripleById: triples_bool_exp
  triple_id: numeric_comparison_exp
  type: term_type_comparison_exp
  vaults: vaults_bool_exp
  vaults_aggregate: vaults_aggregate_bool_exp
}

"""
aggregate max on columns
"""
type terms_max_fields {
  atom_id: numeric
  id: numeric
  total_assets: numeric
  total_market_cap: numeric
  triple_id: numeric
  type: term_type
}

"""
aggregate min on columns
"""
type terms_min_fields {
  atom_id: numeric
  id: numeric
  total_assets: numeric
  total_market_cap: numeric
  triple_id: numeric
  type: term_type
}

"""
Ordering options when selecting data from "term".
"""
input terms_order_by {
  atom: atoms_order_by
  atomById: atoms_order_by
  atom_id: order_by
  deposits_aggregate: deposits_aggregate_order_by
  id: order_by
  positions_aggregate: positions_aggregate_order_by
  redemptions_aggregate: redemptions_aggregate_order_by
  share_price_change_stats_daily_aggregate: share_price_change_stats_daily_aggregate_order_by
  share_price_change_stats_hourly_aggregate: share_price_change_stats_hourly_aggregate_order_by
  share_price_change_stats_monthly_aggregate: share_price_change_stats_monthly_aggregate_order_by
  share_price_change_stats_weekly_aggregate: share_price_change_stats_weekly_aggregate_order_by
  share_price_changes_aggregate: share_price_changes_aggregate_order_by
  signals_aggregate: signals_aggregate_order_by
  total_assets: order_by
  total_market_cap: order_by
  triple: triples_order_by
  tripleById: triples_order_by
  triple_id: order_by
  type: order_by
  vaults_aggregate: vaults_aggregate_order_by
}

"""
select columns of table "term"
"""
enum terms_select_column {
  """
  column name
  """
  atom_id
  """
  column name
  """
  id
  """
  column name
  """
  total_assets
  """
  column name
  """
  total_market_cap
  """
  column name
  """
  triple_id
  """
  column name
  """
  type
}

"""
aggregate stddev on columns
"""
type terms_stddev_fields {
  atom_id: Float
  id: Float
  total_assets: Float
  total_market_cap: Float
  triple_id: Float
}

"""
aggregate stddev_pop on columns
"""
type terms_stddev_pop_fields {
  atom_id: Float
  id: Float
  total_assets: Float
  total_market_cap: Float
  triple_id: Float
}

"""
aggregate stddev_samp on columns
"""
type terms_stddev_samp_fields {
  atom_id: Float
  id: Float
  total_assets: Float
  total_market_cap: Float
  triple_id: Float
}

"""
Streaming cursor of the table "terms"
"""
input terms_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: terms_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input terms_stream_cursor_value_input {
  atom_id: numeric
  id: numeric
  total_assets: numeric
  total_market_cap: numeric
  triple_id: numeric
  type: term_type
}

"""
aggregate sum on columns
"""
type terms_sum_fields {
  atom_id: numeric
  id: numeric
  total_assets: numeric
  total_market_cap: numeric
  triple_id: numeric
}

"""
aggregate var_pop on columns
"""
type terms_var_pop_fields {
  atom_id: Float
  id: Float
  total_assets: Float
  total_market_cap: Float
  triple_id: Float
}

"""
aggregate var_samp on columns
"""
type terms_var_samp_fields {
  atom_id: Float
  id: Float
  total_assets: Float
  total_market_cap: Float
  triple_id: Float
}

"""
aggregate variance on columns
"""
type terms_variance_fields {
  atom_id: Float
  id: Float
  total_assets: Float
  total_market_cap: Float
  triple_id: Float
}

"""
columns and relationships of "text_object"
"""
type text_objects {
  """
  An object relationship
  """
  atom: atoms
  data: String!
  id: numeric!
}

"""
aggregated selection of "text_object"
"""
type text_objects_aggregate {
  aggregate: text_objects_aggregate_fields
  nodes: [text_objects!]!
}

"""
aggregate fields of "text_object"
"""
type text_objects_aggregate_fields {
  avg: text_objects_avg_fields
  count(columns: [text_objects_select_column!], distinct: Boolean): Int!
  max: text_objects_max_fields
  min: text_objects_min_fields
  stddev: text_objects_stddev_fields
  stddev_pop: text_objects_stddev_pop_fields
  stddev_samp: text_objects_stddev_samp_fields
  sum: text_objects_sum_fields
  var_pop: text_objects_var_pop_fields
  var_samp: text_objects_var_samp_fields
  variance: text_objects_variance_fields
}

"""
aggregate avg on columns
"""
type text_objects_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "text_object". All fields are combined with a logical 'AND'.
"""
input text_objects_bool_exp {
  _and: [text_objects_bool_exp!]
  _not: text_objects_bool_exp
  _or: [text_objects_bool_exp!]
  atom: atoms_bool_exp
  data: String_comparison_exp
  id: numeric_comparison_exp
}

"""
aggregate max on columns
"""
type text_objects_max_fields {
  data: String
  id: numeric
}

"""
aggregate min on columns
"""
type text_objects_min_fields {
  data: String
  id: numeric
}

"""
Ordering options when selecting data from "text_object".
"""
input text_objects_order_by {
  atom: atoms_order_by
  data: order_by
  id: order_by
}

"""
select columns of table "text_object"
"""
enum text_objects_select_column {
  """
  column name
  """
  data
  """
  column name
  """
  id
}

"""
aggregate stddev on columns
"""
type text_objects_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type text_objects_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type text_objects_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "text_objects"
"""
input text_objects_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: text_objects_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input text_objects_stream_cursor_value_input {
  data: String
  id: numeric
}

"""
aggregate sum on columns
"""
type text_objects_sum_fields {
  id: numeric
}

"""
aggregate var_pop on columns
"""
type text_objects_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type text_objects_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type text_objects_variance_fields {
  id: Float
}

"""
columns and relationships of "thing"
"""
type things {
  """
  An object relationship
  """
  atom: atoms
  cached_image: cached_images_cached_image
  description: String
  id: numeric!
  image: String
  name: String
  url: String
}

"""
aggregated selection of "thing"
"""
type things_aggregate {
  aggregate: things_aggregate_fields
  nodes: [things!]!
}

"""
aggregate fields of "thing"
"""
type things_aggregate_fields {
  avg: things_avg_fields
  count(columns: [things_select_column!], distinct: Boolean): Int!
  max: things_max_fields
  min: things_min_fields
  stddev: things_stddev_fields
  stddev_pop: things_stddev_pop_fields
  stddev_samp: things_stddev_samp_fields
  sum: things_sum_fields
  var_pop: things_var_pop_fields
  var_samp: things_var_samp_fields
  variance: things_variance_fields
}

"""
aggregate avg on columns
"""
type things_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "thing". All fields are combined with a logical 'AND'.
"""
input things_bool_exp {
  _and: [things_bool_exp!]
  _not: things_bool_exp
  _or: [things_bool_exp!]
  atom: atoms_bool_exp
  description: String_comparison_exp
  id: numeric_comparison_exp
  image: String_comparison_exp
  name: String_comparison_exp
  url: String_comparison_exp
}

"""
aggregate max on columns
"""
type things_max_fields {
  description: String
  id: numeric
  image: String
  name: String
  url: String
}

"""
aggregate min on columns
"""
type things_min_fields {
  description: String
  id: numeric
  image: String
  name: String
  url: String
}

"""
Ordering options when selecting data from "thing".
"""
input things_order_by {
  atom: atoms_order_by
  description: order_by
  id: order_by
  image: order_by
  name: order_by
  url: order_by
}

"""
select columns of table "thing"
"""
enum things_select_column {
  """
  column name
  """
  description
  """
  column name
  """
  id
  """
  column name
  """
  image
  """
  column name
  """
  name
  """
  column name
  """
  url
}

"""
aggregate stddev on columns
"""
type things_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type things_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type things_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "things"
"""
input things_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: things_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input things_stream_cursor_value_input {
  description: String
  id: numeric
  image: String
  name: String
  url: String
}

"""
aggregate sum on columns
"""
type things_sum_fields {
  id: numeric
}

"""
aggregate var_pop on columns
"""
type things_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type things_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type things_variance_fields {
  id: Float
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "triple_term"
"""
type triple_term {
  """
  An object relationship
  """
  counter_term: terms!
  counter_term_id: numeric!
  """
  An object relationship
  """
  term: terms!
  term_id: numeric!
  total_assets: numeric!
  total_market_cap: numeric!
  total_position_count: bigint!
  updated_at: timestamptz!
}

"""
Boolean expression to filter rows from the table "triple_term". All fields are combined with a logical 'AND'.
"""
input triple_term_bool_exp {
  _and: [triple_term_bool_exp!]
  _not: triple_term_bool_exp
  _or: [triple_term_bool_exp!]
  counter_term: terms_bool_exp
  counter_term_id: numeric_comparison_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
  total_assets: numeric_comparison_exp
  total_market_cap: numeric_comparison_exp
  total_position_count: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
Ordering options when selecting data from "triple_term".
"""
input triple_term_order_by {
  counter_term: terms_order_by
  counter_term_id: order_by
  term: terms_order_by
  term_id: order_by
  total_assets: order_by
  total_market_cap: order_by
  total_position_count: order_by
  updated_at: order_by
}

"""
select columns of table "triple_term"
"""
enum triple_term_select_column {
  """
  column name
  """
  counter_term_id
  """
  column name
  """
  term_id
  """
  column name
  """
  total_assets
  """
  column name
  """
  total_market_cap
  """
  column name
  """
  total_position_count
  """
  column name
  """
  updated_at
}

"""
Streaming cursor of the table "triple_term"
"""
input triple_term_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: triple_term_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input triple_term_stream_cursor_value_input {
  counter_term_id: numeric
  term_id: numeric
  total_assets: numeric
  total_market_cap: numeric
  total_position_count: bigint
  updated_at: timestamptz
}

"""
columns and relationships of "triple_vault"
"""
type triple_vault {
  block_number: numeric!
  """
  An object relationship
  """
  counter_term: terms
  counter_term_id: numeric!
  curve_id: numeric!
  log_index: bigint!
  market_cap: numeric!
  position_count: bigint!
  """
  An object relationship
  """
  term: terms
  term_id: numeric!
  total_assets: numeric!
  total_shares: numeric!
  updated_at: timestamptz!
}

"""
Boolean expression to filter rows from the table "triple_vault". All fields are combined with a logical 'AND'.
"""
input triple_vault_bool_exp {
  _and: [triple_vault_bool_exp!]
  _not: triple_vault_bool_exp
  _or: [triple_vault_bool_exp!]
  block_number: numeric_comparison_exp
  counter_term: terms_bool_exp
  counter_term_id: numeric_comparison_exp
  curve_id: numeric_comparison_exp
  log_index: bigint_comparison_exp
  market_cap: numeric_comparison_exp
  position_count: bigint_comparison_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
  total_assets: numeric_comparison_exp
  total_shares: numeric_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
Ordering options when selecting data from "triple_vault".
"""
input triple_vault_order_by {
  block_number: order_by
  counter_term: terms_order_by
  counter_term_id: order_by
  curve_id: order_by
  log_index: order_by
  market_cap: order_by
  position_count: order_by
  term: terms_order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
  updated_at: order_by
}

"""
select columns of table "triple_vault"
"""
enum triple_vault_select_column {
  """
  column name
  """
  block_number
  """
  column name
  """
  counter_term_id
  """
  column name
  """
  curve_id
  """
  column name
  """
  log_index
  """
  column name
  """
  market_cap
  """
  column name
  """
  position_count
  """
  column name
  """
  term_id
  """
  column name
  """
  total_assets
  """
  column name
  """
  total_shares
  """
  column name
  """
  updated_at
}

"""
Streaming cursor of the table "triple_vault"
"""
input triple_vault_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: triple_vault_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input triple_vault_stream_cursor_value_input {
  block_number: numeric
  counter_term_id: numeric
  curve_id: numeric
  log_index: bigint
  market_cap: numeric
  position_count: bigint
  term_id: numeric
  total_assets: numeric
  total_shares: numeric
  updated_at: timestamptz
}

"""
columns and relationships of "triple"
"""
type triples {
  block_number: numeric!
  """
  An array relationship
  """
  counter_positions(
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): [positions!]!
  """
  An aggregate relationship
  """
  counter_positions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): positions_aggregate!
  """
  An object relationship
  """
  counter_term: terms
  counter_term_id: numeric!
  created_at: timestamptz!
  """
  An object relationship
  """
  creator: accounts
  creator_id: String!
  """
  An object relationship
  """
  object: atoms!
  object_id: numeric!
  """
  An array relationship
  """
  positions(
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): [positions!]!
  """
  An aggregate relationship
  """
  positions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): positions_aggregate!
  """
  An object relationship
  """
  predicate: atoms!
  predicate_id: numeric!
  """
  An object relationship
  """
  subject: atoms!
  subject_id: numeric!
  """
  An object relationship
  """
  term: terms
  term_id: numeric!
  transaction_hash: String!
  """
  An object relationship
  """
  triple_term: triple_term
  """
  An object relationship
  """
  triple_vault: triple_vault
}

"""
aggregated selection of "triple"
"""
type triples_aggregate {
  aggregate: triples_aggregate_fields
  nodes: [triples!]!
}

input triples_aggregate_bool_exp {
  count: triples_aggregate_bool_exp_count
}

input triples_aggregate_bool_exp_count {
  arguments: [triples_select_column!]
  distinct: Boolean
  filter: triples_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "triple"
"""
type triples_aggregate_fields {
  avg: triples_avg_fields
  count(columns: [triples_select_column!], distinct: Boolean): Int!
  max: triples_max_fields
  min: triples_min_fields
  stddev: triples_stddev_fields
  stddev_pop: triples_stddev_pop_fields
  stddev_samp: triples_stddev_samp_fields
  sum: triples_sum_fields
  var_pop: triples_var_pop_fields
  var_samp: triples_var_samp_fields
  variance: triples_variance_fields
}

"""
order by aggregate values of table "triple"
"""
input triples_aggregate_order_by {
  avg: triples_avg_order_by
  count: order_by
  max: triples_max_order_by
  min: triples_min_order_by
  stddev: triples_stddev_order_by
  stddev_pop: triples_stddev_pop_order_by
  stddev_samp: triples_stddev_samp_order_by
  sum: triples_sum_order_by
  var_pop: triples_var_pop_order_by
  var_samp: triples_var_samp_order_by
  variance: triples_variance_order_by
}

"""
aggregate avg on columns
"""
type triples_avg_fields {
  block_number: Float
  counter_term_id: Float
  object_id: Float
  predicate_id: Float
  subject_id: Float
  term_id: Float
}

"""
order by avg() on columns of table "triple"
"""
input triples_avg_order_by {
  block_number: order_by
  counter_term_id: order_by
  object_id: order_by
  predicate_id: order_by
  subject_id: order_by
  term_id: order_by
}

"""
Boolean expression to filter rows from the table "triple". All fields are combined with a logical 'AND'.
"""
input triples_bool_exp {
  _and: [triples_bool_exp!]
  _not: triples_bool_exp
  _or: [triples_bool_exp!]
  block_number: numeric_comparison_exp
  counter_positions: positions_bool_exp
  counter_positions_aggregate: positions_aggregate_bool_exp
  counter_term: terms_bool_exp
  counter_term_id: numeric_comparison_exp
  created_at: timestamptz_comparison_exp
  creator: accounts_bool_exp
  creator_id: String_comparison_exp
  object: atoms_bool_exp
  object_id: numeric_comparison_exp
  positions: positions_bool_exp
  positions_aggregate: positions_aggregate_bool_exp
  predicate: atoms_bool_exp
  predicate_id: numeric_comparison_exp
  subject: atoms_bool_exp
  subject_id: numeric_comparison_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
  transaction_hash: String_comparison_exp
  triple_term: triple_term_bool_exp
  triple_vault: triple_vault_bool_exp
}

"""
aggregate max on columns
"""
type triples_max_fields {
  block_number: numeric
  counter_term_id: numeric
  created_at: timestamptz
  creator_id: String
  object_id: numeric
  predicate_id: numeric
  subject_id: numeric
  term_id: numeric
  transaction_hash: String
}

"""
order by max() on columns of table "triple"
"""
input triples_max_order_by {
  block_number: order_by
  counter_term_id: order_by
  created_at: order_by
  creator_id: order_by
  object_id: order_by
  predicate_id: order_by
  subject_id: order_by
  term_id: order_by
  transaction_hash: order_by
}

"""
aggregate min on columns
"""
type triples_min_fields {
  block_number: numeric
  counter_term_id: numeric
  created_at: timestamptz
  creator_id: String
  object_id: numeric
  predicate_id: numeric
  subject_id: numeric
  term_id: numeric
  transaction_hash: String
}

"""
order by min() on columns of table "triple"
"""
input triples_min_order_by {
  block_number: order_by
  counter_term_id: order_by
  created_at: order_by
  creator_id: order_by
  object_id: order_by
  predicate_id: order_by
  subject_id: order_by
  term_id: order_by
  transaction_hash: order_by
}

"""
Ordering options when selecting data from "triple".
"""
input triples_order_by {
  block_number: order_by
  counter_positions_aggregate: positions_aggregate_order_by
  counter_term: terms_order_by
  counter_term_id: order_by
  created_at: order_by
  creator: accounts_order_by
  creator_id: order_by
  object: atoms_order_by
  object_id: order_by
  positions_aggregate: positions_aggregate_order_by
  predicate: atoms_order_by
  predicate_id: order_by
  subject: atoms_order_by
  subject_id: order_by
  term: terms_order_by
  term_id: order_by
  transaction_hash: order_by
  triple_term: triple_term_order_by
  triple_vault: triple_vault_order_by
}

"""
select columns of table "triple"
"""
enum triples_select_column {
  """
  column name
  """
  block_number
  """
  column name
  """
  counter_term_id
  """
  column name
  """
  created_at
  """
  column name
  """
  creator_id
  """
  column name
  """
  object_id
  """
  column name
  """
  predicate_id
  """
  column name
  """
  subject_id
  """
  column name
  """
  term_id
  """
  column name
  """
  transaction_hash
}

"""
aggregate stddev on columns
"""
type triples_stddev_fields {
  block_number: Float
  counter_term_id: Float
  object_id: Float
  predicate_id: Float
  subject_id: Float
  term_id: Float
}

"""
order by stddev() on columns of table "triple"
"""
input triples_stddev_order_by {
  block_number: order_by
  counter_term_id: order_by
  object_id: order_by
  predicate_id: order_by
  subject_id: order_by
  term_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type triples_stddev_pop_fields {
  block_number: Float
  counter_term_id: Float
  object_id: Float
  predicate_id: Float
  subject_id: Float
  term_id: Float
}

"""
order by stddev_pop() on columns of table "triple"
"""
input triples_stddev_pop_order_by {
  block_number: order_by
  counter_term_id: order_by
  object_id: order_by
  predicate_id: order_by
  subject_id: order_by
  term_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type triples_stddev_samp_fields {
  block_number: Float
  counter_term_id: Float
  object_id: Float
  predicate_id: Float
  subject_id: Float
  term_id: Float
}

"""
order by stddev_samp() on columns of table "triple"
"""
input triples_stddev_samp_order_by {
  block_number: order_by
  counter_term_id: order_by
  object_id: order_by
  predicate_id: order_by
  subject_id: order_by
  term_id: order_by
}

"""
Streaming cursor of the table "triples"
"""
input triples_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: triples_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input triples_stream_cursor_value_input {
  block_number: numeric
  counter_term_id: numeric
  created_at: timestamptz
  creator_id: String
  object_id: numeric
  predicate_id: numeric
  subject_id: numeric
  term_id: numeric
  transaction_hash: String
}

"""
aggregate sum on columns
"""
type triples_sum_fields {
  block_number: numeric
  counter_term_id: numeric
  object_id: numeric
  predicate_id: numeric
  subject_id: numeric
  term_id: numeric
}

"""
order by sum() on columns of table "triple"
"""
input triples_sum_order_by {
  block_number: order_by
  counter_term_id: order_by
  object_id: order_by
  predicate_id: order_by
  subject_id: order_by
  term_id: order_by
}

"""
aggregate var_pop on columns
"""
type triples_var_pop_fields {
  block_number: Float
  counter_term_id: Float
  object_id: Float
  predicate_id: Float
  subject_id: Float
  term_id: Float
}

"""
order by var_pop() on columns of table "triple"
"""
input triples_var_pop_order_by {
  block_number: order_by
  counter_term_id: order_by
  object_id: order_by
  predicate_id: order_by
  subject_id: order_by
  term_id: order_by
}

"""
aggregate var_samp on columns
"""
type triples_var_samp_fields {
  block_number: Float
  counter_term_id: Float
  object_id: Float
  predicate_id: Float
  subject_id: Float
  term_id: Float
}

"""
order by var_samp() on columns of table "triple"
"""
input triples_var_samp_order_by {
  block_number: order_by
  counter_term_id: order_by
  object_id: order_by
  predicate_id: order_by
  subject_id: order_by
  term_id: order_by
}

"""
aggregate variance on columns
"""
type triples_variance_fields {
  block_number: Float
  counter_term_id: Float
  object_id: Float
  predicate_id: Float
  subject_id: Float
  term_id: Float
}

"""
order by variance() on columns of table "triple"
"""
input triples_variance_order_by {
  block_number: order_by
  counter_term_id: order_by
  object_id: order_by
  predicate_id: order_by
  subject_id: order_by
  term_id: order_by
}

"""
columns and relationships of "vault"
"""
type vaults {
  created_at: timestamptz!
  current_share_price: numeric!
  curve_id: numeric!
  """
  An array relationship
  """
  deposits(
    """
    distinct select on columns
    """
    distinct_on: [deposits_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [deposits_order_by!]
    """
    filter the rows returned
    """
    where: deposits_bool_exp
  ): [deposits!]!
  """
  An aggregate relationship
  """
  deposits_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [deposits_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [deposits_order_by!]
    """
    filter the rows returned
    """
    where: deposits_bool_exp
  ): deposits_aggregate!
  market_cap: numeric!
  position_count: Int!
  """
  An array relationship
  """
  positions(
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): [positions!]!
  """
  An aggregate relationship
  """
  positions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [positions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [positions_order_by!]
    """
    filter the rows returned
    """
    where: positions_bool_exp
  ): positions_aggregate!
  """
  An array relationship
  """
  redemptions(
    """
    distinct select on columns
    """
    distinct_on: [redemptions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [redemptions_order_by!]
    """
    filter the rows returned
    """
    where: redemptions_bool_exp
  ): [redemptions!]!
  """
  An aggregate relationship
  """
  redemptions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [redemptions_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [redemptions_order_by!]
    """
    filter the rows returned
    """
    where: redemptions_bool_exp
  ): redemptions_aggregate!
  """
  An array relationship
  """
  share_price_change_stats_daily(
    """
    distinct select on columns
    """
    distinct_on: [share_price_change_stats_daily_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_change_stats_daily_order_by!]
    """
    filter the rows returned
    """
    where: share_price_change_stats_daily_bool_exp
  ): [share_price_change_stats_daily!]!
  """
  An array relationship
  """
  share_price_change_stats_hourly(
    """
    distinct select on columns
    """
    distinct_on: [share_price_change_stats_hourly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_change_stats_hourly_order_by!]
    """
    filter the rows returned
    """
    where: share_price_change_stats_hourly_bool_exp
  ): [share_price_change_stats_hourly!]!
  """
  An array relationship
  """
  share_price_change_stats_monthly(
    """
    distinct select on columns
    """
    distinct_on: [share_price_change_stats_monthly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_change_stats_monthly_order_by!]
    """
    filter the rows returned
    """
    where: share_price_change_stats_monthly_bool_exp
  ): [share_price_change_stats_monthly!]!
  """
  An array relationship
  """
  share_price_change_stats_weekly(
    """
    distinct select on columns
    """
    distinct_on: [share_price_change_stats_weekly_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_change_stats_weekly_order_by!]
    """
    filter the rows returned
    """
    where: share_price_change_stats_weekly_bool_exp
  ): [share_price_change_stats_weekly!]!
  """
  An array relationship
  """
  share_price_changes(
    """
    distinct select on columns
    """
    distinct_on: [share_price_changes_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_changes_order_by!]
    """
    filter the rows returned
    """
    where: share_price_changes_bool_exp
  ): [share_price_changes!]!
  """
  An aggregate relationship
  """
  share_price_changes_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [share_price_changes_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [share_price_changes_order_by!]
    """
    filter the rows returned
    """
    where: share_price_changes_bool_exp
  ): share_price_changes_aggregate!
  """
  An array relationship
  """
  signals(
    """
    distinct select on columns
    """
    distinct_on: [signals_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signals_order_by!]
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): [signals!]!
  """
  An aggregate relationship
  """
  signals_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [signals_select_column!]
    """
    limit the number of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [signals_order_by!]
    """
    filter the rows returned
    """
    where: signals_bool_exp
  ): signals_aggregate!
  """
  An object relationship
  """
  term: terms!
  term_id: numeric!
  total_assets: numeric!
  total_shares: numeric!
  updated_at: timestamptz!
}

"""
aggregated selection of "vault"
"""
type vaults_aggregate {
  aggregate: vaults_aggregate_fields
  nodes: [vaults!]!
}

input vaults_aggregate_bool_exp {
  count: vaults_aggregate_bool_exp_count
}

input vaults_aggregate_bool_exp_count {
  arguments: [vaults_select_column!]
  distinct: Boolean
  filter: vaults_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "vault"
"""
type vaults_aggregate_fields {
  avg: vaults_avg_fields
  count(columns: [vaults_select_column!], distinct: Boolean): Int!
  max: vaults_max_fields
  min: vaults_min_fields
  stddev: vaults_stddev_fields
  stddev_pop: vaults_stddev_pop_fields
  stddev_samp: vaults_stddev_samp_fields
  sum: vaults_sum_fields
  var_pop: vaults_var_pop_fields
  var_samp: vaults_var_samp_fields
  variance: vaults_variance_fields
}

"""
order by aggregate values of table "vault"
"""
input vaults_aggregate_order_by {
  avg: vaults_avg_order_by
  count: order_by
  max: vaults_max_order_by
  min: vaults_min_order_by
  stddev: vaults_stddev_order_by
  stddev_pop: vaults_stddev_pop_order_by
  stddev_samp: vaults_stddev_samp_order_by
  sum: vaults_sum_order_by
  var_pop: vaults_var_pop_order_by
  var_samp: vaults_var_samp_order_by
  variance: vaults_variance_order_by
}

"""
aggregate avg on columns
"""
type vaults_avg_fields {
  current_share_price: Float
  curve_id: Float
  market_cap: Float
  position_count: Float
  term_id: Float
  total_assets: Float
  total_shares: Float
}

"""
order by avg() on columns of table "vault"
"""
input vaults_avg_order_by {
  current_share_price: order_by
  curve_id: order_by
  market_cap: order_by
  position_count: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
}

"""
Boolean expression to filter rows from the table "vault". All fields are combined with a logical 'AND'.
"""
input vaults_bool_exp {
  _and: [vaults_bool_exp!]
  _not: vaults_bool_exp
  _or: [vaults_bool_exp!]
  created_at: timestamptz_comparison_exp
  current_share_price: numeric_comparison_exp
  curve_id: numeric_comparison_exp
  deposits: deposits_bool_exp
  deposits_aggregate: deposits_aggregate_bool_exp
  market_cap: numeric_comparison_exp
  position_count: Int_comparison_exp
  positions: positions_bool_exp
  positions_aggregate: positions_aggregate_bool_exp
  redemptions: redemptions_bool_exp
  redemptions_aggregate: redemptions_aggregate_bool_exp
  share_price_change_stats_daily: share_price_change_stats_daily_bool_exp
  share_price_change_stats_hourly: share_price_change_stats_hourly_bool_exp
  share_price_change_stats_monthly: share_price_change_stats_monthly_bool_exp
  share_price_change_stats_weekly: share_price_change_stats_weekly_bool_exp
  share_price_changes: share_price_changes_bool_exp
  share_price_changes_aggregate: share_price_changes_aggregate_bool_exp
  signals: signals_bool_exp
  signals_aggregate: signals_aggregate_bool_exp
  term: terms_bool_exp
  term_id: numeric_comparison_exp
  total_assets: numeric_comparison_exp
  total_shares: numeric_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
aggregate max on columns
"""
type vaults_max_fields {
  created_at: timestamptz
  current_share_price: numeric
  curve_id: numeric
  market_cap: numeric
  position_count: Int
  term_id: numeric
  total_assets: numeric
  total_shares: numeric
  updated_at: timestamptz
}

"""
order by max() on columns of table "vault"
"""
input vaults_max_order_by {
  created_at: order_by
  current_share_price: order_by
  curve_id: order_by
  market_cap: order_by
  position_count: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type vaults_min_fields {
  created_at: timestamptz
  current_share_price: numeric
  curve_id: numeric
  market_cap: numeric
  position_count: Int
  term_id: numeric
  total_assets: numeric
  total_shares: numeric
  updated_at: timestamptz
}

"""
order by min() on columns of table "vault"
"""
input vaults_min_order_by {
  created_at: order_by
  current_share_price: order_by
  curve_id: order_by
  market_cap: order_by
  position_count: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "vault".
"""
input vaults_order_by {
  created_at: order_by
  current_share_price: order_by
  curve_id: order_by
  deposits_aggregate: deposits_aggregate_order_by
  market_cap: order_by
  position_count: order_by
  positions_aggregate: positions_aggregate_order_by
  redemptions_aggregate: redemptions_aggregate_order_by
  share_price_change_stats_daily_aggregate: share_price_change_stats_daily_aggregate_order_by
  share_price_change_stats_hourly_aggregate: share_price_change_stats_hourly_aggregate_order_by
  share_price_change_stats_monthly_aggregate: share_price_change_stats_monthly_aggregate_order_by
  share_price_change_stats_weekly_aggregate: share_price_change_stats_weekly_aggregate_order_by
  share_price_changes_aggregate: share_price_changes_aggregate_order_by
  signals_aggregate: signals_aggregate_order_by
  term: terms_order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
  updated_at: order_by
}

"""
select columns of table "vault"
"""
enum vaults_select_column {
  """
  column name
  """
  created_at
  """
  column name
  """
  current_share_price
  """
  column name
  """
  curve_id
  """
  column name
  """
  market_cap
  """
  column name
  """
  position_count
  """
  column name
  """
  term_id
  """
  column name
  """
  total_assets
  """
  column name
  """
  total_shares
  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type vaults_stddev_fields {
  current_share_price: Float
  curve_id: Float
  market_cap: Float
  position_count: Float
  term_id: Float
  total_assets: Float
  total_shares: Float
}

"""
order by stddev() on columns of table "vault"
"""
input vaults_stddev_order_by {
  current_share_price: order_by
  curve_id: order_by
  market_cap: order_by
  position_count: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
}

"""
aggregate stddev_pop on columns
"""
type vaults_stddev_pop_fields {
  current_share_price: Float
  curve_id: Float
  market_cap: Float
  position_count: Float
  term_id: Float
  total_assets: Float
  total_shares: Float
}

"""
order by stddev_pop() on columns of table "vault"
"""
input vaults_stddev_pop_order_by {
  current_share_price: order_by
  curve_id: order_by
  market_cap: order_by
  position_count: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
}

"""
aggregate stddev_samp on columns
"""
type vaults_stddev_samp_fields {
  current_share_price: Float
  curve_id: Float
  market_cap: Float
  position_count: Float
  term_id: Float
  total_assets: Float
  total_shares: Float
}

"""
order by stddev_samp() on columns of table "vault"
"""
input vaults_stddev_samp_order_by {
  current_share_price: order_by
  curve_id: order_by
  market_cap: order_by
  position_count: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
}

"""
Streaming cursor of the table "vaults"
"""
input vaults_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: vaults_stream_cursor_value_input!
  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input vaults_stream_cursor_value_input {
  created_at: timestamptz
  current_share_price: numeric
  curve_id: numeric
  market_cap: numeric
  position_count: Int
  term_id: numeric
  total_assets: numeric
  total_shares: numeric
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type vaults_sum_fields {
  current_share_price: numeric
  curve_id: numeric
  market_cap: numeric
  position_count: Int
  term_id: numeric
  total_assets: numeric
  total_shares: numeric
}

"""
order by sum() on columns of table "vault"
"""
input vaults_sum_order_by {
  current_share_price: order_by
  curve_id: order_by
  market_cap: order_by
  position_count: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
}

"""
aggregate var_pop on columns
"""
type vaults_var_pop_fields {
  current_share_price: Float
  curve_id: Float
  market_cap: Float
  position_count: Float
  term_id: Float
  total_assets: Float
  total_shares: Float
}

"""
order by var_pop() on columns of table "vault"
"""
input vaults_var_pop_order_by {
  current_share_price: order_by
  curve_id: order_by
  market_cap: order_by
  position_count: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
}

"""
aggregate var_samp on columns
"""
type vaults_var_samp_fields {
  current_share_price: Float
  curve_id: Float
  market_cap: Float
  position_count: Float
  term_id: Float
  total_assets: Float
  total_shares: Float
}

"""
order by var_samp() on columns of table "vault"
"""
input vaults_var_samp_order_by {
  current_share_price: order_by
  curve_id: order_by
  market_cap: order_by
  position_count: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
}

"""
aggregate variance on columns
"""
type vaults_variance_fields {
  current_share_price: Float
  curve_id: Float
  market_cap: Float
  position_count: Float
  term_id: Float
  total_assets: Float
  total_shares: Float
}

"""
order by variance() on columns of table "vault"
"""
input vaults_variance_order_by {
  current_share_price: order_by
  curve_id: order_by
  market_cap: order_by
  position_count: order_by
  term_id: order_by
  total_assets: order_by
  total_shares: order_by
}
